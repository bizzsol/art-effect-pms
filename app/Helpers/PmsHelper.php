<?php
bolt_decrypt( __FILE__ , '1OYPWw'); return 0;
##!!!##