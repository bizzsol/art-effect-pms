<?php
bolt_decrypt( __FILE__ , 'GYsU4F'); return 0;
##!!!##