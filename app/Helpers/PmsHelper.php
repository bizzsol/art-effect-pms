<?php
bolt_decrypt( __FILE__ , 'jGCPJi'); return 0;
##!!!##