<?php
bolt_decrypt( __FILE__ , 'g1NKuE'); return 0;
##!!!##