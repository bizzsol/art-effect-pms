<?php
bolt_decrypt( __FILE__ , 'P3Wvr6'); return 0;
##!!!##