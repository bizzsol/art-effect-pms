<?php
bolt_decrypt( __FILE__ , 'LX9aNV'); return 0;
##!!!##