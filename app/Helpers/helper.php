<?php
bolt_decrypt( __FILE__ , 'foP20p'); return 0;
##!!!##