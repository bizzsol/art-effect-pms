<?php
bolt_decrypt( __FILE__ , '36ZSsn'); return 0;
##!!!##