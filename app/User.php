<?php
bolt_decrypt( __FILE__ , 'GtcIFJ'); return 0;
##!!!##