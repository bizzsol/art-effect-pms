<?php
bolt_decrypt( __FILE__ , 'oX6EMh'); return 0;
##!!!##