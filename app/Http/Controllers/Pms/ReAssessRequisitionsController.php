<?php
bolt_decrypt( __FILE__ , 'XUbJAf'); return 0;
##!!!##

namespace App\Http\Controllers\Pms;

use App\Http\Controllers\Controller;
use App\Mail\Pms\RequestForProposalToSupplierMail;
use App\Models\PmsModels\Category;
use App\Models\PmsModels\Product;
use App\Models\PmsModels\Requisition;
use App\Models\PmsModels\RequisitionItem;
use App\Models\PmsModels\RequisitionItemAttribute;
use App\Models\PmsModels\RequisitionType;
use App\Models\PmsModels\Rfp\RequestProposal;
use App\Models\PmsModels\Rfp\RequestProposalDefineSupplier;
use App\Models\PmsModels\Rfp\RequestProposalDetails;
use App\Models\PmsModels\Quotations;
use App\Models\PmsModels\QuotationsItems;
use App\Models\PmsModels\Suppliers;
use App\Models\PmsModels\SupplierPaymentTerm;
use App\Models\PmsModels\RequestProposalTracking;
use App\Models\PmsModels\RequestProposalRequisitions;
use App\Models\PmsModels\Purchase\PurchaseOrder;
use App\Models\Hr\Department;
use App\User;

use App\Models\PmsModels\Accounts\CurrencyType;

use Illuminate\Http\Request;
use App\Http\Requests;
use DB, Validator, Auth, View;
use Illuminate\Support\Facades\Mail;
use PDF, URL, DataTables;

class ReAssessRequisitionsController extends Controller
{
    public function headerColumns($value = '')
    {
        $row = array(
            ['SL', 'SL', '', 'width:5%'],
            ['unit', 'unit', 'text-center'],
            ['reference_no', 'reference_no', 'text-center', 'width:20%'],
            ['requisition_date', 'requisition_date', 'text-center'],
            ['product_category', 'product_category', 'text-center'],
            ['department', 'department', 'text-center'],
            ['requisition_by', 'requisition_by', 'text-center'],
            ['attachment', 'attachment', 'text-center'],
            ['saleable', 'saleable', 'text-center'],
            ['actions', 'actions', 'text-center', 'width:15%']
        );

        if (auth()->user()->hasRole('Employee') || auth()->user()->hasRole('Department-Head') || auth()->user()->hasRole('Purchase-Department')) {

        } else {
            unset($row[7]);
        }

        return $row;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        try {
            if (request()->ajax()) {
                $requisitionIds = getMergedRequisisionID([
                    'is_po_generate' => 'no',
                    'is_send_to_rfp' => 'yes',
                    'delivery_status' => 'rfp',
                    'approved_id' => 1,
                    'status' => 1,
                ], [
                    'is_po_generate' => 'no',
                    'is_send_to_rfp' => 'yes',
                    'delivery_status' => 'partial-delivered',
                    'approved_id' => 1,
                    'status' => 1,
                    'request_status' => 'send_rfp',
                ]);

                return Datatables::of(
                        Requisition::whereIn('id', $requisitionIds)
                        ->when(!auth()->user()->hasAnyRole(['Purchase-Department', 'Audit', 'Billing', 'Management', 'Accounts']), function($query){
                            return $query->where('assigned_user_id', auth()->user()->id);
                        })
                        ->with([
                            'unit',
                            'requisitionItems' => function($query){
                                return $query->when(request()->get('product_id') > 0, function($query){
                                  return $query->where('product_id', request()->get('product_id'));  
                                })
                                ->where('is_send', 'no');
                            },
                            'requisitionItems.product.productUnit',
                            'requisitionItems.product.category.category',
                            'requisitionItems.product.attributes.attributeOption.attribute',
                            'relRequisitionDelivery.relDeliveryItems',
                            'requisitionItems.attributes.attributeOption.attribute'
                        ])
                        // ->whereHas('requisitionItems', function($query){
                        //     return $query->where('is_send', 'no');
                        // })
                        ->doesntHave('requestProposalRequisition.relRequestProposal.relQuotations')
                        ->when(!datatableOrdering(), function ($query) {
                            return $query->orderby('updated_at', 'desc');
                        })
                    )
                    ->addIndexColumn()
                    ->editColumn('reference_no', function ($values) {
                        return '<a href="javascript:void(0)" onclick="openModal(' . $values->id . ')"  class="btn btn-link">' . $values->reference_no . '</a>';
                    })
                    ->editColumn('requisition_date', function ($values) {
                        return date('Y-m-d', strtotime($values->requisition_date));
                    })
                    ->filterColumn('requisition_date', function ($query, $keyword) {
                        $query->where('requisition_date', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('requisition_date', function ($query, $order) {
                        return $query->orderBy('requisition_date', $order);
                    })
                    ->addColumn('product_category', function ($values) {
                        return isset($values->items[0]->product->category->category->name) ? $values->items[0]->product->category->category->name : '';
                    })
                    ->filterColumn('product_category', function ($query, $keyword) {
                        return $query->whereHas('items.product.category.category', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('product_category', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequisitionItem::select('main_category.name')
                            ->join('products', 'products.id', '=', 'requisition_items.product_id')
                            ->join('categories as sub_category', 'sub_category.id', '=', 'products.category_id')
                            ->join('categories as main_category', 'main_category.id', '=', 'sub_category.parent_id')
                            ->whereColumn('requisition_items.requisition_id', 'requisitions.id')
                            ->take(1)
                        );
                    })
                    ->addColumn('unit', function ($values) {
                        return $values->unit->hr_unit_short_name;
                    })
                    ->filterColumn('unit', function ($query, $keyword) {
                        return $query->whereHas('unit', function ($query) use ($keyword) {
                            $query->where('hr_unit_short_name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('unit', function ($query, $order) {
                        return pleaseSortMe($query, $order, User::select('hr_unit.hr_unit_short_name')
                            ->whereColumn('hr_unit.hr_unit_id', 'requisitions.hr_unit_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('department', function ($values) {
                        return isset($values->relUsersList->employee->department->hr_department_name) ? $values->relUsersList->employee->department->hr_department_name : '';
                    })
                    ->filterColumn('department', function ($query, $keyword) {
                        return $query->whereHas('relUsersList.employee.department', function ($query) use ($keyword) {
                            $query->where('hr_department_name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('department', function ($query, $order) {
                        return pleaseSortMe($query, $order, User::select('hr_department.hr_department_name')
                            ->join('hr_as_basic_info', 'hr_as_basic_info.associate_id', '=', 'users.associate_id')
                            ->join('hr_department', 'hr_department.hr_department_id', '=', 'hr_as_basic_info.as_department_id')
                            ->whereColumn('users.id', 'requisitions.author_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('requisition_by', function ($values) {
                        return isset($values->relUsersList->name) ? $values->relUsersList->name : '';
                    })
                    ->filterColumn('requisition_by', function ($query, $keyword) {
                        return $query->whereHas('relUsersList', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('requisition_by', function ($query, $order) {
                        return pleaseSortMe($query, $order, User::select('users.name')
                            ->whereColumn('users.id', 'requisitions.author_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('attachment', function ($values) {
                        $attachment = '';
                        if (auth()->user()->hasRole('Employee') || auth()->user()->hasRole('Department-Head') || auth()->user()->hasRole('Purchase-Department')) {
                            if (!empty($values->attachment) && file_exists(public_path($values->attachment))) {
                                $attachment .= '<a href="' . url($values->attachment) . '" target="_blank" class="btn btn-xs btn-primary"><i class="las la-paperclip"></i>Attachment</a>';
                            }
                        }

                        return $attachment;
                    })
                    ->addColumn('actions', function ($values) {
                        return '<a href="'.url('pms/rfp/re-assess-requisitions/'.$values->id).'" class="btn btn-xs btn-success text-white"><i class="las la-retweet"></i>&nbsp;Re-Assess</a>';
                    })
                    ->rawColumns(['reference_no', 'attachment', 'actions'])
                    ->make(true);
            }

            $data = [
                'title' => 'Re-Assess Requisitions',
                'headerColumns' => $this->headerColumns(),
            ];

            return view('pms.backend.pages.rfp.re-assess.index', $data);
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    public function show($id)
    {
        try {
            $requisition = Requisition::with([
                'items.product.category',
                'items.product.productUnit',
                'items.product.attributes.attributeOption.attribute',
                'items.attributes.attributeOption.attribute',
            ])->findOrFail($id);
            return view('pms.backend.pages.rfp.re-assess.edit', [
                'title' => "Re-Assess Requisition",
                'requisition' => $requisition,
            ]);
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    public function update(Request $request, $id)
    {
        DB::beginTransaction();
        try {
            $requisition = Requisition::findOrFail($id);

            $requisition->status = 3;
            $requisition->is_finance_approval = 'pending';
            $requisition->is_send_to_rfp = 'no';
            $requisition->assessment = 'yes';
            $requisition->assessment_option = $request->assessment_option;
            $requisition->assessment_status = 'pending';
            $requisition->save();

            $items = RequisitionItem::with([
                'product'
            ])
            ->where('requisition_id', $requisition->id)
            ->get();
            $attributes = [];
            if (isset($items[0])) {
                foreach ($items as $item_key => $item) {
                    if (isset($request->attribute_options[$item_key+1]) && is_array($request->attribute_options[$item_key+1]) && count($request->attribute_options[$item_key+1]) > 0) {
                        foreach ($request->attribute_options[$item_key+1] as $attribute_id => $attribute_option_id) {
                            if (isset($request->product_attributes[$item_key+1]) && in_array($attribute_id, $request->product_attributes[$item_key+1])) {
                                array_push($attributes, [
                                    'requisition_item_id' => $item->id,
                                    'attribute_option_id' => getAttributeOption($item->product->category_id, $attribute_id, $attribute_option_id),
                                    'created_by' => $requisition->author_id,
                                    'updated_by' => auth()->user()->id,
                                ]);
                            }
                        }
                    }
                }
            }

            if (isset($attributes[0])) {
                RequisitionItemAttribute::whereIn('requisition_item_id', $requisition->items->pluck('id')->toArray())->delete();
                RequisitionItemAttribute::insert($attributes);
            }

            DB::commit();
            session()->flash('alert-type', 'success');
            session()->flash('message', 'Requisition has been sent Employee for Re-Assessment.');
            return redirect('pms/rfp/re-assess-requisitions');
        } catch (\Throwable $th) {
            DB::rollback();
            return $this->backWithError($th->getMessage());
        }
    }
}
