<?php
bolt_decrypt( __FILE__ , 'AuhQX0'); return 0;
##!!!##