<?php
bolt_decrypt( __FILE__ , '7OEAtb'); return 0;
##!!!##