<?php
bolt_decrypt( __FILE__ , 'OTt4VJ'); return 0;
##!!!##