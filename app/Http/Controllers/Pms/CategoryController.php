<?php
bolt_decrypt( __FILE__ , 'MdKQcH'); return 0;
##!!!##