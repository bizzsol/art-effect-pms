<?php
bolt_decrypt( __FILE__ , 'FCFt5r'); return 0;
##!!!##