<?php
bolt_decrypt( __FILE__ , 'w69LnB'); return 0;
##!!!##