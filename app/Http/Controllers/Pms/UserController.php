<?php
bolt_decrypt( __FILE__ , 'gBXOYB'); return 0;
##!!!##