<?php
bolt_decrypt( __FILE__ , '1RsUNR'); return 0;
##!!!##