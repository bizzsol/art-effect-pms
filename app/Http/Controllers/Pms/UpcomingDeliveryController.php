<?php
bolt_decrypt( __FILE__ , 'cHuHLD'); return 0;
##!!!##