<?php
bolt_decrypt( __FILE__ , 'P1xe3Z'); return 0;
##!!!##