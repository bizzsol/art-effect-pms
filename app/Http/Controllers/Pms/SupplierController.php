<?php
bolt_decrypt( __FILE__ , 'bg3JGU'); return 0;
##!!!##