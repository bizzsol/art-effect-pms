<?php
bolt_decrypt( __FILE__ , 'cRBeJE'); return 0;
##!!!##