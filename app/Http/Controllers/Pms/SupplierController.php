<?php
bolt_decrypt( __FILE__ , 'nNDMyB'); return 0;
##!!!##