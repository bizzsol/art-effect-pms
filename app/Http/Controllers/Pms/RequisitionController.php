<?php
bolt_decrypt( __FILE__ , 'TBOSRm'); return 0;
##!!!##