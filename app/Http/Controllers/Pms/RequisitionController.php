<?php
bolt_decrypt( __FILE__ , 'CoxKB4'); return 0;
##!!!##