<?php
bolt_decrypt( __FILE__ , 'uTqM40'); return 0;
##!!!##