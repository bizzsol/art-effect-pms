<?php
bolt_decrypt( __FILE__ , 'VCnWVL'); return 0;
##!!!##

namespace App\Http\Controllers\Pms;

use App\Http\Controllers\Controller;

use App\Models\MyProject\Deliverables;
use App\Models\PmsModels\Menu\Menu;
use App\Models\PmsModels\Product;
use App\Models\PmsModels\RequisitionExplanation;
use App\Models\PmsModels\Requisition;
use App\Models\PmsModels\RequestProposalRequisitions;
use App\Models\PmsModels\RequisitionItemLog;
use App\Models\PmsModels\RequisitionLog;
use App\Models\PmsModels\RequisitionTracking;
use App\Models\PmsModels\RequisitionItem;
use App\Models\PmsModels\RequisitionItemAttribute;
use App\Models\PmsModels\RequisitionType;
use App\Models\PmsModels\Category;
use App\Models\PmsModels\CategoryDepartment;
use App\Models\PmsModels\Notification;
use App\Models\PmsModels\RequisitionDelivery;
use App\Models\PmsModels\RequisitionDeliveryItem;
use App\Models\PmsModels\Attribute;
use App\Models\PmsModels\AttributeOption;
use App\Models\PmsModels\CategoryAttribute;
use App\Models\PmsModels\RequisitionNoteLogs;
use App\Models\PmsModels\Purchase\PurchaseOrder;
use App\Models\MyProject\Project;
use App\Models\MyProject\ProjectTask;
use Illuminate\Http\Request;
use Maatwebsite\Excel\Facades\Excel;
use View;
use App\Http\Requests;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB, Validator, Str, Yajra\DataTables\Facades\DataTables;
use Carbon\Carbon;
use \App\Imports\RequisitionImport;

class RequisitionController extends Controller
{

    public function headerColumns($value = '')
    {
        $row = array(
            ['SL', 'SL'],
            ['reference_no', 'reference_no', 'text-center'],
            ['requisition_date', 'requisition_date', 'text-center'],
            ['product_category', 'product_category', 'text-center'],
            ['status', 'status', 'text-center'],
            ['attachment', 'attachment', 'text-center'],
            ['actions', 'actions', 'text-center', 'width:15%']
        );

        if (auth()->user()->hasRole('Employee') || auth()->user()->hasRole('Department-Head') || auth()->user()->hasRole('Purchase-Department')) {

        } else {
            unset($row[5]);
        }

        return $row;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        try {

            $status = request()->has('status') ? request()->get('status') : -1;
            $from = request()->has('from') ? request()->get('from') : date('Y-m-01');
            $to = request()->has('to') ? request()->get('to') : date('Y-m-t');
            $category_id = request()->has('category_id') ? request()->get('category_id') : 0;
            $categoryIds = CategoryDepartment::when(isset(auth()->user()->employee->as_department_id), function ($query) {
                return $query->where('hr_department_id', auth()->user()->employee->as_department_id);
            })->pluck('category_id')->toArray();

            $categories = Category::doesntHave('category')
                ->whereIn('id', $categoryIds)
                ->get();

            $requisitions = Requisition::with(['items', 'items.product.category.category', 'requisitionLogs'])
                ->where('author_id', auth()->user()->id)
                ->when(strtotime($from) > 0, function ($query) use ($from) {
                    return $query->whereDate('requisition_date', '>=', $from);
                })
                ->when(strtotime($to) > 0, function ($query) use ($to) {
                    return $query->whereDate('requisition_date', '<=', $to);
                })
                ->when($status >= 0, function ($query) use ($status) {
                    return $query->where('status', $status);
                })
                ->when($category_id > 0, function ($query) use ($category_id) {
                    return $query->whereHas('items.product.category.category', function ($query) use ($category_id) {
                        return $query->where('id', $category_id);
                    });
                })
                ->when(!empty(request()->get('search_text')), function ($query) {
                    return $query->where(function ($query) {
                        return $query->where('reference_no', 'LIKE', '%' . request()->get('search_text') . '%')
                            ->orWhere('remarks', 'LIKE', '%' . request()->get('search_text') . '%');
                    });
                })
                ->when(!datatableOrdering(), function ($query) {
                    return $query->orderby('id', 'desc');
                })
                ->where('assessment', 'no')
                ->whereNotIn('status', [2]);

            if (request()->ajax()) {
                return Datatables::of($requisitions)
                    ->addIndexColumn()
                    ->editColumn('reference_no', function ($requisition) {
                        return '<a href="javascript:void(0)" data-src="' . route('pms.requisition.list.view.show', $requisition->id) . '" class="btn btn-link requisition m-1 rounded showRequistionDetails" onclick="requistionDetails($(this))">' . $requisition->reference_no . '</a>';
                    })
                    ->addColumn('requisition_date', function ($requisition) {
                        return date('Y-m-d', strtotime($requisition->requisition_date));
                    })
                    ->filterColumn('requisition_date', function ($query, $keyword) {
                        $query->where('requisition_date', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('requisition_date', function ($query, $order) {
                        return $query->orderBy('requisition_date', $order);
                    })
                    ->addColumn('product_category', function ($requisition) {
                        return isset($requisition->items[0]->product->category->category->name) ? $requisition->items[0]->product->category->category->name : '';
                    })
                    ->filterColumn('product_category', function ($query, $keyword) {
                        return $query->whereHas('items.product.category.category', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('product_category', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequisitionItem::select('main_category.name')
                            ->join('products', 'products.id', '=', 'requisition_items.product_id')
                            ->join('categories as sub_category', 'sub_category.id', '=', 'products.category_id')
                            ->join('categories as main_category', 'main_category.id', '=', 'sub_category.parent_id')
                            ->whereColumn('requisition_items.requisition_id', 'requisitions.id')
                            ->take(1)
                        );
                    })
                    ->editColumn('status', function ($requisition) {
                        $status = '';
                        $status .= '<p id="status' . $requisition->id . '">';
                        if ($requisition->status == 0) {
                            $status .= '<span class="btn btn-xs btn-warning">Pending</span>';
                        } elseif ($requisition->status == 1) {

                            $status .= '<span class="btn btn-xs btn-success">Approved</span>';
                        } elseif ($requisition->status == 2) {
                            $status .= '<span class="btn btn-xs btn-danger">Halt</span>';
                        } elseif ($requisition->status == 3) {
                            $status .= '<span class="btn btn-xs btn-warning">Draft</span>';
                        }
                        $status .= '</p>';
                        return $status;
                    })
                    ->addColumn('attachment', function ($requisition) {
                        $attachment = '';
                        if (auth()->user()->hasRole('Employee') || auth()->user()->hasRole('Department-Head') || auth()->user()->hasRole('Purchase-Department')) {
                            if (!empty($requisition->attachment) && file_exists(public_path($requisition->attachment))) {
                                $attachment .= '<a href="' . url($requisition->attachment) . '" target="_blank" class="btn btn-xs btn-primary"><i class="las la-paperclip"></i>Attachment</a>';
                            }
                        }

                        return $attachment;
                    })
                    ->addColumn('actions', function ($requisition) {
                        $actions = '';

                        $actions .= '<div class="btn-group"><button class="btn dropdown-toggle" data-toggle="dropdown"><span id="statusName' . $requisition->id . '"><i class="la la-ellipsis-v"></i></span></button><ul class="dropdown-menu"><li><a href="javascript:void(0)" title="Tracking Requisition" data-src="' . route('pms.requisition.list.view.show', $requisition->id) . '" class="showRequistionDetails"  onclick="requistionDetails($(this))"><i class="la la-eye"></i>&nbsp;View</a></li>';

                        $actions .= '<li><a href="' . route('pms.requisition.requisition.edit', $requisition->id) . '?redirect=requisition&editor=author" title="Click Here To Edit" class="requisition-edit"><i class="la la-edit"></i>&nbsp;Edit</a></li>';

                        $actions .= '<li><a href="javascript:void(0)" data-role="duplicate" data-src="' . route('pms.requisition.duplicate', $requisition->id) . '" class="text-danger deleteBtn requisition-duplicate" onclick="duplicateRequisition($(this))"><i class="las la-copy"></i>&nbsp;Duplicate</a></li>';

                        if ($requisition->status == 3) {

                            $actions .= '<li><a href="javascript:void(0)"  onclick="sendRequisition($(this))" class="sendRequisition" data-id="' . $requisition->id . '" data-status="0" title="Click Here To Send"><i class="la la-paper-plane"></i>&nbsp;Send</a></li>';
                            $actions .= '<li><a href="javascript:void(0)" data-role="delete" data-src="' . route('pms.requisition.requisition.destroy', $requisition->id) . '" class="text-danger deleteBtn requisition-delete" onclick="deleteBtn($(this))"><i class="las la-trash"></i>&nbsp;Delete</a></li>';
                        }

                        if ($requisition->requisitionLogs->count() > 0) {
                            $actions .= '<li><a target="__blank" href="' . route('pms.requisition.log.history',
                                    $requisition->id) . '"><i class="la la-history" title="Requisition Log History"></i>&nbsp;Requisition Logs</a></li</a></li>';
                        }

                        $actions .= '<li><a target="__blank" href="' . route('pms.requisition.history', $requisition->id) . '"><i class="la la-history" title="Requisition History"></i>&nbsp;Requisition History</a></li</a></li>';

                        $actions .= '<li><a href="javascript:void(0)" title="Tracking Requisition" class="trackingRequistionStatus" onclick="trackingRequisitionStatus($(this))" data-id="' . $requisition->id . '"><i class="la la-map"></i>&nbsp;Track Progress</a></li></ul></div>';
                        return $actions;
                    })
                    ->rawColumns(['reference_no', 'status', 'attachment', 'actions'])
                    ->make(true);
            }

            return view('pms.backend.pages.requisitions.index', ['title' => 'Requisition',
                'from' => $from, 'to' => $to, 'category_id' => $category_id, 'categories' => $categories, 'headerColumns' => $this->headerColumns()]);

        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    public function halt()
    {
        try {

            $title = 'Halt Requisitions';

            $from = request()->has('from') ? request()->get('from') : date('Y-m-01');
            $to = request()->has('to') ? request()->get('to') : date('Y-m-t');
            $category_id = request()->has('category_id') ? request()->get('category_id') : 0;
            $categoryIds = CategoryDepartment::when(isset(auth()->user()->employee->as_department_id), function ($query) {
                return $query->where('hr_department_id', auth()->user()->employee->as_department_id);
            })->pluck('category_id')->toArray();

            $categories = Category::doesntHave('category')
                ->whereIn('id', $categoryIds)
                ->get();

            $requisitions = Requisition::with(['items', 'items.product.category.category'])
                ->when(isset(auth()->user()->employee->as_department_id), function ($query) {
                    return $query->where('author_id', auth()->user()->id);
                })
                ->when(strtotime($from) > 0, function ($query) use ($from) {
                    return $query->whereDate('requisition_date', '>=', $from);
                })
                ->when(strtotime($to) > 0, function ($query) use ($to) {
                    return $query->whereDate('requisition_date', '<=', $to);
                })
                ->when($category_id > 0, function ($query) use ($category_id) {
                    return $query->whereHas('items.product.category.category', function ($query) use ($category_id) {
                        return $query->where('id', $category_id);
                    });
                })
                ->when(!empty(request()->get('search_text')), function ($query) {
                    return $query->where(function ($query) {
                        return $query->where('reference_no', 'LIKE', '%' . request()->get('search_text') . '%')
                            ->orWhere('remarks', 'LIKE', '%' . request()->get('search_text') . '%');
                    });
                })
                ->when(!datatableOrdering(), function ($query) {
                    return $query->orderby('id', 'desc');
                })
                ->whereIn('status', [2]);

            if (request()->ajax()) {
                return Datatables::of($requisitions)
                    ->addIndexColumn()
                    ->editColumn('reference_no', function ($requisition) {
                        return '<a href="javascript:void(0)" data-src="' . route('pms.requisition.list.view.show', $requisition->id) . '" class="btn btn-link requisition m-1 rounded showRequistionDetails" onclick="requistionDetails($(this))">' . $requisition->reference_no . '</a>';
                    })
                    ->addColumn('requisition_date', function ($requisition) {
                        return date('Y-m-d', strtotime($requisition->requisition_date));
                    })
                    ->filterColumn('requisition_date', function ($query, $keyword) {
                        $query->where('requisition_date', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('requisition_date', function ($query, $order) {
                        return $query->orderBy('requisition_date', $order);
                    })
                    ->addColumn('product_category', function ($requisition) {
                        return isset($requisition->items[0]->product->category->category->name) ? $requisition->items[0]->product->category->category->name : '';
                    })
                    ->filterColumn('product_category', function ($query, $keyword) {
                        return $query->whereHas('items.product.category.category', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('product_category', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequisitionItem::select('main_category.name')
                            ->join('products', 'products.id', '=', 'requisition_items.product_id')
                            ->join('categories as sub_category', 'sub_category.id', '=', 'products.category_id')
                            ->join('categories as main_category', 'main_category.id', '=', 'sub_category.parent_id')
                            ->whereColumn('requisition_items.requisition_id', 'requisitions.id')
                            ->take(1)
                        );
                    })
                    ->editColumn('status', function ($requisition) {
                        $status = '';
                        $status .= '<p id="status' . $requisition->id . '">';
                        if ($requisition->status == 0) {
                            $status .= '<span class="btn btn-xs btn-warning">Pending</span>';
                        } elseif ($requisition->status == 1) {

                            $status .= '<span class="btn btn-xs btn-success">Approved</span>';
                        } elseif ($requisition->status == 2) {
                            $status .= '<span class="btn btn-xs btn-danger">Halt</span>';
                        } elseif ($requisition->status == 3) {
                            $status .= '<span class="btn btn-xs btn-warning">Draft</span>';
                        }
                        $status .= '</p>';
                        return $status;
                    })
                    ->addColumn('attachment', function ($requisition) {
                        $attachment = '';
                        if (auth()->user()->hasRole('Employee') || auth()->user()->hasRole('Department-Head') || auth()->user()->hasRole('Purchase-Department')) {
                            if (!empty($requisition->attachment) && file_exists(public_path($requisition->attachment))) {
                                $attachment .= '<a href="' . url($requisition->attachment) . '" target="_blank" class="btn btn-xs btn-primary"><i class="las la-paperclip"></i>Attachment</a>';
                            }
                        }

                        return $attachment;
                    })
                    ->addColumn('actions', function ($requisition) {
                        $actions = '';

                        $actions .= '<div class="btn-group">
                    <button class="btn dropdown-toggle" data-toggle="dropdown">
                    <span id="statusName' . $requisition->id . '">
                    <i class="la la-ellipsis-v"></i></span></button>
                    <ul class="dropdown-menu">
                    <li><a href="javascript:void(0)" title="Tracking Requisition" data-src="' . route('pms.requisition.list.view.show', $requisition->id) . '" class="showRequistionDetails"  onclick="requistionDetails($(this))"><i class="la la-eye"></i> View</a></li>';
                        $actions .= '<li><a href="' . route('pms.requisition.requisition.edit', $requisition->id) . '?redirect=halt-requisition&editor=author" title="Click Here To Edit" class="requisition-edit"><i class="la la-edit"></i>&nbsp;Edit</a>
                    </li>';
                        $actions .= '<li><a href="javascript:void(0)"  onclick="sendRequisition($(this))" class="sendRequisition" data-id="' . $requisition->id . '" data-status="0" title="Click Here To Send"><i class="la la-paper-plane"></i> ReSend</a>
                        </li>';

                        if ($requisition->requisitionLogs->count() > 0) {
                            $actions .= '<li><a target="__blank" href="' . route('pms.requisition.log.history',
                                    $requisition->id) . '"><i class="la la-history" title="Requisition Log History"></i>&nbsp;Requisition Logs</a></li</a></li>';
                        }

                        $actions .= '<li>
                    <a href="javascript:void(0)" data-role="delete" data-src="' . route('pms.requisition.requisition.destroy', $requisition->id) . '" class="text-danger deleteBtn requisition-delete" onclick="deleteBtn($(this))"><i class="las la-trash"></i>&nbsp;Delete</a>
                    </li>';
                        $actions .= '<li><a href="javascript:void(0)" title="Tracking Requisition" class="trackingRequistionStatus" onclick="trackingRequistionStatus($(this))" data-id="' . $requisition->id . '"><i class="la la-map"></i>Track Progress</a></li></ul></div>';
                        return $actions;

                    })
                    ->rawColumns(['reference_no', 'status', 'attachment', 'actions'])
                    ->make(true);
            }

            return view('pms.backend.pages.requisitions.halt-index', ['title' => 'Requisition',
                'from' => $from, 'to' => $to, 'category_id' => $category_id, 'categories' => $categories, 'headerColumns' => $this->headerColumns()]);

        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        if (request()->has('get-attributes')) {
            $product = Product::findOrFail(request()->get('product_id'));
            $item = RequisitionItem::with([
                'attributes.attributeOption'
            ])->find(request()->get('item_id'));
            $selectedAttributes = [];
            if (isset($item->attributes[0])) {
                foreach ($item->attributes as $attribute) {
                    array_push($selectedAttributes, $attribute->attributeOption->attribute_id);
                }
            }

            return view('pms.backend.pages.requisitions.attributes', [
                'product' => $product,
                'item' => $item,
                'selectedAttributes' => $selectedAttributes,
                'attributes' => Attribute::with([
                    'options',
                    'categories'
                ])
                ->whereHas('categories.category.products', function ($query) {
                    return $query->where('id', request()->get('product_id'));
                })
                ->get(),
            ]);
        }

        if (!auth()->user()->employee) {
            return redirect()->back();
        }

        try {
            $task = null;
            if (request()->has('task-id')) {
                $task = ProjectTask::with([
                    'subDeliverable.deliverable.project'
                ])->findOrFail(request()->get('task-id'));
            }

            $categoryId = CategoryDepartment::when(isset(auth()->user()->employee->as_department_id), function ($query) {
                return $query->where('hr_department_id', auth()->user()->employee->as_department_id);
            })->pluck('category_id')->toArray();

            $categories = Category::doesntHave('category')
                ->with(['subCategory'])
                ->whereIn('id', $categoryId)
                ->where([
                    'is_fixed_asset' => 0,
                    'is_cwip' => 0,
                ])
                ->get();
            $fixedAssetCategories = Category::doesntHave('category')
                ->with(['subCategory'])
                ->whereIn('id', $categoryId)
                ->where([
                    'is_fixed_asset' => 1,
                    'is_cwip' => 0,
                ])
                ->get();
            $cwipCategories = Category::doesntHave('category')
                ->with(['subCategory'])
                ->whereIn('id', $categoryId)
                ->where([
                    'is_fixed_asset' => 0,
                    'is_cwip' => 1,
                ])
                ->get();

            $title = 'Create Requisition';
            $requisition = null;

            $prefix = 'RQ-' . date('y', strtotime(date('Y-m-d'))) . '-' . auth()->user()->employee->unit->hr_unit_short_name . '-';
            $refNo = uniqueCode(16, $prefix, 'requisitions', 'id');

            /*
            $projects = [];
            $tasks = ProjectTask::with([
                'subDeliverable.deliverable.project'
            ])
            ->where('user_id', auth()->user()->id)
            ->get();
            if(isset($tasks[0])){
                foreach ($tasks as $task){
                    $projects[] = $task->subDeliverable->deliverable->project;
                }
            }

            $projects = Project::whereIn("id", array_keys(collect($projects)->groupBy('id')->toArray()))->get();
            */

            $unitId = isset(auth()->user()->employee->as_unit_id) ? auth()->user()->employee->as_unit_id : null;

            $explanations = RequisitionExplanation::all();

            return view('pms.backend.pages.requisitions.create', compact('title', 'requisition', 'refNo', 'categories', 'fixedAssetCategories', 'cwipCategories', 'unitId', 'task', 'explanations'));
        } catch (Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    public function loadProjectWiseDeliverables(Project $project = null)
    {
        $deliverables = [];
        foreach (Auth::user()->projectTask as $task) {
            if ($task->subDeliverable->deliverable->project_id == $project->id) {
                $deliverables[] = $task->subDeliverable->deliverable;
            }
        }
        $deliverables = array_keys(collect($deliverables)->groupBy('id')->toArray());
        $deliverables = Deliverables::whereIn("id", $deliverables)->get();

        $output = [];
        $output[] = "<option>Select One</option>";
        foreach ($deliverables as $deliverable) {
            $output[] = '<option value="' . $deliverable->id . '">' . $deliverable->name . '</option>';
        }
        return response()->json(implode(',', $output));
    }

    public function loadCategoryWiseProducts($categoryId, Request $request)
    {
        $response = '';

        $categoryIds = CategoryDepartment::when(isset(auth()->user()->employee->as_department_id), function ($query) {
            return $query->where('hr_department_id', auth()->user()->employee->as_department_id);
        })->pluck('category_id')->toArray();


        $categoryProducts = Product::with([
            'productUnit', 'category.category', 'attributes.attributeOption.attribute'
        ])
            ->where('status', 'approved')
            ->when(!empty($categoryId), function ($query) use ($categoryId) {
                return $query->where(function ($query) use ($categoryId) {
                    return $query->where('category_id', $categoryId);
                });
            })
            ->whereHas('category', function ($query) {
                return $query->where('parent_id', request()->get('parent_id'));
            })
            ->where('is_final_asset', 0)
            ->whereIn('category_id', $categoryIds);

        if (isset($request->products_id)) {
            $existedProducts = explode(',', $request->products_id);
            if (request()->has('selected')) {
                $existedProducts = array_diff($existedProducts, [request()->get('selected')]);
            }

            $categoryProducts = $categoryProducts->whereNotIn('id', $existedProducts);
        }

        $categoryProducts = $categoryProducts->get();

        $response .= '<select name="product_id[]" id="product_1" class="form-control select2 product" required>';
        $response .= '<option value="" data-uom="">Select Product</option>';
        if (!empty($categoryProducts)) {
            foreach ($categoryProducts as $data) {
                $response .= '<option data-uom="' . ($data->productUnit ? $data->productUnit->unit_name : '') . '" value="' . $data->id . '" data-sub-category-id="' . $data->category_id . '" data-category-id="' . $data->category->parent_id . '" ' . (request()->get('selected') == $data->id ? 'selected' : '') . '>' . $data->name . ' ' . getProductAttributesFaster($data) . ' (UOM: ' . ($data->productUnit ? $data->productUnit->unit_name : '') . ')</option>';
            }
        } else {
            $response .= "<option value=''>No Product Found!!</option>";
        }
        $response .= "</select>";

        return $response;
    }

    public function loadCategoryWiseSubcategory($categoryId)
    {
        $response = '';
        $subCategory = Category::when(!empty($categoryId), function ($query) use ($categoryId) {
            return $query->where('parent_id', $categoryId);
        })->get();

        if (isset($subCategory) && count((array)$subCategory) > 0) {
            $response .= '<option value="">--Select Subcategory--</option>';
            foreach ($subCategory as $data) {
                $response .= '<option value="' . $data->id . '">' . $data->name . '(' . $data->code . ')' . '</option>';
            }
        } else {
            $response .= "<option value=''>No Category Found!!</option>";
        }

        return $response;
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */

    public function store(Request $request, $edit = false)
    {
        $request->validate([
            'remarks' => 'required',
            'product_id' => 'required',
            'product_id.*' => 'required',
        ]);

        if ($request->hasFile('file')) {
            $this->validate($request, [
                'file' => ['max:10000'],
            ]);
        }

        DB::beginTransaction();
        try {

            //Task Budget Validation
            $project_task_id = ($request->approval_qty == 'true') ? $request->project_task_id : (isset($request->project_task_id) ? $request->project_task_id : null);
            $projectTask = ProjectTask::find($project_task_id);
            if (isset($projectTask->id)) {
                $consumptions = 0;
                if (isset($projectTask->requisitions[0])) {
                    foreach ($projectTask->requisitions as $key => $this_requisition) {
                        $consumptions += estimatedValue($this_requisition);
                    }
                }

                $requisition_consumption = 0;
                foreach ($request->qty as $key => $qty) {
                    $requisition_consumption += Product::find($request->product_id[$key])->unit_price * $qty;
                }

                $consumptions += $requisition_consumption;

                if ($consumptions > $projectTask->subDeliverable->budget) {
                    return $this->backWithError('Project Budget allocation (' . $projectTask->budget . ' BDT) has been exceeded for this requisition (' . $requisition_consumption . ' BDT). Remaining Budget is (' . ($projectTask->subDeliverable->budget > $consumptions ? $projectTask->subDeliverable->budget - $consumptions : 0) . ' BDT)');
                }
            }
            //Task Budget Validation

            $requisition = Requisition::create([
                'requisition' => uniqueStringGenerator(),
                'reference_no' => $request->reference_no,

                'hr_unit_id' => isset($request->hr_unit_id) ? $request->hr_unit_id : null,

                'requisition_date' => date('Y-m-d h:i', strtotime($request->requisition_date)),
                'author_id' => ($request->approval_qty == 'true') ? $request->author_id : auth()->user()->id,

                'project_id' => ($request->approval_qty == 'true') ? $request->project_id : (isset($request->project_id) ? $request->project_id : null),

                'deliverable_id' => ($request->approval_qty == 'true') ? $request->deliverable_id : (isset($request->deliverable_id) ? $request->deliverable_id : null),

                'project_task_id' => ($request->approval_qty == 'true') ? $request->project_task_id : (isset($request->project_task_id) ? $request->project_task_id : null),
                'status' => ($request->approval_qty == 'true') ? 0 : 3,
                'remarks' => $request->remarks,
                'explanations' => json_encode(isset($request->explanations[0]) ? $request->explanations : []),
            ]);

            if ($request->hasFile('file')) {
                $requisition->attachment = $this->fileUpload($request->file('file'), 'upload/requisition-attachments');
                $requisition->save();
            }

            foreach ($request->qty as $key => $qty) {
                $requisitionItemInput[] = [
                    'requisition_id' => $requisition->id,
                    'product_id' => $request->product_id[$key],
                    'unit_price' => isset($request->old_unit_price[$key]) ? $request->old_unit_price[$key] : (isset($request->unit_price[$key]) ? $request->unit_price[$key] : 0),
                    'qty' => $qty,
                    'requisition_qty' => ($request->approval_qty == 'true') ? (isset($request->old_qty[$key]) ? $request->old_qty[$key] : $qty) : $qty,
                    'created_at' => date('Y-m-d h:i'),
                    'created_by' => ($request->approval_qty == 'true') ? $request->author_id : auth()->user()->id,
                ];
            }

            RequisitionItem::insert($requisitionItemInput);

            RequisitionTracking::storeRequisitionTracking($requisition->id, 'pending');

            //Insert notes logging
            RequisitionNoteLogs::create([
                'requisition_id' => $requisition->id,
                'notes' => $request->remarks,
                'type' => ($request->approval_qty == 'true') ? 'department-head' : 'requisition',
            ]);
            //Tracking

            $items = RequisitionItem::where('requisition_id', $requisition->id)->get();
            $attributes = [];
            if (isset($items[0])) {
                foreach ($items as $item) {
                    if (isset($request->attribute_options[$item->product_id]) && is_array($request->attribute_options[$item->product_id]) && count($request->attribute_options[$item->product_id]) > 0) {
                        foreach ($request->attribute_options[$item->product_id] as $attribute_id => $attribute_option_id) {
                            if (isset($request->product_attributes[$item->product_id]) && in_array($attribute_id, $request->product_attributes[$item->product_id])) {
                                array_push($attributes, [
                                    'requisition_item_id' => $item->id,
                                    'attribute_option_id' => $attribute_option_id,
                                    'created_by' => auth()->user()->id,
                                ]);
                            }
                        }
                    }
                }
            }

            if (isset($attributes[0])) {
                RequisitionItemAttribute::insert($attributes);
            }

            DB::commit();

            session()->forget('requisition-items');

            if ($edit == false) {
                if (isset($request->where_to_go) && $request->where_to_go == 'back') {
                    return $this->backWithSuccess('Requisition has been successfully applied');
                }

                return $this->redirectBackWithSuccess('Requisition has been successfully applied', 'pms.requisition.requisition.index');
            } else {
                return $requisition;
            }
        } catch (\Throwable $th) {
            DB::rollback();
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Duplicate the specified resource.
     *
     * @param \App\Models\PmsModels\Requisition $id
     * @return \Illuminate\Http\JsonResponse
     */

    public function duplicate($id)
    {
        $model = Requisition::with([
            'items.product.category',
            'items.attributes',
            'projectTask'
        ])->findOrFail($id);

        DB::beginTransaction();
        try {

            //Task Budget Validation
            $projectTaskId = isset($model->project_task_id) ? $model->project_task_id : null;
            $projectTask = ProjectTask::find($projectTaskId);
            if (isset($projectTask->id)) {
                $consumptions = 0;
                if (isset($projectTask->requisitions[0])) {
                    foreach ($projectTask->requisitions as $key => $this_requisition) {
                        $consumptions += estimatedValue($this_requisition);
                    }
                }
                $requisitionConsumption = 0;
                foreach ($model->items as $item) {
                    $requisitionConsumption += Product::find($item->product_id)->unit_price * $item->qty;
                }

                $consumptions += $requisitionConsumption;
                if ($consumptions > $projectTask->subDeliverable->budget) {
                    return response()->json([
                        'success' => false,
                        'message' => 'Project Budget allocation (' . $projectTask->budget . ' BDT) has been exceeded for this requisition (' . $requisitionConsumption . ' BDT). Remaining Budget is (' . ($projectTask->subDeliverable->budget > $consumptions ? $projectTask->subDeliverable->budget - $consumptions : 0) . ' BDT)'
                    ]);
                }
            }
            //Task Budget Validation

            $prefix = 'RQ-' . date('y', strtotime(date('Y-m-d'))) . '-' . auth()->user()->employee->unit->hr_unit_short_name . '-';
            $refNo = uniqueCode(16, $prefix, 'requisitions', 'id');

            $requisition = Requisition::create([
                'requisition' => uniqueStringGenerator(),
                'reference_no' => $refNo,
                'hr_unit_id' => isset($model->hr_unit_id) ? $model->hr_unit_id : null,
                'requisition_date' => date('Y-m-d h:i'),
                'author_id' => auth()->user()->id,
                'project_id' => isset($model->project_id) ? $model->project_id : null,
                'deliverable_id' => isset($model->deliverable_id) ? $model->deliverable_id : null,
                'project_task_id' => isset($model->project_task_id) ? $model->project_task_id : null,
                'status' => 3,
                'remarks' => $model->remarks,
                'explanations' => $model->explanations,
                'attachment' => $model->attachment
            ]);

            $attributes = [];
            foreach ($model->items as $item) {
                $requisitionItem = RequisitionItem::create([
                    'requisition_id' => $requisition->id,
                    'product_id' => $item->product_id,
                    'unit_price' => $item->unit_price,
                    'qty' => $item->qty,
                    'requisition_qty' => $item->qty,
                    'created_at' => date('Y-m-d h:i:s'),
                    'created_by' => auth()->user()->id,
                ]);

                if (isset($item->attributes[0])) {
                    foreach ($item->attributes as $attribute) {
                        array_push($attributes, [
                            'requisition_item_id' => $requisitionItem->id,
                            'attribute_option_id' => $attribute->attribute_option_id,
                            'created_by' => auth()->user()->id,
                        ]);
                    }
                }
            }
            if (isset($attributes[0])) {
                RequisitionItemAttribute::insert($attributes);
            }

            RequisitionTracking::storeRequisitionTracking($requisition->id, 'pending');

            //Insert notes logging
            RequisitionNoteLogs::create([
                'requisition_id' => $requisition->id,
                'notes' => $model->remarks,
                'type' => 'requisition',
            ]);

            DB::commit();

            return response()->json([
                'success' => true,
            ]);

        } catch (\Throwable $th) {
            DB::rollback();

            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    /**
     * Display the specified resource.
     *
     * @param \App\Models\PmsModels\Requisition $requisition
     * @return \Illuminate\Http\Response
     */
    public function show(Requisition $requisition)
    {
        try {
            $title = 'Requisition Show';
            $requisition = Requisition::with('items', 'items.product', 'items.product.category', 'projectTask')->findOrFail($requisition->id);

            return view('pms.backend.pages.requisitions.show', compact('title', 'requisition'));
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    public function showRequisition($id)
    {
        try {
            $title = 'Requisition Show';
            $requisition = Requisition::with([
                'projectTask.subDeliverable.deliverable.project',
                'items.product.category.category',
                'items.product.productUnit',
                'items.product.attributes.attributeOption.attribute',
                'items.product.relInventorySummary',
                'relUsersList.employee.location',
                'relUsersList.employee.department',
                'relUsersList.employee.unit',

                'items.attributes.attributeOption.attribute',
            ])->findOrFail($id);

            $body = View::make('pms.backend.pages.requisitions.show',
                ['requisition' => $requisition, 'title' => $title]);
            $contents = $body->render();

            if (request()->has('view')) {
                return $contents;
            }

            return response()->json($contents);
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param \App\Models\Requisition $requisition
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $requisition = Requisition::with([
            'items.product'
        ])
            ->when(isset(Auth::user()->employee->as_department_id) && auth()->user()->hasRole('Employee'), function ($query) {
                return $query->where('author_id', auth()->user()->id);
            })
            ->when(auth()->user()->hasRole('Department-Head'), function ($query) {
                return $query->whereIn('author_id', includeUsers());
            })
            ->when(auth()->user()->hasRole('SBU Head'), function ($query) {
                return $query->whereIn('author_id', includeUsers());
            })
            ->where('id', $id)
            ->first();

        if (!empty($requisition)) {
            try {
                $title = 'Requisition Update';

                $categoryId = CategoryDepartment::when(isset(auth()->user()->employee->as_department_id), function ($query) {
                    return $query->where('hr_department_id', auth()->user()->employee->as_department_id);
                })->pluck('category_id')->toArray();

                $categories = Category::doesntHave('category')
                    ->with(['subCategory'])
                    ->whereIn('id', $categoryId)
                    ->where([
                        'is_fixed_asset' => 0,
                        'is_cwip' => 0,
                    ])
                    ->get();
                $fixedAssetCategories = Category::doesntHave('category')
                    ->with(['subCategory'])
                    ->whereIn('id', $categoryId)
                    ->where([
                        'is_fixed_asset' => 1,
                        'is_cwip' => 0,
                    ])
                    ->get();
                $cwipCategories = Category::doesntHave('category')
                    ->with(['subCategory'])
                    ->whereIn('id', $categoryId)
                    ->where([
                        'is_fixed_asset' => 0,
                        'is_cwip' => 1,
                    ])
                    ->get();

                $category = Category::whereHas('subCategory.products', function ($query) use ($requisition) {
                    return $query->whereIn('id', $requisition->items->pluck('product_id')->toArray());
                })->first();
                $category_id = (isset($category->id) ? $category->id : 0);

                $projects = [];
                $tasks = ProjectTask::with([
                    'subDeliverable.deliverable.project'
                ])
                    ->where('user_id', auth()->user()->id)
                    ->get();
                if (isset($tasks[0])) {
                    foreach ($tasks as $task) {
                        $projects[] = $task->subDeliverable->deliverable->project;
                    }
                }
                $projects = Project::whereIn("id", array_keys(collect($projects)->groupBy('id')->toArray()))->get();

                $deliverables = [];
                if (isset($tasks[0])) {
                    foreach ($tasks as $task) {
                        if ($task->subDeliverable->deliverable->project_id == $requisition->project_id) {
                            $deliverables[] = $task->subDeliverable->deliverable;
                        }
                    }
                }
                $deliverables = Deliverables::whereIn("id", array_keys(collect($deliverables)->groupBy('id')->toArray()))->get();

                $modifiedName = false;
                $task = false;
                if ($requisition->project_task_id) {
                    $task = ProjectTask::findOrFail($requisition->project_task_id);
                }

                $explanations = RequisitionExplanation::all();

                return view('pms.backend.pages.requisitions.edit', compact('title', 'categories', 'fixedAssetCategories', 'cwipCategories', 'requisition', 'projects', 'deliverables', 'category_id', 'modifiedName', 'task', 'explanations'));
            } catch (\Throwable $th) {
                return $this->backWithError($th->getMessage());
            }
        } else {
            if (request()->has('redirect') && request()->get('redirect') == 'list-view') {
                return $this->redirectBackWithError('Requisition not found', 'pms.requisition.list.view.index');
            } else {
                return $this->redirectBackWithError('Requisition not found', 'pms.requisition.requisition.index');
            }
        }
    }

    /**
     * Update the specified resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @param \App\Models\Requisition $requisition
     * @return \Illuminate\Http\RedirectResponse
     */

    public function update(Request $request, Requisition $requisition)
    {
        if ($request->hasFile('edit_file')) {
            $this->validate($request, [
                'edit_file' => ['max:10000'],
            ]);
        }

        //Begin db transaction.
        DB::beginTransaction();
        try {

            if ($requisition->status == 1) {
                $requisition->remarks = $request->remarks;
                if ($request->hasFile('edit_file')) {
                    if (!empty($requisition->attachment) && file_exists(public_path($requisition->attachment))) {
                        unlink(public_path($requisition->attachment));
                    }
                    $requisition->attachment = $this->fileUpload($request->file('edit_file'), 'upload/requisition-attachments');
                }
                $requisition->save();
            } else {
                RequisitionItemAttribute::whereIn('requisition_item_id', $requisition->items->pluck('id')->toArray())->delete();
                RequisitionItem::where('requisition_id', $requisition->id)->delete();

                $requisition->requisition_date = date('Y-m-d h:i:s', strtotime($request->requisition_date));

                $requisition->remarks = $request->remarks;
                if ($request->hasFile('edit_file')) {
                    if (!empty($requisition->attachment) && file_exists(public_path($requisition->attachment))) {
                        unlink(public_path($requisition->attachment));
                    }

                    $requisition->attachment = $this->fileUpload($request->file('edit_file'), 'upload/requisition-attachments');
                }

                $requisition->save();

                foreach ($request->product_id as $key => $product_id) {
                    $requisitionItemInput[] = [
                        'requisition_id' => $requisition->id,
                        'product_id' => $request->product_id[$key],
                        'unit_price' => (request()->has('editor') && request()->get('editor') == "boss" ? $request->old_unit_price[$key] : $request->unit_price[$key]),
                        'qty' => $request->qty[$key],
                        'requisition_qty' => (request()->has('editor') && request()->get('editor') == "boss" ? $request->old_qty[$key] : $request->qty[$key]),
                        'created_at' => date('Y-m-d h:i:s'),
                    ];
                }

                RequisitionItem::insert($requisitionItemInput);
            }

            $requisition->explanations = json_encode(isset($request->explanations[0]) ? $request->explanations : []);
            $requisition->save();


            $items = RequisitionItem::where('requisition_id', $requisition->id)->get();
            $attributes = [];
            if (isset($items[0])) {
                foreach ($items as $item) {
                    if (isset($request->attribute_options[$item->product_id]) && is_array($request->attribute_options[$item->product_id]) && count($request->attribute_options[$item->product_id]) > 0) {
                        foreach ($request->attribute_options[$item->product_id] as $attribute_id => $attribute_option_id) {
                            if (isset($request->product_attributes[$item->product_id]) && in_array($attribute_id, $request->product_attributes[$item->product_id])) {
                                array_push($attributes, [
                                    'requisition_item_id' => $item->id,
                                    'attribute_option_id' => $attribute_option_id,
                                    'created_by' => $requisition->author_id,
                                    'updated_by' => auth()->user()->id,
                                ]);
                            }
                        }
                    }
                }
            }

            if (isset($attributes[0])) {
                RequisitionItemAttribute::insert($attributes);
            }

            DB::commit();

            if (request()->has('redirect') && request()->get('redirect') == 'list-view') {
                return $this->redirectBackWithSuccess('Requisition has been successfully Updated', 'pms.requisition.list.view.index');
            } elseif (request()->has('redirect') && request()->get('redirect') == 'halt-requisition') {
                return $this->redirectBackWithSuccess('Requisition has been successfully Updated', 'pms.requisition.halt.requisition.index');
            } elseif (request()->has('redirect') && request()->get('redirect') == 'passed-requisition-approval') {
                return $this->redirectBackWithSuccess('Requisition has been successfully Updated', 'pms.requisition.passed-requisition-approval');
            } else {
                return $this->redirectBackWithSuccess('Requisition has been successfully Updated', 'pms.requisition.requisition.index');
            }

        } catch (\Throwable $th) {
            DB::rollback();
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param \App\Models\Requisition $requisition
     * @return \Illuminate\Http\JsonResponse
     */
    public function destroy($id)
    {
        $requisition = Requisition::find($id);
        if (!in_array($requisition->status, [0, 2, 3])) {
            return response()->json([
                'success' => false,
                'message' => "Requisition cannot be deleted!"
            ]);
        }

        $requisition = Requisition::find($id);
        $delete = Requisition::find($id)->delete();
        if ($delete) {
            if (!empty($requisition->attachment) && file_exists(public_path($requisition->attachment))) {
                unlink(public_path($requisition->attachment));
            }

            return response()->json([
                'success' => true,
            ]);
        }

        return response()->json([
            'success' => false,
            'message' => "Something went wrong!"
        ]);
    }

    public function destroyItem(RequisitionItem $item)
    {
        try {
            $requisition = $item->requisition;
            $item->delete();
            if ($requisition->items->count() < 1) {
                $requisition->delete();
            }
            return response()->json($requisition->items->count());
        } catch (\Throwable $th) {
            return response()->json($th->getMessage());
        }
    }

    /**
     * Rfp list view.
     */
    public function userHeaderColumns($value = '')
    {
        $row = array(
            ['SL', 'SL'],
            ['reference_no', 'reference_no', 'text-center'],
            ['requisition_date', 'requisition_date', 'text-center'],
            ['product_category', 'product_category', 'text-center'],
            ['requisition_by', 'requisition_by', 'text-center'],
            ['unit', 'unit', 'text-center'],
            ['attachment', 'attachment', 'text-center'],
            ['status', 'status', 'text-center'],
            ['actions', 'actions', 'text-center']
        );
        return $row;
    }

    public function requisitionListView()
    {
        try {

            $title = 'User Requisition List';
            $status = request()->has('status') ? request()->get('status') : -1;
            $from = request()->has('from') ? request()->get('from') : date('Y-m-01');
            $to = request()->has('to') ? request()->get('to') : date('Y-m-t');
            $category_id = request()->has('category_id') ? request()->get('category_id') : 0;
            $author_id = request()->has('author_id') ? request()->get('author_id') : 0;

            $categories = Category::doesntHave('category')
                ->whereHas('departmentsList', function ($query) {
                    return $query->whereIn('hr_department_id', auth()->user()->priorities->pluck('hr_department_id')->toArray());
                })
                ->get();

            $includeUsers = includeUsers();

            $requisitionUserLists = Requisition::whereIn('author_id', $includeUsers)
                ->join('users', 'users.id', '=', 'requisitions.author_id')
                ->groupBy('requisitions.author_id')
                ->get(['users.id', 'users.name']);

            $data = [
                'title' => 'Requisition',
                'requisitionUserLists' => $requisitionUserLists,
                'from' => $from,
                'to' => $to,
                'status' => $status,
                'category_id' => $category_id,
                'author_id' => $author_id,
                'categories' => $categories,
                'headerColumns' => $this->userHeaderColumns()
            ];

            $requisitions = Requisition::with(['items', 'items.product.category.category', 'relUsersList', 'relUsersList.employee.unit'])
                ->whereIn('author_id', $includeUsers)
                ->when(strtotime($from) > 0, function ($query) use ($from) {
                    return $query->whereDate('requisition_date', '>=', $from);
                })
                ->when(strtotime($to) > 0, function ($query) use ($to) {
                    return $query->whereDate('requisition_date', '<=', $to);
                })
                ->when($status >= 0, function ($query) use ($status) {
                    return $query->where('status', $status);
                })
                ->when($author_id > 0, function ($query) use ($author_id) {
                    return $query->where('author_id', $author_id);
                })
                ->when($category_id > 0, function ($query) use ($category_id) {
                    return $query->whereHas('items.product.category.category', function ($query) use ($category_id) {
                        return $query->where('id', $category_id);
                    });
                })
                ->when(!datatableOrdering(), function ($query) {
                    return $query->orderby('id', 'desc');
                })
                ->whereNotIn('status', [3])
                ->where('is_passed', 'no');

            if (request()->ajax()) {
                return Datatables::of($requisitions)
                    ->addIndexColumn()
                    ->editColumn('reference_no', function ($requisition) {
                        return '<a href="javascript:void(0)" data-src="' . route('pms.requisition.list.view.show', $requisition->id) . '" class="btn btn-link requisition m-1 rounded showRequistionDetails" onclick="requistionDetails($(this))">' . $requisition->reference_no . '</a>';
                    })
                    ->editColumn('requisition_date', function ($requisition) {
                        return date('Y-m-d', strtotime($requisition->requisition_date));
                    })
                    ->orderColumn('requisition_date', function ($query, $order) {
                        return $query->orderBy('requisition_date', $order);
                    })
                    ->addColumn('product_category', function ($requisition) {
                        return isset($requisition->items[0]->product->category->category->name) ? $requisition->items[0]->product->category->category->name : '';
                    })
                    ->filterColumn('product_category', function ($query, $keyword) {
                        return $query->whereHas('items.product.category.category', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('product_category', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequisitionItem::select('main_category.name')
                            ->join('products', 'products.id', '=', 'requisition_items.product_id')
                            ->join('categories as sub_category', 'sub_category.id', '=', 'products.category_id')
                            ->join('categories as main_category', 'main_category.id', '=', 'sub_category.parent_id')
                            ->whereColumn('requisition_items.requisition_id', 'requisitions.id')
                            ->take(1)
                        );
                    })
                    ->addColumn('requisition_by', function ($requisition) {
                        return isset($requisition->relUsersList->name) ? $requisition->relUsersList->name : '';
                    })
                    ->filterColumn('requisition_by', function ($query, $keyword) {
                        return $query->whereHas('relUsersList', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('requisition_by', function ($query, $order) {
                        return pleaseSortMe($query, $order, User::select('name')
                            ->whereColumn('users.id', 'requisitions.author_id')
                        );
                    })
                    ->addColumn('unit', function ($requisition) {
                        return isset($requisition->relUsersList->employee->unit->hr_unit_short_name) ? $requisition->relUsersList->employee->unit->hr_unit_short_name : '';
                    })
                    ->filterColumn('unit', function ($query, $keyword) {
                        return $query->whereHas('relUsersList.employee.unit', function ($query) use ($keyword) {
                            $query->where('hr_unit_short_name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('unit', function ($query, $order) {
                        return pleaseSortMe($query, $order, \App\User::select('hr_unit.hr_unit_short_name')
                            ->join('hr_as_basic_info', 'hr_as_basic_info.associate_id', '=', 'users.associate_id')
                            ->join('hr_unit', 'hr_unit.hr_unit_id', '=', 'hr_as_basic_info.as_unit_id')
                            ->whereColumn('users.id', 'requisitions.author_id')
                        );
                    })
                    ->addColumn('attachment', function ($requisition) {
                        $attachment = '';
                        if (auth()->user()->hasRole('Employee') || auth()->user()->hasRole('Department-Head') || auth()->user()->hasRole('Purchase-Department')) {
                            if (!empty($requisition->attachment) && file_exists(public_path($requisition->attachment))) {
                                $attachment .= '<a href="' . url($requisition->attachment) . '" target="_blank" class="btn btn-xs btn-primary"><i class="las la-paperclip"></i>Attachment</a>';
                            }
                        }
                        return $attachment;
                    })
                    ->editColumn('status', function ($requisition) {
                        $status = '';

                        if ($requisition->status == 0) {
                            $status .= '<span class="btn btn-xs btn-warning">Pending</span>';
                        } elseif ($requisition->status == 1) {

                            $status .= '<span class="btn btn-xs btn-success">Acknowledge</span>';
                        } elseif ($requisition->status == 2) {
                            $status .= '<span class="btn btn-xs btn-danger">Halt</span>';
                        }
                        $status .= '</p>';
                        return $status;
                    })
                    ->addColumn('actions', function ($values) {
                        $actions = '';

                        $actions .= '<div class="btn-group"><button class="btn dropdown-toggle" data-toggle="dropdown"><span id="statusName' . $values->id . '"><i class="la la-ellipsis-v"></i></span></button><ul class="dropdown-menu">';

                        if ($values->is_send_to_rfp == 'no') {
                            if ($values->status != 0 && auth()->user()->hasPermissionTo('pending')) {
                                $actions .= '<li><a href="javascript:void(0)" title="Click Here To Pending" class="requisitionApprovedBtn" data-id="' . $values->id . '" onclick="requisitionApprovedBtn($(this))"  data-data="pending" data-status="0"><i class="la la-pause"></i>&nbsp;Pending</a></li>';
                            }
                            $actions .= '<li><a href="' . route('pms.requisition.requisition.edit', $values->id) . '?redirect=list-view&editor=boss" title="Click Here To Edit"><i class="la la-edit"></i>&nbsp;Edit</a></li>';

                            if ($values->status != 1) {
                                if (auth()->user()->hasPermissionTo('requisition-acknowledge')) {
                                    $actions .= '<li><a href="javascript:void(0)" title="Click Here To Acknowledge" class="requisitionApprovedBtn" onclick="requisitionApprovedBtn($(this))" data-id="' . $values->id . '" data-data="acknowledged" data-status="1"><i class="la la-check"></i>&nbsp;Acknowledge</a></li>';

                                    if (auth()->user()->hasRole('Department-Head') && $values->is_passed == 'no') {
                                        $actions .= '<li><a href="javascript:void(0)" title="Send to Management" class="requisitionApprovedBtn" onclick="sendToManagement($(this))" data-src="' . route('pms.requisition.requisitions.sendToManagement') . '" data-id="' . $values->id . '"><i class="la la-paper-plane"></i>&nbsp;Send to Management</a></li>';
                                    }
                                }
                            }

                            if (auth()->user()->hasPermissionTo('halt')) {
                                if ($values->status != 2) {
                                    $actions .= '<li><a href="javascript:void(0)" title="Click Here To Halt" class="requisitionApprovedBtn" onclick="requisitionApprovedBtn($(this))" data-data="halt" data-id="' . $values->id . '" data-status="2"><i class="la la-ban"></i>&nbsp;Halt</a></li>';
                                }
                            }
                        }
                        if (auth()->user()->hasPermissionTo('send-to-rfp')) {
                            $actions .= '<li><a class="sendToPurchaseDepartment" data-src="' . route('pms.store-manage.send.to.purchase.department') . '" onclick="sendToPurchaseDepartment($(this))"  data-id="' . $values->id . '"  title="Send To procurement">&nbsp;Send To Procurement</a></li>';
                        }

                        $actions .= '<li><a href="javascript:void(0)" title="Tracking Requisition" class="trackingRequistionStatus" onclick="trackingRequistionStatus(' . $values->id . ')" ><i class="la la-map"></i>&nbsp;Track Progress</a></li>';

                        $actions .= '<li><a target="__blank" href="' . route('pms.requisition.history', $values->id) . '"><i class="la la-history" title="Requisition History"></i>&nbsp;Requisition History</a></li</a></li>';


                        $actions .= '</ul></div>';
                        return $actions;

                    })
                    ->rawColumns(['reference_no', 'status', 'attachment', 'actions'])
                    ->make(true);
            }

            return view('pms.backend.pages.requisitions.requisition-list-index', $data);
        } catch (Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Rfp list view search.
     * Search between from and to date and also user can search by employee
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */

    function needtokeep()
    {
        $requistions = Requisition::when(isset(Auth::user()->employee->as_department_id), function ($query) {
            return $query->whereHas('relUsersList.employee', function ($query) {
                return $query->where('as_department_id', Auth::user()->employee->as_department_id);
            });
        })
            ->where('status', 0)
            ->get();

        $requistion_data = [];
        foreach ($requistions as $requistion) {
            $tp = 0;
            foreach ($requistion->items as $item) {
                $tp += ($item->product->unit_price * $item->qty);
            };
            $requistion->total_price = $tp;
            foreach (Auth::user()->relApprovalRange as $range) {
                if ($range->min_amount <= $requistion->total_price && $range->max_amount >= $requistion->total_price) {
                    $requistion_data[] = $requistion;
                }
            }
        }
        return $this->paginate($requistion_data, 30);
    }

    /**
     * Rfp list view.
     * Change requisition status (Approve and rejected)
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\JsonResponse
     */

    public function toggleRequisitionStatus(Request $request)
    {
        $requisition = Requisition::where('id', $request->id)->first();
        if (isset($requisition->id)) {
            $newStatus = $request->status;
            $newText = $newStatus == 1 ? 'Acknowledge' : (($newStatus == 2) ? 'Halt' : 'Pending');
            $newApproved = $newStatus == 1 ? 1 : (($newStatus == 2) ? 1 : Null);
            $newMessage = $newStatus == 1 ? 'Successfully Updated To Acknowledgement' : (($newStatus == 2) ? 'Successfully Updated To Halt' : (($newStatus == 0) ? 'Successfully Send to ' . (auth()->user()->hasRole('Department-Head') ? 'SBU head' : (auth()->user()->hasRole('SBU Head') ? 'Management' : 'Department head')) : 'Successfully Updated To Pending'));

            //When resend requisition
            if ($requisition->status == 2) {
                //count check
                if (session()->get('system-information')['resend_limit'] > $requisition->resend_count) {
                    //update resend count
                    $requisition->resend_count = $requisition->resend_count + 1;
                    $requisition->save();
                    //store the existing data to log
                    $this->resendRequisitionLogStore($requisition);
                } else {
                    return response()->json([
                        'success' => false,
                        'message' => 'Sorry!.Your resend limit is over. Please generate a new requisition'
                    ]);
                }
            }

            $update = $requisition->update([
                'status' => $newStatus,
                'is_passed' => 'no',
                'approved_id' => $newApproved,
                'admin_remark' => $request->admin_remark,
                'updated_at' => date('Y-m-d H:i:s'),
                'updated_by' => auth()->user()->id,
                'approved_by' => auth()->user()->id
            ]);
            if ($newStatus == 1) {

                //If approved then send to finance for approval.

                RequisitionTracking::storeRequisitionTracking($requisition->id, 'approved');

                $message = '<span class="notification-links" data-src="' . getModules()['finance']->url . '/pms/store-manage/store-inventory-compare/' . $requisition->id . '" data-title="Requisition Details">Reference No:' . $requisition->reference_no . '.Watting for Finanace Approval.</span>';

                $managerInfos = getBulkManagerInfo('Accounts', $requisition->hr_unit_id);

                if (isset($managerInfos[0])) {
                    foreach ($managerInfos as $manager) {
                        CreateOrUpdateNotification($message, 'unread', '', $manager->id, 'send-to-accounts', '');
                    }
                }

                // $message = '<span class="notification-links" data-src="' . route('pms
                //.store-manage.store.inventory.compare', $requisition->id) . '" data-title="Requisition Details">Reference No:' . $requisition->reference_no . '.Waiting for Procurement/Delivery.</span>';
                //
                //CreateOrUpdateNotification($message, 'unread', '', getManagerInfo('Store-Manager', $requisition->hr_unit_id), 'send-to-store', '');


                return response()->json([
                    'success' => true,
                    'message' => 'Successfully Updated To Acknowledgement',
                    'new_text' => $newText
                ]);
            }

            if ($newStatus == 0) {
                RequisitionTracking::storeRequisitionTracking($requisition->id, 'pending');
                $message = '<span class="notification-links" data-src="' . route('pms.requisition.list.view.show', $requisition->id) . '" data-title="Requisition Details">Reference No:' . $requisition->reference_no . '. Watting for approval.</span>';

                $receiver = getDepartmentHead($requisition->author_id);
                $receiver_slug = 'send-to-department-head';

                if (auth()->user()->hasRole('Department-Head')) {
                    $receiver = getManagerInfo('SBU Head', auth()->user()->employee->as_unit_id);
                    $receiver_slug = 'send-to-sbu-head';
                }

                if (auth()->user()->hasRole('SBU Head')) {
                    $receiver = getManagerInfo('Management');
                    $receiver_slug = 'send-to-managment';
                }

                CreateOrUpdateNotification($message, 'unread', '', $receiver, $receiver_slug, '');
            }

            if ($update) {
                return response()->json([
                    'success' => true,
                    'message' => $newMessage,
                    'new_text' => $newText
                ]);
            }

            return response()->json([
                'success' => false,
                'message' => 'Something Went Wrong!'
            ]);
        }

        return response()->json([
            'success' => false,
            'message' => 'Data not found!'
        ]);
    }

    public function haltRequisitionStatus(Requests\Pms\RequisitionRequest $request)
    {

        //Find requisition
        $requisition = Requisition::findOrFail($request->id);
        try {
            //If you find, then update
            $requisition->update([
                'admin_remark' => $request->admin_remark,
                'status' => 2,
                'is_passed' => 'no',
                'updated_at' => date('Y-m-d H:i:s'),
                'updated_by' => auth()->user()->id
            ]);

            $message = '<span class="notification-links" data-src="' . route('pms.requisition.list.view.show', $requisition->id) . '" data-title="Requisition Details">Reference No:' . $requisition->reference_no . '. Department Head Halt This Requisition..</span>';
            CreateOrUpdateNotification($message, 'unread', '', $requisition->author_id, 'requisition', '');

            //Requisition tracking function call
            RequisitionTracking::storeRequisitionTracking($requisition->id, 'halt', $request->admin_remark);
            //Notification
            //If success then return with success message
            return $this->backWithSuccess('Requisition Successfully Halt');

        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    public function showTracking(Request $request)
    {
        try {
            $response = [];
            $requisition = Requisition::with([
                'requisitionTracking'
            ])
                ->findOrFail($request->id);
            $response = [
                'result' => 'success',
                'body' => View::make('pms.backend.pages.requisitions.tracking', [
                    'requisition' => $requisition
                ])->render()
            ];
        } catch (\Throwable $th) {
            $response = [
                'result' => 'error',
                'message' => $th->getMessage()
            ];
        }

        return $response;
    }

    public function notificationHeaderColumns($value = '')
    {
        $row = array(
            ['SL', 'SL'],
            ['date', 'created_at', 'text-center', 'width:15%'],
            ['messages', 'messages', 'text-left'],
            ['status', 'type', 'text-center'],
            ['actions', 'actions', 'text-center action', 'width:15%']
        );
        return $row;
    }

    public function notificationAll()
    {
        try {

            $title = "Notification";
            $notification = Notification::where('user_id', \auth()->user()->id)
                ->when(!datatableOrdering(), function ($query) {
                    return $query->orderby('id', 'desc');
                });

            $unreadNotification = Notification::where('user_id', auth()->user()->id)->where('type', 'unread')->count();

            if (request()->ajax()) {
                return Datatables::of($notification)
                    ->addIndexColumn()
                    ->editColumn('date', function ($values) {
                        return date('Y-m-d', strtotime($values->created_at));
                    })
                    ->orderColumn('date', function ($query, $order) {
                        return $query->orderBy('created_at', $order);
                    })
                    ->editColumn('status', function ($values) {
                        $status = '';
                        $status .= '<p id="type' . $values->id . '" class="type">';

                        if ($values->type == 'read') {

                            $status .= '<span class="btn btn-sm btn-success"><i class="las la-check-circle"></i></span>';
                        } else {
                            $status .= '<span class="btn btn-sm btn-warning"><i class="las la-inbox"></i></span>';

                        }

                        $status .= '</p>';
                        return $status;
                    })
                    ->addColumn('actions', function ($values) {
                        $actions = '';
                        $actions = '<p id="action' . $values->id . '" class="action">';
                        if ($values->type == 'unread') {
                            $actions .= '<div class="btn-group">
                    <button class="btn dropdown-toggle" data-toggle="dropdown">
                    <span id="statusName' . $values->id . '">
                    <i class="la la-ellipsis-v"></i></span></button><ul class="dropdown-menu">';

                            $actions .= '<li><a href="javascript:void(0)" class="markAsRead" data-id="' . $values->id . '" onclick="markAsRead($(this))" title="Mark As Read"><i class="la la-check"></i> Mark As Read</a></li></ul></div>';
                        } else {
                            $actions .= 'Already Read';
                        }
                        $actions .= '</p>';
                        return $actions;
                    })
                    ->escapeColumns([])
                    ->rawColumns(['messages', 'status', 'actions'])
                    ->make(true);
            }

            return view('pms.backend.pages.requisitions.notification-list', ['title' => $title,
                'unreadNotification' => $unreadNotification, 'headerColumns' => $this->notificationHeaderColumns()]);
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    public function markAsRead(Request $request)
    {
        $response = [];
        //Find notification
        $notification = Notification::where('id', $request->id)->first();

        DB::beginTransaction();
        try {

            if (isset($notification)) {
                $notification->type = 'read';
                $notification->read_at = date('Y-m-d h:i:s');
                $notification->save();

                DB::commit();
                $response['result'] = 'success';
                $response['message'] = 'Successfully Read Notification';
                $response['total_notification'] = Notification::where('type', 'unread')->where('user_id', auth()->user()->id)->when(isset(Auth::user()->employee->as_department_id), function ($query) {
                    return $query->whereHas('relUser.employee', function ($query) {
                        return $query->where('as_department_id', Auth::user()->employee->as_department_id);
                    });
                })->count();

            } else {
                $response['result'] = 'error';
                $response['message'] = 'No Notification Found';
                $response['total_notification'] = Notification::where('type', 'unread')->where('user_id', auth()->user()->id)->when(isset(Auth::user()->employee->as_department_id), function ($query) {
                    return $query->whereHas('relUser.employee', function ($query) {
                        return $query->where('as_department_id', Auth::user()->employee->as_department_id);
                    });
                })->count();
            }

        } catch (\Throwable $th) {
            DB::rollback();
            return $this->backWithError($th->getMessage());
        }

        return $response;
    }

    public function markAsReadAll(Request $request)
    {
        $response = [];

        $notifications = Notification::where('user_id', auth()->user()->id)->where('type', 'unread')->get();

        DB::beginTransaction();
        try {

            if (count($notifications) > 0) {

                foreach ($notifications as $notification) {
                    Notification::where('id', $notification->id)->update(
                        ['type' => 'read', 'read_at' => date('Y-m-d h:i:s')]
                    );
                }
                $response['result'] = 'success';
                $response['message'] = 'Successfully Read Notification';
                $response['total_notification'] = Notification::where('type', 'unread')->where('user_id', auth()->user()->id)->when(isset(Auth::user()->employee->as_department_id), function ($query) {
                    return $query->whereHas('relUser.employee', function ($query) {
                        return $query->where('as_department_id', Auth::user()->employee->as_department_id);
                    });
                })->count();

            } else {
                $response['result'] = 'error';
                $response['message'] = 'No Notification Found';
                $response['total_notification'] = Notification::where('type', 'unread')->where('user_id', auth()->user()->id)->when(isset(Auth::user()->employee->as_department_id), function ($query) {
                    return $query->whereHas('relUser.employee', function ($query) {
                        return $query->where('as_department_id', Auth::user()->employee->as_department_id);
                    });
                })->count();
            }

            DB::commit();

        } catch (\Throwable $th) {
            DB::rollback();

            $response['result'] = 'error';
            $response['message'] = $th->getMessage();
        }

        return $response;
    }

    public function dHeaderColumns($value = '')
    {
        $row = array(
            ['SL', 'SL'],
            ['reference_no', 'reference_no', 'text-center'],
            ['requisition_date', 'requisition_date', 'text-center'],
            ['delivered_ref_no', 'delivered_ref_no', 'text-center'],
            ['delivery_date', 'delivery_date', 'text-center'],
            ['category', 'category', 'text-center'],
            ['sub_category', 'sub_category', 'text-center'],
            ['product', 'product', 'text-center'],
            ['delivery_qty', 'delivery_qty', 'text-left'],
            ['actions', 'actions', 'text-center', 'width:15%']
        );

        return $row;
    }

    public function deliveredRequisitionList()
    {
        try {
            $status = request()->has('status') ? request()->get('status') : '';

            $from = request()->has('from') ? request()->get('from') : date('Y-m-01');
            $to = request()->has('to') ? request()->get('to') : date('Y-m-t');
            $category_id = request()->has('category_id') ? request()->get('category_id') : 0;

            $categoryIds = CategoryDepartment::when(isset(auth()->user()->employee->as_department_id), function ($query) {
                return $query->where('hr_department_id', auth()->user()->employee->as_department_id);
            })->pluck('category_id')->toArray();

            $categories = Category::doesntHave('category')
                ->whereIn('id', $categoryIds)
                ->get(['id', 'name', 'code']);

            $deliveredRequisition = RequisitionDeliveryItem::with([
                'relRequisitionDelivery.relRequisition.items.attributes.attributeOption.attribute',
                'product.category.category',
                'product.productUnit',
                'product.attributes.attributeOption.attribute',
            ])
                ->when(isset(Auth::user()->employee->as_department_id), function ($query) {
                    return $query->whereHas('relRequisitionDelivery.relRequisition.relUsersList.employee', function ($query) {
                        return $query->where('as_department_id', Auth::user()->employee->as_department_id);
                    });
                })
                ->whereHas('relRequisitionDelivery.relRequisition', function ($query) {
                    return $query->where('author_id', auth()->user()->id);
                })
                ->when(strtotime($from) > 0, function ($query) use ($from) {
                    return $query->whereHas('relRequisitionDelivery', function ($query) use ($from) {
                        return $query->whereDate('delivery_date', '>=', $from);
                    });
                })
                ->when(strtotime($to) > 0, function ($query) use ($to) {
                    return $query->whereHas('relRequisitionDelivery', function ($query) use ($to) {
                        return $query->whereDate('delivery_date', '<=', $to);
                    });
                })
                ->when(!empty($status), function ($query) use ($status) {
                    return $query->where('status', $status);
                })
                ->when($category_id > 0, function ($query) use ($category_id) {
                    return $query->whereHas('relRequisitionDelivery.relRequisition.items.product.category.category', function ($query) use ($category_id) {
                        return $query->where('id', $category_id);
                    });
                })
                ->when(!empty(request()->get('search_text')), function ($query) {
                    return $query->whereHas('relRequisitionDelivery', function ($query) {
                        return $query->where('reference_no', 'LIKE', '%' . request()->get('search_text') . '%');
                    });
                })
                ->when(!datatableOrdering(), function ($query) {
                    return $query->orderby('id', 'desc');
                });

            if (request()->ajax()) {
                return Datatables::of($deliveredRequisition)
                    ->addIndexColumn()
                    ->addColumn('reference_no', function ($values) {
                        return '<a href="javascript:void(0)" data-src="' . route('pms.requisition.list.view.show', $values->relRequisitionDelivery->relRequisition->id) . '"  class="btn btn-link requisition m-1 rounded showRequistionDetails" onclick="showRequistionDetails($(this))">' . (isset($values->relRequisitionDelivery->relRequisition->reference_no) ? $values->relRequisitionDelivery->relRequisition->reference_no : '') . '</a></td>';
                    })
                    ->filterColumn('reference_no', function ($query, $keyword) {
                        return $query->whereHas('relRequisitionDelivery.relRequisition', function ($query) use ($keyword) {
                            $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->addColumn('requisition_date', function ($values) {
                        return isset($values->relRequisitionDelivery->relRequisition->requisition_date) ? date('Y-m-d', strtotime($values->relRequisitionDelivery->relRequisition->requisition_date)) : '';
                    })
                    ->addColumn('delivered_ref_no', function ($values) {
                        return isset($values->relRequisitionDelivery->reference_no) ? $values->relRequisitionDelivery->reference_no : '';
                    })
                    ->filterColumn('delivered_ref_no', function ($query, $keyword) {
                        return $query->whereHas('relRequisitionDelivery', function ($query) use ($keyword) {
                            $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->addColumn('delivery_date', function ($values) {
                        return isset($values->relRequisitionDelivery->delivery_date) ? date('Y-m-d', strtotime($values->relRequisitionDelivery->delivery_date)) : '';
                    })
                    ->addColumn('category', function ($values) {

                        return isset($values->product->category->category->name) ? $values->product->category->category->name : '';
                    })
                    ->filterColumn('category', function ($query, $keyword) {
                        return $query->whereHas('product.category.category', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->addColumn('sub_category', function ($values) {
                        return isset($values->product->category->name) ? $values->product->category->name : '';
                    })
                    ->filterColumn('sub_category', function ($query, $keyword) {
                        return $query->whereHas('product.category', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->addColumn('product', function ($values) {
                        return isset($values->product->name) ? $values->product->name.' '.getProductAttributesFaster($values->product).' '.getProductAttributesFaster($values->relRequisitionDelivery->relRequisition->items->where('product_id', $values->product_id)->first()) : '';
                    })
                    ->filterColumn('product', function ($query, $keyword) {
                        return $query->whereHas('product', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->editColumn('delivery_qty', function ($values) {
                        return number_format($values->delivery_qty, 0);
                    })
                    ->addColumn('actions', function ($values) {
                        $actions = '';
                        $actions = '<p id="action' . $values->id . '">';
                        if ($values->status == 'pending' || $values->status == 'delivered') {
                            $actions .= '<div class="btn-group"><button class="btn dropdown-toggle" data-toggle="dropdown">
                            <span id="statusName' . $values->id . '">' . ucfirst($values->status) . ' <i class="la la-ellipsis-v"></i></span></button><ul class="dropdown-menu"><li id="hideBtn' . $values->id . '"><a href="javascript:void(0)" onclick="deliveredAcknowledge($(this))" class="deliveredAcknowledge" data-id="' . $values->id . '" title="Acknowledged"><i class="la la-check"></i>Acknowledged</a></li></ul></div>';
                        } else {
                            $actions .= 'Acknowledged';
                        }
                        return $actions;
                    })
                    ->rawColumns(['reference_no', 'product', 'actions'])
                    ->make(true);
            }

            $data = [
                'title' => 'Deliverd Requisition',
                'from' => $from,
                'to' => $to,
                'statuss' => ['pending', 'acknowledge', 'delivered'],
                'category_id' => $category_id,
                'categories' => $categories,
                'headerColumns' => $this->dHeaderColumns(),
            ];

            return view('pms.backend.pages.requisition-delivery.delivered-requisition-list', $data);
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    public function deliveredRequisitionAck(Request $request)
    {

        $response = [];

        $deliveredRequisition = RequisitionDeliveryItem::when(isset(Auth::user()->employee->as_department_id), function ($query) {
            return $query->whereHas('relRequisitionDelivery.relRequisition.relUsersList.employee', function ($query) {
                return $query->where('as_department_id', Auth::user()->employee->as_department_id);
            });
        })->whereHas('relRequisitionDelivery.relRequisition', function ($query) {
            return $query->where('author_id', auth()->user()->id);
        })
            ->where('id', $request->id)
            ->first();

        try {
            if (isset($deliveredRequisition)) {

                $deliveredRequisition->status = 'acknowledge';
                $deliveredRequisition->save();

                $response['result'] = 'success';
                $response['message'] = 'Successfully Acknowledged.';

                RequisitionTracking::storeRequisitionTracking($deliveredRequisition->relRequisitionDelivery->relRequisition->id, 'received');

            } else {
                $response['result'] = 'error';
                $response['message'] = 'No Data Found';
            }
        } catch (\Throwable $th) {

            $response['result'] = 'error';
            $response['message'] = $th->getMessage();
        }

        return $response;
    }

    public function deliveredRequisitionSearch(Request $request)
    {
        $response = [];

        $fromDate = date('Y-m-d H:i:s', strtotime($request->from_date));
        $toDate = date('Y-m-d H:i:s', strtotime($request->to_date));

        $status = $request->status;

        $deliveredRequisition = RequisitionDeliveryItem::when(isset(Auth::user()->employee->as_department_id), function ($query) {
            return $query->whereHas('relRequisitionDelivery.relRequisition.relUsersList.employee', function ($query) {
                return $query->where('as_department_id', Auth::user()->employee->as_department_id);
            });
        })->whereHas('relRequisitionDelivery.relRequisition', function ($query) {
            return $query->where('author_id', auth()->user()->id);
        })
            ->when($status, function ($query) use ($status) {
                return $query->where('status', $status);
            })
            ->when($fromDate, function ($query) use ($fromDate) {
                return $query->whereHas('relRequisitionDelivery', function ($query) use ($fromDate) {
                    return $query->whereDate('delivery_date', '>=', $fromDate);
                });
            })
            ->when($toDate, function ($query) use ($toDate) {
                return $query->whereHas('relRequisitionDelivery', function ($query) use ($toDate) {
                    return $query->whereDate('delivery_date', '<=', $toDate);
                });
            })
            ->orderBy('id', 'DESC')
            ->paginate(30);

        try {
            if (count($deliveredRequisition) > 0) {
                $body = View::make('pms.backend.pages.requisition-delivery.delivered-requisition-search',
                    ['deliveredRequisition' => $deliveredRequisition]);
                $contents = $body->render();
                $response['result'] = 'success';
                $response['body'] = $contents;
            } else {
                $response['result'] = 'error';
                $response['message'] = 'No Data Found!!';
            }
        } catch (\Throwable $th) {

            $response['result'] = 'error';
            $response['message'] = $th->getMessage();
        }
        return $response;
    }

    public function history($id)
    {
        try {

            $title = "Requisition History";

            $requisition = RequestProposalRequisitions::where('requisition_id', $id)->first();

            if ($requisition) {
                $proposals = ($requisition->relRequestProposal) ? $requisition->relRequestProposal : '';

                if ($proposals && count($proposals->relQuotations) > 0) {
                    $purchase = $proposals->relQuotations()->with('relPurchaseOrder')->first();
                }

                $purchaseOrder = isset($purchase) ? (!empty($purchase->relPurchaseOrder) ? $purchase->relPurchaseOrder : '') : '';

                if ($purchaseOrder) {
                    $billManage = PurchaseOrder::with([
                        'relGoodReceiveNote',
                        'relGoodsReceivedItemStockIn',
                        'relQuotation.relSuppliers',
                        'relQuotation.exchangeRate.currency',
                        'relPurchaseOrderItems',
                        'relPoAttachment'
                    ])
                        ->where('is_send', 'yes')
                        ->whereHas('relGoodReceiveNote', function ($query) {
                            $query->whereRaw('purchase_orders.id=goods_received_notes.purchase_order_id');
                        })
                        ->whereHas('relGoodsReceivedItemStockIn', function ($query) {
                            return $query->where('is_grn_complete', 'yes')->where('total_amount', '>', 0);
                        })
                        ->where('id', $purchaseOrder->id)
                        ->first();
                } else {
                    $billManage = '';
                }

                return view('pms.backend.pages.rfp.rfp-history', compact('title', 'purchaseOrder', 'proposals', 'billManage'));
            } else {

                $requisition = Requisition::where('id', $id)->first();

                return view('pms.backend.pages.requisitions.history', compact('title', 'requisition'));
            }

        } catch (\Throwable $th) {
            return $this->backWithWarning($th->getMessage());
        }
    }

    /**
     * Duplicate the specified resource.
     *
     * @param \App\Models\PmsModels\Requisition $id
     * @return \Illuminate\Http\JsonResponse
     */

    public function resendRequisitionLogStore($requisition)
    {

        DB::beginTransaction();
        try {

            //Task Budget Validation
            $projectTaskId = isset($requisition->project_task_id) ? $requisition->project_task_id : null;
            $projectTask = ProjectTask::find($projectTaskId);
            if (isset($projectTask->id)) {
                $consumptions = 0;
                if (isset($projectTask->requisitions[0])) {
                    foreach ($projectTask->requisitions as $key => $this_requisition) {
                        $consumptions += estimatedValue($this_requisition);
                    }
                }
                $requisitionConsumption = 0;
                foreach ($requisition->items as $item) {
                    $requisitionConsumption += Product::find($item->product_id)->unit_price * $item->qty;
                }

                $consumptions += $requisitionConsumption;
                if ($consumptions > $projectTask->subDeliverable->budget) {
                    return response()->json([
                        'success' => false,
                        'message' => 'Project Budget allocation (' . $projectTask->budget . ' BDT) has been exceeded for this requisition (' . $requisitionConsumption . ' BDT). Remaining Budget is (' . ($projectTask->subDeliverable->budget > $consumptions ? $projectTask->subDeliverable->budget - $consumptions : 0) . ' BDT)'
                    ]);
                }
            }
            //Task Budget Validation

            $resendLogRequisition = RequisitionLog::create([
                'requisition_id' => $requisition->id,
                'reference_no' => $requisition->reference_no,
                'requisition_date' => $requisition->requisition_date,
                'author_id' => $requisition->author_id,
                'deliverable_id' => isset($requisition->deliverable_id) ? $requisition->deliverable_id : null,
                'project_task_id' => isset($requisition->project_task_id) ? $requisition->project_task_id : null,
                'project_id' => isset($requisition->project_id) ? $requisition->project_id : null,
                'hr_unit_id' => isset($requisition->hr_unit_id) ? $requisition->hr_unit_id : null,
                'requisition' => $requisition->requisition,
                'status' => 2,
                'approved_id' => $requisition->approved_id,
                'is_send_to_rfp' => $requisition->is_send_to_rfp,
                'delivery_status' => $requisition->delivery_status,
                'request_status' => $requisition->request_status,
                'is_po_generate' => $requisition->is_po_generate,
                'explanations' => $requisition->explanations,
                'remarks' => $requisition->remarks,
                'delivery_note' => $requisition->delivery_note,
                'admin_remark' => $requisition->admin_remark,
            ]);

            if ($requisition->attachment) {
                $resendLogRequisition->attachment = $requisition->attachment;
                $resendLogRequisition->save();
            }

            foreach ($requisition->items as $item) {
                $requisitionItemInput[] = [
                    'requisition_log_id' => $resendLogRequisition->id,
                    'product_id' => $item->product_id,
                    'qty' => $item->qty,
                    'requisition_qty' => $item->requisition_qty,
                    'delivery_qty' => $item->delivery_qty,
                    'purchase_qty' => $item->purchase_qty,
                    'qc_qty' => $item->qc_qty,
                    'comment' => $item->comment,
                    'is_send' => $item->is_send,
                    'po_generate' => $item->po_generate,
                    'created_at' => $item->created_at,
                    'created_by' => auth()->user()->id,
                    'updated_by' => auth()->user()->id,
                ];
            }

            RequisitionItemLog::insert($requisitionItemInput);
            DB::commit();

            return true;

        } catch (\Throwable $th) {
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @param $id
     * @param $requisitionLogs
     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View|\Illuminate\Http\Response
     */

    public function logHeaderColumns($value = '')
    {
        $row = array(
            ['SL', 'SL'],
            ['reference_no', 'reference_no', 'text-center'],
            ['requisition_date', 'requisition_date', 'text-center'],
            ['product_category', 'product_category', 'text-center'],
            ['attachment', 'attachment', 'text-center'],
            ['admin_remark', 'admin_remark', 'text-center'],
            ['status', 'status', 'text-center'],
        );
        return $row;
    }

    /**
     * Display a listing of the resource.
     *
     * @param $id
     * @param $requisitionLogs
     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View|\Illuminate\Http\Response
     */

    public function logHistory($id)
    {
        $title = 'Requisition Log History';
        $requisitionLogs = RequisitionLog::where('requisition_id', $id)->with(['requisitionItemLogs'])
            ->when(!datatableOrdering(), function ($query) {
                return $query->orderby('id', 'desc');
            });

        try {

            if (request()->ajax()) {
                return Datatables::of($requisitionLogs)
                    ->addIndexColumn()
                    ->editColumn('reference_no', function ($requisition) {
                        return '<a href="javascript:void(0)" data-src="' . route('pms.requisition.history.view.show',
                                $requisition->id) . '" class="btn btn-link requisition m-1 rounded showRequistionDetails" onclick="requistionDetails($(this))">' . $requisition->reference_no . '</a>';
                    })
                    ->addColumn('requisition_date', function ($requisition) {
                        return date('Y-m-d', strtotime($requisition->requisition_date));
                    })
                    ->filterColumn('requisition_date', function ($query, $keyword) {
                        $query->where('requisition_date', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('requisition_date', function ($query, $order) {
                        return $query->orderBy('requisition_date', $order);
                    })
                    ->addColumn('product_category', function ($requisition) {
                        return isset($requisition->requisitionItemLogs[0]->product->category->category->name) ? $requisition->requisitionItemLogs[0]->product->category->category->name : '';
                    })
                    ->filterColumn('product_category', function ($query, $keyword) {
                        return $query->whereHas('requisitionItemLogs.product.category.category', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('product_category', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequisitionItemLog::select('main_category.name')
                            ->join('products', 'products.id', '=', 'requisition_item_logs.product_id')
                            ->join('categories as sub_category', 'sub_category.id', '=', 'products.category_id')
                            ->join('categories as main_category', 'main_category.id', '=', 'sub_category.parent_id')
                            ->whereColumn('requisition_item_logs.requisition_log_id', 'requisition_logs.id')
                            ->take(1)
                        );
                    })
                    ->editColumn('status', function ($requisition) {
                        $status = '';
                        $status .= '<p id="status' . $requisition->id . '">';
                        if ($requisition->status == 0) {
                            $status .= '<span class="btn btn-xs btn-warning">Pending</span>';
                        } elseif ($requisition->status == 1) {

                            $status .= '<span class="btn btn-xs btn-success">Approved</span>';
                        } elseif ($requisition->status == 2) {
                            $status .= '<span class="btn btn-xs btn-danger">Halt</span>';
                        } elseif ($requisition->status == 3) {
                            $status .= '<span class="btn btn-xs btn-warning">Draft</span>';
                        }
                        $status .= '</p>';
                        return $status;
                    })
                    ->addColumn('attachment', function ($requisition) {
                        $attachment = '';
                        if (auth()->user()->hasRole('Employee') || auth()->user()->hasRole('Department-Head') || auth()->user()->hasRole('Purchase-Department')) {
                            if (!empty($requisition->attachment) && file_exists(public_path($requisition->attachment))) {
                                $attachment .= '<a href="' . url($requisition->attachment) . '" target="_blank" class="btn btn-xs btn-primary"><i class="las la-paperclip"></i>Attachment</a>';
                            }
                        }

                        return $attachment;
                    })
                    ->rawColumns(['reference_no', 'status', 'attachment'])
                    ->make(true);
            }

            return view('pms.backend.pages.requisitions.logHistory', [
                'title' => $title,
                'headerColumns' => $this->logHeaderColumns()
            ]);

        } catch (\Exception $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    public function showLogRequisitionItems($id)
    {
        try {
            $title = 'Requisition Log Items Show';
            $requisition = RequisitionLog::with([
                'projectTask.subDeliverable.deliverable.project',
                'requisitionItemLogs.product.category.category',
                'requisitionItemLogs.product.productUnit',
                'requisitionItemLogs.product.attributes.attributeOption.attribute',
                'requisitionItemLogs.product.relInventorySummary',
                'relUsersList.employee.location',
                'relUsersList.employee.department',
                'relUsersList.employee.unit'
            ])->findOrFail($id);

            $body = View::make('pms.backend.pages.requisitions.logShow',
                ['requisition' => $requisition, 'title' => $title]);
            $contents = $body->render();

            if (request()->has('view')) {
                return $contents;
            }

            return response()->json($contents);
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    public function uploadExcel(Request $request)
    {
        $request->validate([
            'category' => 'required',
            'excel_file' => 'required|mimes:xls,xlsx'
        ]);

        try {
            $path = $this->fileUpload($request->file('excel_file'), 'upload/upload-excels');
            $sheets = Excel::toArray(new RequisitionImport, public_path($path));
            $this->fileDelete($path);

            $products = Product::with([
                'productUnit'
            ])
                ->whereHas('category', function ($query) use ($request) {
                    return $query->where('parent_id', $request->category);
                })->get();

            $items = [];
            if (isset($sheets[0][0])) {
                foreach ($sheets[0] as $key => $value) {
                    if ($products->where('sku', $value['product_sku'])->count() > 0) {
                        $product = $products->where('sku', $value['product_sku'])->first();
                        array_push($items, [
                            'category_id' => $product->category_id,
                            'product_id' => $product->id,
                            'quantity' => $value['quantity'],
                            'uom' => $product->productUnit->unit_name
                        ]);
                    }
                }
            }

            session()->put('requisition-items', [
                'category_id' => $request->category,
                'items' => $items
            ]);

            session()->flash('alert-type', 'success');
            session()->flash('message', "Excel file uploaded successfully & Items has been added to the requision form.");

            return response()->json([
                'success' => true,
            ]);
        } catch (\Throwable $th) {
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    public function sendRequisitionToManagement(Request $request)
    {
        $response = [];

        $requisition = Requisition::where(['id' => $request->requisition_id, 'is_passed' => 'no'])->first();

        //Start transaction
        DB::beginTransaction();

        try {
            if ($requisition) {
                $requisition->is_passed = 'yes';
                $requisition->passed_by = \auth()->user()->id;
                $requisition->save();

                //Set Notification
                $message = '<span class="notification-links" data-src="' . route('pms.requisition.list.view.show', $requisition->id) . '" data-title="Requisition Details">Reference No:' . $requisition->reference_no . '. Watting for approval.</span>';

                if (auth()->user()->hasRole('Department-Head')) {
                    $receiver = getManagerInfo('Management');
                    $receiver_slug = 'send-to-management';
                }

                CreateOrUpdateNotification($message, 'unread', '', $receiver, $receiver_slug, '');
                //Commit data
                DB::commit();

                $response['result'] = 'success';
                $response['message'] = 'Successfully Send to Management!!';
            } else {
                $response['result'] = 'error';
                $response['message'] = 'Data not found.!!';
            }

        } catch (\Throwable $th) {
            //If process has any problem then rollback the data
            DB::rollback();
            $response['result'] = 'error';
            $response['message'] = $th->getMessage();
        }

        return $response;
    }

    public function passedRequisitions()
    {
        try {

            $title = 'User Passed Requisition List';
            $status = request()->has('status') ? request()->get('status') : -1;
            $from = request()->has('from') ? request()->get('from') : date('Y-m-01');
            $to = request()->has('to') ? request()->get('to') : date('Y-m-t');
            $category_id = request()->has('category_id') ? request()->get('category_id') : 0;
            $author_id = request()->has('author_id') ? request()->get('author_id') : 0;

            $categories = Category::doesntHave('category')
                ->whereHas('departmentsList', function ($query) {
                    return $query->whereIn('hr_department_id', auth()->user()->priorities->pluck('hr_department_id')->toArray());
                })
                ->get();
            $requisitionUserLists = Requisition::whereHas('relUsersList.employee', function ($query) {
                return $query->whereIn('as_unit_id', auth()->user()->priorities->pluck('hr_unit_id')->toArray());
            })
                ->join('users', 'users.id', '=', 'requisitions.author_id')
                ->groupBy('requisitions.author_id')
                ->get(['users.id', 'users.name']);

            $data = [
                'title' => 'Requisition',
                'requisitionUserLists' => $requisitionUserLists,
                'from' => $from,
                'to' => $to,
                'status' => $status,
                'category_id' => $category_id,
                'author_id' => $author_id,
                'categories' => $categories,
                'headerColumns' => $this->userHeaderColumns()
            ];

            $requisitions = Requisition::with(['items', 'items.product.category.category', 'relUsersList', 'relUsersList.employee.unit'])
                ->whereHas('relUsersList.employee', function ($query) {
                    return $query->whereIn('as_unit_id', auth()->user()->priorities->pluck('hr_unit_id')->toArray());
                })
                ->when(strtotime($from) > 0, function ($query) use ($from) {
                    return $query->whereDate('requisition_date', '>=', $from);
                })
                ->when(strtotime($to) > 0, function ($query) use ($to) {
                    return $query->whereDate('requisition_date', '<=', $to);
                })
                ->when($status >= 0, function ($query) use ($status) {
                    return $query->where('status', $status);
                })
                ->when($author_id > 0, function ($query) use ($author_id) {
                    return $query->where('author_id', $author_id);
                })
                ->when($category_id > 0, function ($query) use ($category_id) {
                    return $query->whereHas('items.product.category.category', function ($query) use ($category_id) {
                        return $query->where('id', $category_id);
                    });
                })
                ->when(!datatableOrdering(), function ($query) {
                    return $query->orderby('id', 'desc');
                })
                ->whereNotIn('status', [3])
                ->where('is_passed', 'yes');

            if (request()->ajax()) {
                return Datatables::of($requisitions)
                    ->addIndexColumn()
                    ->editColumn('reference_no', function ($requisition) {
                        return '<a href="javascript:void(0)" data-src="' . route('pms.requisition.list.view.show', $requisition->id) . '" class="btn btn-link requisition m-1 rounded showRequistionDetails" onclick="requistionDetails($(this))">' . $requisition->reference_no . '</a>';
                    })
                    ->editColumn('requisition_date', function ($requisition) {
                        return date('Y-m-d', strtotime($requisition->requisition_date));
                    })
                    ->orderColumn('requisition_date', function ($query, $order) {
                        return $query->orderBy('requisition_date', $order);
                    })
                    ->addColumn('product_category', function ($requisition) {
                        return isset($requisition->items[0]->product->category->category->name) ? $requisition->items[0]->product->category->category->name : '';
                    })
                    ->filterColumn('product_category', function ($query, $keyword) {
                        return $query->whereHas('items.product.category.category', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('product_category', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequisitionItem::select('main_category.name')
                            ->join('products', 'products.id', '=', 'requisition_items.product_id')
                            ->join('categories as sub_category', 'sub_category.id', '=', 'products.category_id')
                            ->join('categories as main_category', 'main_category.id', '=', 'sub_category.parent_id')
                            ->whereColumn('requisition_items.requisition_id', 'requisitions.id')
                            ->take(1)
                        );
                    })
                    ->addColumn('requisition_by', function ($requisition) {
                        return isset($requisition->relUsersList->name) ? $requisition->relUsersList->name : '';
                    })
                    ->filterColumn('requisition_by', function ($query, $keyword) {
                        return $query->whereHas('relUsersList', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('requisition_by', function ($query, $order) {
                        return pleaseSortMe($query, $order, User::select('name')
                            ->whereColumn('users.id', 'requisitions.author_id')
                        );
                    })
                    ->addColumn('unit', function ($requisition) {
                        return isset($requisition->relUsersList->employee->unit->hr_unit_short_name) ? $requisition->relUsersList->employee->unit->hr_unit_short_name : '';
                    })
                    ->filterColumn('unit', function ($query, $keyword) {
                        return $query->whereHas('relUsersList.employee.unit', function ($query) use ($keyword) {
                            $query->where('hr_unit_short_name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('unit', function ($query, $order) {
                        return pleaseSortMe($query, $order, \App\User::select('hr_unit.hr_unit_short_name')
                            ->join('hr_as_basic_info', 'hr_as_basic_info.associate_id', '=', 'users.associate_id')
                            ->join('hr_unit', 'hr_unit.hr_unit_id', '=', 'hr_as_basic_info.as_unit_id')
                            ->whereColumn('users.id', 'requisitions.author_id')
                        );
                    })
                    ->addColumn('attachment', function ($requisition) {
                        $attachment = '';
                        if (auth()->user()->hasRole('Employee') || auth()->user()->hasRole('Department-Head') || auth()->user()->hasRole('Purchase-Department')) {
                            if (!empty($requisition->attachment) && file_exists(public_path($requisition->attachment))) {
                                $attachment .= '<a href="' . url($requisition->attachment) . '" target="_blank" class="btn btn-xs btn-primary"><i class="las la-paperclip"></i>Attachment</a>';
                            }
                        }
                        return $attachment;
                    })
                    ->editColumn('status', function ($requisition) {
                        $status = '';

                        if ($requisition->status == 0) {
                            $status .= '<span class="btn btn-xs btn-warning">Pending</span>';
                        } elseif ($requisition->status == 1) {

                            $status .= '<span class="btn btn-xs btn-success">Acknowledge</span>';
                        } elseif ($requisition->status == 2) {
                            $status .= '<span class="btn btn-xs btn-danger">Halt</span>';
                        }
                        $status .= '</p>';
                        return $status;
                    })
                    ->addColumn('actions', function ($values) {
                        $actions = '';

                        $actions .= '<div class="btn-group"><button class="btn dropdown-toggle" data-toggle="dropdown"><span id="statusName' . $values->id . '"><i class="la la-ellipsis-v"></i></span></button><ul class="dropdown-menu">';

                        if ($values->is_send_to_rfp == 'no') {
                            if ($values->status != 0 && auth()->user()->hasPermissionTo('pending')) {
                                $actions .= '<li><a href="javascript:void(0)" title="Click Here To Pending" class="requisitionApprovedBtn" data-id="' . $values->id . '" onclick="requisitionApprovedBtn($(this))"  data-data="pending" data-status="0"><i class="la la-pause"></i>Pending</a></li>';
                            }
                            $actions .= '<li><a href="' . route('pms.requisition.requisition.edit', $values->id) . '?redirect=passed-requisition-approval&editor=management" title="Click Here To Edit"><i class="la la-edit"></i>Edit</a></li>';

                            if ($values->status != 1) {
                                if (auth()->user()->hasPermissionTo('requisition-acknowledge')) {
                                    $actions .= '<li><a href="javascript:void(0)" title="Click Here To Acknowledge" class="requisitionApprovedBtn" onclick="requisitionApprovedBtn($(this))" data-id="' . $values->id . '" data-data="acknowledged" data-status="1"><i class="la la-check"></i>Acknowledge</a></li>';

                                }
                            }

                            if (auth()->user()->hasPermissionTo('halt')) {
                                if ($values->status != 2) {
                                    $actions .= '<li><a href="javascript:void(0)" title="Click Here To Halt" class="requisitionApprovedBtn" onclick="requisitionApprovedBtn($(this))" data-data="halt" data-id="' . $values->id . '" data-status="2"><i class="la la-ban"></i>Halt</a></li>';
                                }
                            }
                        }

                        $actions .= '<li><a href="javascript:void(0)" title="Tracking Requisition" class="trackingRequistionStatus" onclick="trackingRequisitionStatus(' . $values->id . ')" ><i class="la la-map"></i>Track Progress</a></li>';

                        $actions .= '<li><a target="__blank" href="' . route('pms.requisition.history', $values->id) . '"><i class="la la-history" title="Requisition History"></i>Requisition History</a></li</a></li>';


                        $actions .= '</ul></div>';
                        return $actions;

                    })
                    ->rawColumns(['reference_no', 'status', 'attachment', 'actions'])
                    ->make(true);
            }

            return view('pms.backend.pages.requisitions.passed-requisition-index', $data);
        } catch (Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }
}

