<?php
bolt_decrypt( __FILE__ , '8JUjm4'); return 0;
##!!!##