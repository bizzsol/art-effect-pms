<?php
bolt_decrypt( __FILE__ , 'LT1Myq'); return 0;
##!!!##