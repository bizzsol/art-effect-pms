<?php
bolt_decrypt( __FILE__ , 'fZx3X4'); return 0;
##!!!##