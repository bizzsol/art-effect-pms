<?php
bolt_decrypt( __FILE__ , 'ebS8TE'); return 0;
##!!!##