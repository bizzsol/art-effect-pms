<?php
bolt_decrypt( __FILE__ , 'hZj38q'); return 0;
##!!!##