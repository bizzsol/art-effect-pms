<?php
bolt_decrypt( __FILE__ , 'Pz3TSS'); return 0;
##!!!##