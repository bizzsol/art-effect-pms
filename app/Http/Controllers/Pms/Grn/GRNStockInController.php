<?php
bolt_decrypt( __FILE__ , 'vBHSHm'); return 0;
##!!!##