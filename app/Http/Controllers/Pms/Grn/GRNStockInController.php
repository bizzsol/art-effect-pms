<?php
bolt_decrypt( __FILE__ , 'i1iyS1'); return 0;
##!!!##

namespace App\Http\Controllers\Pms\Grn;

use App\Http\Controllers\Controller;
use App\Models\PmsModels\InventoryModels\InventoryActionControl;
use App\Models\PmsModels\Product;
use App\Models\PmsModels\Warehouses;
use Illuminate\Http\Request;
use App\Models\PmsModels\Purchase\PurchaseOrder;
use App\Models\PmsModels\Purchase\PurchaseOrderItem;
use App\Models\PmsModels\Grn\GoodsReceivedNote;
use App\Models\PmsModels\Grn\GoodsReceivedItem;
use App\Models\PmsModels\Grn\GoodsReceivedItemStockIn;
use App\Models\FixedAssets\FixedAssetLocation;
use App\Models\FixedAssets\FixedAssetBatch;
use App\Models\FixedAssets\FixedAssetBatchItem;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\DB, Illuminate\Support\Facades\Auth, Yajra\DataTables\Facades\DataTables;

class GRNStockInController extends Controller
{
    public function headerColumns($value = '')
    {
        return array(
            ['SL', 'SL'],
            ['PO_reference', 'PO_reference', 'text-left'],
            ['gate_in_reference', 'gate_in_reference', 'text-left'],
            ['gate_in_date', 'gate_in_date', 'text-center'],
            ['gate_in_qty', 'gate_in_qty', 'text-right'],
            ['approved_qty', 'approved_qty', 'text-right'],
            ['return_qty', 'return_qty', 'text-right'],
            ['replace_qty', 'replace_qty', 'text-right'],
            ['received_status', 'received_status', 'text-center'],
            ['GRN', 'GRN', 'text-center'],
        );
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        try {
            if (request()->ajax()) {
                $userUnits = auth()->user()->priorities->pluck('hr_unit_id')->toArray();
                $items = GoodsReceivedNote::with([
                    'relPurchaseOrder',
                    'relGoodsReceivedItems.relGoodsReceivedItemStockIn'
                ])
                    ->whereHas('relPurchaseOrder', function ($query) {
                        return $query->where('is_send', 'yes');
                    })
                    ->when(isset(auth()->user()->employee->as_unit_id), function ($query) use ($userUnits) {
                        return $query->whereHas('relPurchaseOrder', function ($query) use ($userUnits) {
                            return $query->whereIn('hr_unit_id', $userUnits);
                        });
                    })
                    ->whereHas('relGoodsReceivedItems.relGoodsReceivedItemStockIn', function ($query) {
                        return $query->where('is_grn_complete', 'no')
                            ->where('received_qty', '>', 0);
                    })
                    ->when(!datatableOrdering(), function ($query) {
                        return $query->orderby('updated_at', 'desc');
                    });

                $options = [
                    'grn-stock-in-list' => auth()->user()->hasPermissionTo('grn-stock-in-list'),
                ];

                return DataTables::of($items)
                    ->addIndexColumn()
                    ->addColumn('PO_reference', function ($grn) {
                        return '<a href="javascript:void(0)" class="btn btn-link btn-xs" onclick="purchaseOrderDetails($(this))" data-src="' . route('pms.purchase.order-list.show', (isset($grn->relPurchaseOrder->id) ? $grn->relPurchaseOrder->id : 0)) . '" data-title="Purchase Order Details">' . (isset($grn->relPurchaseOrder->reference_no) ? $grn->relPurchaseOrder->reference_no : '') . '
                                        </a>';
                    })
                    ->filterColumn('PO_reference', function ($query, $keyword) {
                        return $query->whereHas('relPurchaseOrder', function ($query) use ($keyword) {
                            $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('PO_reference', function ($query, $order) {
                        return pleaseSortMe($query, $order, PurchaseOrder::select('purchase_orders.reference_no')
                            ->whereColumn('purchase_orders.id', 'goods_received_notes.purchase_order_id')
                        );
                    })
                    ->addColumn('gate_in_reference', function ($grn) {
                        return '<a href="javascript:void(0)" class="btn btn-link btn-xs" onclick="showQCEPODetails($(this))" data-src="' . route('pms.grn.grn-process.show', $grn->id) . '" data-title="Gate-In Details">' . $grn->reference_no . '
                                        </a>';
                    })
                    ->filterColumn('gate_in_reference', function ($query, $keyword) {
                        $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('gate_in_reference', function ($query, $order) {
                        return $query->orderBy('reference_no', $order);
                    })
                    ->addColumn('gate_in_date', function ($grn) {
                        return date('Y-m-d', strtotime($grn->received_date));
                    })
                    ->filterColumn('gate_in_date', function ($query, $keyword) {
                        $query->where('received_date', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('gate_in_date', function ($query, $order) {
                        return $query->orderBy('received_date', $order);
                    })
                    ->addColumn('gate_in_qty', function ($grn) {
                        return $grn->relGoodsReceivedItems->sum('qty');
                    })
                    ->addColumn('approved_qty', function ($grn) {
                        return $grn->relGoodsReceivedItems->where('quality_ensure', 'approved')->sum('received_qty');
                    })
                    ->addColumn('return_qty', function ($grn) {
                        return $grn->relGoodsReceivedItems->where('quality_ensure', 'return-change')->sum('qty') - $grn->relGoodsReceivedItems->where('quality_ensure', 'return-change')->sum('received_qty');
                    })
                    ->addColumn('replace_qty', function ($grn) {
                        return $grn->relGoodsReceivedItems->where('quality_ensure', 'return-change')->sum('qty') - $grn->relGoodsReceivedItems->where('quality_ensure', 'return-change')->sum('received_qty');
                    })
                    ->editColumn('received_status', function ($grn) {
                        if ($grn->received_status == 'partial') {
                            return '<a class="btn btn-warning btn-xs">Partial Received</a>';
                        } elseif ($grn->received_status == 'full') {
                            return '<a class="btn btn-success btn-xs">Full Received</a>';
                        } else {
                            return '<a class="btn btn-dark btn-xs">' . ucwords($grn->received_status) . '</a>';
                        }
                    })
                    ->addColumn('GRN', function ($grn) use ($options) {
                        if ($grn->relGoodsReceivedItems()->whereHas('relGoodsReceivedItemStockIn', function ($query) {
                                return $query->where('is_grn_complete', 'no')->where('received_qty', '>', 0);
                            })->count() > 0) {
                            if ($options) {
                                return '<a href="' . route('pms.grn.stock.in.list', $grn->id) . '" class="btn btn-success btn-xs">GRN</a>';
                            }
                        }
                    })
                    ->rawColumns(['PO_reference', 'gate_in_reference', 'received_status', 'GRN'])
                    ->make(true);
            }

            return view('pms.backend.pages.grn-stock-in.qce-list', [
                'title' => "GRN Waiting List",
                'headerColumns' => $this->headerColumns(),
            ]);
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    public function grnHeaderColumns($value = '')
    {
        return array(
            ['SL', 'SL'],
            ['PO_reference', 'PO_reference', 'text-center'],
            ['GRN_reference', 'GRN_reference', 'text-center'],
            ['gate_in_reference', 'gate_in_reference', 'text-center'],
            ['gate_in_date', 'gate_in_date', 'text-center'],
            ['gate_in_qty', 'gate_in_qty', 'text-right'],
            ['approved_qty', 'approved_qty', 'text-right'],
            ['return_qty', 'return_qty', 'text-right'],
            ['replace_qty', 'replace_qty', 'text-right'],
            ['received_status', 'received_status', 'text-center'],
            ['slip', 'slip', 'text-center'],
        );
    }

    public function grnList()
    {
        try {
            if (request()->ajax()) {
                $userUnits = auth()->user()->priorities->pluck('hr_unit_id')->toArray();
                $items = GoodsReceivedNote::with([
                    'relPurchaseOrder',
                    'relGoodsReceivedItems.relGoodsReceivedItemStockIn'
                ])
                    ->whereHas('relPurchaseOrder', function ($query) {
                        return $query->where('is_send', 'yes');
                    })
                    ->when(isset(auth()->user()->employee->as_unit_id), function ($query) use ($userUnits) {
                        return $query->whereHas('relPurchaseOrder', function ($query) use ($userUnits) {
                            return $query->whereIn('hr_unit_id', $userUnits);
                        });
                    })
                    ->whereHas('relGoodsReceivedItems.relGoodsReceivedItemStockIn', function ($query) {
                        return $query->where('is_grn_complete', 'yes');
                    })
                    ->whereHas('relPurchaseOrder.purchaseOrderRequisitions.requisition.requisitionItems.product', function ($query) {
                        return $query->where('is_service', 0);
                    })
                    ->when(!datatableOrdering(), function ($query) {
                        return $query->orderby('updated_at', 'desc');
                    });

                return DataTables::of($items)
                    ->addIndexColumn()
                    ->addColumn('PO_reference', function ($grn) {
                        return '<a href="javascript:void(0)" class="btn btn-link" onclick="purchaseOrderDetails($(this))" data-src="' . route('pms.purchase.order-list.show', (isset($grn->relPurchaseOrder->id) ? $grn->relPurchaseOrder->id : 0)) . '" data-title="Purchase Order Details">' . (isset($grn->relPurchaseOrder->reference_no) ? $grn->relPurchaseOrder->reference_no : '') . '
                                        </a>';
                    })
                    ->filterColumn('PO_reference', function ($query, $keyword) {
                        return $query->whereHas('relPurchaseOrder', function ($query) use ($keyword) {
                            $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('PO_reference', function ($query, $order) {
                        return pleaseSortMe($query, $order, PurchaseOrder::select('purchase_orders.reference_no')
                            ->whereColumn('purchase_orders.id', 'goods_received_notes.purchase_order_id')
                        );
                    })
                    ->addColumn('GRN_reference', function ($grn) {
                        return '<a class="text-success" href="' . url('pms/grn-slip/' . $grn->id) . '" target="_blank">' . $grn->grn_reference_no . '</a>';
                    })
                    ->filterColumn('GRN_reference', function ($query, $keyword) {
                        return $query->where('grn_reference_no', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('GRN_reference', function ($query, $order) {
                        return $query->orderby('grn_reference_no', $order);
                    })
                    ->addColumn('gate_in_reference', function ($grn) {
                        return '<a href="javascript:void(0)" class="btn btn-link" onclick="showGRNPODetails($(this))" data-src="' . route('pms.grn.grn-process.show', $grn->id) . '" data-title="Gate-In Details">' . $grn->reference_no . '
                                        </a>';
                    })
                    ->filterColumn('gate_in_reference', function ($query, $keyword) {
                        $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('gate_in_reference', function ($query, $order) {
                        return $query->orderBy('reference_no', $order);
                    })
                    ->addColumn('gate_in_date', function ($grn) {
                        return date('Y-m-d', strtotime($grn->received_date));
                    })
                    ->filterColumn('gate_in_date', function ($query, $keyword) {
                        $query->where('received_date', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('gate_in_date', function ($query, $order) {
                        return $query->orderBy('received_date', $order);
                    })
                    ->addColumn('gate_in_qty', function ($grn) {
                        return $grn->relGoodsReceivedItems->sum('qty');
                    })
                    ->addColumn('approved_qty', function ($grn) {
                        return $grn->relGoodsReceivedItems->where('quality_ensure', 'approved')->sum('received_qty');
                    })
                    ->addColumn('return_qty', function ($grn) {
                        return $grn->relGoodsReceivedItems->where('quality_ensure', 'return-change')->sum('qty') - $grn->relGoodsReceivedItems->where('quality_ensure', 'return-change')->sum('received_qty');
                    })
                    ->addColumn('replace_qty', function ($grn) {
                        return $grn->relGoodsReceivedItems->where('quality_ensure', 'return-change')->sum('qty') - $grn->relGoodsReceivedItems->where('quality_ensure', 'return-change')->sum('received_qty');
                    })
                    ->editColumn('received_status', function ($grn) {
                        if ($grn->received_status == 'partial') {
                            return '<a class="btn btn-warning btn-xs">Partial Received</a>';
                        } elseif ($grn->received_status == 'full') {
                            return '<a class="btn btn-success btn-xs">Full Received</a>';
                        } else {
                            return '<a class="btn btn-dark btn-xs">' . ucwords($grn->received_status) . '</a>';
                        }
                    })
                    ->addColumn('slip', function ($grn) {
                        return '<a class="btn btn-success btn-xs" href="' . url('pms/grn-slip/' . $grn->id) . '" target="_blank"><i class="la la-print"></i></a>';
                    })
                    ->rawColumns(['PO_reference', 'GRN_reference', 'gate_in_reference', 'received_status', 'slip'])
                    ->make(true);
            }

            return view('pms.backend.pages.grn-stock-in.grn-list', [
                'title' => "GRN List",
                'headerColumns' => $this->grnHeaderColumns()
            ]);
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */

    public function grnStockInList($id)
    {
        $title = "GRN Stock In List";

        try {

            $grn = GoodsReceivedNote::with([
                'relPurchaseOrder.relQuotation.exchangeRate.currency'
            ])->find($id);
            $goodsReceiveItems = GoodsReceivedItem::where('goods_received_note_id', $id)
                ->pluck('id')
                ->all();

            $grn_stock_in_lists = GoodsReceivedItemStockIn::with([
                'relGoodsReceivedItems.relGoodsReceivedNote',
                'relGoodsReceivedItems.relProduct.productUnit',
                'relGoodsReceivedItems.relProduct.category.category',
                'relGoodsReceivedItems.relProduct.attributes.attributeOption.attribute',
                'relGoodsReceivedItems.attributes.attributeOption.attribute',
            ])
                ->whereIn('goods_received_item_id', $goodsReceiveItems)
                ->where('is_grn_complete', 'no')
                ->where('received_qty', '>', 0)
                ->orderby('goods_received_item_id', 'desc')
                ->get();

            $warehouse_ids = Auth::user()->relUsersWarehouse->pluck('id')->all();

            if (count($warehouse_ids) > 0) {
                $warehouses = Warehouses::whereIn('id', $warehouse_ids)->select('name', 'id')->get();
            } else {
                $warehouses = Warehouses::select('name', 'id')->get();
            }

            return view('pms.backend.pages.grn-stock-in.grn-stock-in-list', compact('grn_stock_in_lists', 'title', 'warehouses', 'id', 'grn'));
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */

    public function store(Request $request)
    {
        $request->validate([
            'challan_file' => 'image|mimes:jpeg,jpg,png,gif,pdf|nullable|max:5048',
        ]);

        DB::beginTransaction();
        $grn = GoodsReceivedNote::find($request->goods_received_note_id);
        try {
            $purchase_order_id = [];
            $stockIns = [];
            $credit = 0;
            foreach ($request->id as $key => $value) {

                if ($request->warehouse_id[$key]) {
                    $wareHouse = Warehouses::findOrFail($request->warehouse_id[$key]);
                }

                $model = GoodsReceivedItemStockIn::where('id', $key)->where('is_grn_complete', 'no')->first();

                if (count((array)$model) > 0) {
                    $product = Product::findOrFail($model->relGoodsReceivedItems->product_id);
                    new InventoryActionControl($product, $wareHouse, $model->total_amount, $model->received_qty, 'active', $model->relGoodsReceivedItems->relGoodsReceivedNote->grn_reference_no, $model->id);

                    $model->is_grn_complete = 'yes';
                    $model->warehouse_id = $wareHouse->id;

                    $project = false;
                    if (isset($grn->relPurchaseOrder->purchaseOrderRequisitions[0])) {
                        foreach ($grn->relPurchaseOrder->purchaseOrderRequisitions as $key => $por) {
                            if ($por->requisition->requisitionItems->where('product_id', $model->relGoodsReceivedItems->product_id)->count() > 0) {
                                if (isset($por->requisition->projectTask->id)) {
                                    $project = true;
                                }
                            }
                        }
                    }

                    if ($model->relGoodsReceivedItems->relProduct->is_fixed_asset == 1 || $model->relGoodsReceivedItems->relProduct->is_cwip == 1 || $project) {
                        $fixedAssetLocation = \App\Models\FixedAssets\FixedAssetLocation::where([
                            'unit_id' => $model->relPurchaseOrder->hr_unit_id,
                            'category_id' => $model->relGoodsReceivedItems->relProduct->category->parent_id,
                        ])->first();
                        $model->fixed_asset_location_id = (isset($fixedAssetLocation->id) ? $fixedAssetLocation->id : 0);
                    }

                    $model->save();

                    $credit += $model->total_amount;

                    array_push($stockIns, $model->id);
                    array_push($purchase_order_id, $model->purchase_order_id);
                } else {
                    return $this->backWithError('Data not found.!!');
                }
            }

            $goodsReceivedNote = GoodsReceivedNote::where('id', $request->goods_received_note_id)->first();
            if ($request->hasFile('challan_file')) {
                if (!empty($goodsReceivedNote->challan_file)) {
                    unlink(public_path($goodsReceivedNote->challan_file));
                }

                $goodsReceivedNote->challan_file = $this->fileUpload($request->file('challan_file'), 'upload/grn/challan-file');
                $goodsReceivedNote->save();
            }

            $entry = $this->runLedgerQueries($stockIns, $grn);
            if (isset($purchase_order_id[0]) && isset($entry['success']) && $entry['success']) {
                foreach ($purchase_order_id as $key => $po_id) {
                    \App\Models\PmsModels\Purchase\PurchaseOrderEntry::updateOrCreate([
                        'supplier_id' => PurchaseOrder::findOrFail($po_id)->relQuotation->supplier_id,
                        'purchase_order_id' => $po_id,
                        'type' => 'grn',
                        'entry_id' => $entry['entry']['id'],
                    ], [
                        'updated_at' => date('Y-m-d H:i:s')
                    ]);
                }
            }

            if (isset($stockIns[0])) {
                $project = isset($grn->relPurchaseOrder->purchaseOrderRequisitions[0]->requisition->projectTask->id);
                foreach ($stockIns as $key => $stock_in_id) {
                    $stockIn = GoodsReceivedItemStockIn::where('id', $stock_in_id)->where('is_grn_complete', 'yes')->first();
                    $capitalize = true;
                    if ($project) {
                        if ($stockIn->relGoodsReceivedItems->relProduct->is_cwip == 1) {
                            $capitalize = false;
                        }
                    } else {
                        if ($stockIn->relGoodsReceivedItems->relProduct->is_fixed_asset == 0) {
                            $capitalize = false;
                        }
                    }

                    if ($capitalize && $stockIn->received_qty > 0) {
                        $batch = FixedAssetBatch::create([
                            'goods_received_items_stock_in_id' => $stockIn->id,
                            'batch' => uniqueCodeWithoutPrefix(8, 'fixed_asset_batches', 'batch'),

                            'depreciation_method_id' => $stockIn->relGoodsReceivedItems->relProduct->depreciation_method_id,
                            'base_rate' => $stockIn->relGoodsReceivedItems->relProduct->base_rate,
                            'rate_multiplier' => $stockIn->relGoodsReceivedItems->relProduct->rate_multiplier,
                            'depreciation_rate' => $stockIn->relGoodsReceivedItems->relProduct->depreciation_rate,
                            'is_yearly' => $stockIn->relGoodsReceivedItems->relProduct->is_yearly,
                            'years' => $stockIn->relGoodsReceivedItems->relProduct->years,
                            'is_onetime' => $stockIn->relGoodsReceivedItems->relProduct->is_onetime,
                            'depreciation_start_date' => date('Y-m-d', strtotime($stockIn->updated_at)),
                        ]);
                        if ($batch) {
                            for ($i = 1; $i <= $stockIn->received_qty; $i++) {
                                FixedAssetBatchItem::create([
                                    'fixed_asset_batch_id' => $batch->id,
                                    'asset_code' => $batch->batch . '-' . $i,

                                    'depreciation_method_id' => $stockIn->relGoodsReceivedItems->relProduct->depreciation_method_id,
                                    'base_rate' => $stockIn->relGoodsReceivedItems->relProduct->base_rate,
                                    'rate_multiplier' => $stockIn->relGoodsReceivedItems->relProduct->rate_multiplier,
                                    'depreciation_rate' => $stockIn->relGoodsReceivedItems->relProduct->depreciation_rate,
                                    'is_yearly' => $stockIn->relGoodsReceivedItems->relProduct->is_yearly,
                                    'years' => $stockIn->relGoodsReceivedItems->relProduct->years,
                                    'is_onetime' => $stockIn->relGoodsReceivedItems->relProduct->is_onetime,
                                    'depreciation_start_date' => date('Y-m-d', strtotime($stockIn->updated_at)),
                                ]);
                            }
                        }
                    }
                }
            }

            //Notification
            $message = '<span class="notification-links" data-src="' . route('pms.purchase.order-list.show', $goodsReceivedNote->purchase_order_id) . '?view" data-title="Purchase Order Details">Reference No:' . $goodsReceivedNote->relPurchaseOrder->reference_no . '. Waiting for the Billing.</span>';

            CreateOrUpdateNotification($message, 'unread', '', getManagerInfo('Purchase-Department'), 'send-to-billing', '');

            DB::commit();

            return redirect('pms/supplier/rating/' . $goodsReceivedNote->relPurchaseOrder->relQuotation->supplier_id . '/' . $goodsReceivedNote->id . '?table=goods_received_notes&field=' . $goodsReceivedNote->id . '&type=grn')->with(['message' => 'GRN Successful', 'alert-type' => 'success']);
        } catch (\Throwable $th) {
            DB::rollback();
            return $this->backWithError($th->getMessage());
        }
    }

    public function runLedgerQueries($ids, $grn)
    {
        $accountDefaultSettings = accountDefaultSettings('json');
        $stockIns = GoodsReceivedItemStockIn::whereIn('id', $ids)->where('is_grn_complete', 'yes')->get();
        $items = [];
        if (isset($stockIns[0])) {
            foreach ($stockIns as $key => $item) {
                $cost_centre_id = $item->relGoodsReceivedItems->relGoodsReceivedNote->relPurchaseOrder->cost_centre_id;

                $debit_account = $accountDefaultSettings['inventory_account'];
                if (isset($item->relGoodsReceivedItems->relProduct->id)) {
                    if ($item->relGoodsReceivedItems->relProduct->is_service == 1) {
                        $debit_account = $accountDefaultSettings['cogs_account'];
                        if ($item->relGoodsReceivedItems->relProduct->cogs_account_id > 0) {
                            $debit_account = $item->relGoodsReceivedItems->relProduct->cogs_account_id;
                        }
                    } else {
                        if ($item->relGoodsReceivedItems->relProduct->inventory_account_id > 0) {
                            $debit_account = $item->relGoodsReceivedItems->relProduct->inventory_account_id;
                        }
                    }
                }

                array_push($items, [
                    'cost_centre_id' => $cost_centre_id,
                    'chart_of_account_id' => $debit_account,
                    'debit' => $item->total_amount,
                    'credit' => 0,
                    'narration' => 'GRN :: Inventory Debit',
                    'type' => 'grn',
                    'source' => $item->id
                ]);

                array_push($items, [
                    'cost_centre_id' => $cost_centre_id,
                    // 'chart_of_account_id' => (isset($item->relPurchaseOrder->relQuotation->relSuppliers->payable_account_id) && $item->relPurchaseOrder->relQuotation->relSuppliers->payable_account_id > 0 ? $item->relPurchaseOrder->relQuotation->relSuppliers->payable_account_id : $accountDefaultSettings['supplier_payable_account']),
                    'chart_of_account_id' => $accountDefaultSettings['grir_account'],
                    'debit' => 0,
                    'credit' => $item->total_amount,
                    'narration' => 'GRN :: GR/IR Credit',
                    'type' => 'grn',
                    'source' => $item->id
                ]);

                // array_push($items, [
                //     'cost_centre_id' => 2,
                //     'chart_of_account_id' => (isset($item->relPurchaseOrder->relQuotation->relSuppliers->payable_discount_id) && $item->relPurchaseOrder->relQuotation->relSuppliers->payable_discount_id > 0 ? $item->relPurchaseOrder->relQuotation->relSuppliers->payable_discount_id : $accountDefaultSettings['supplier_payable_discount_account']),
                //     'debit' => $item->discount,
                //     'credit' => 0,
                //     'narration' => 'GRN :: Supplier Discount Payable Debit',
                // ]);
            }
        }

        return saveLedgerEntries(5, date('Y-m-d H:i:s'), 1, '', 'GRN', $items, $grn->relPurchaseOrder->relQuotation->exchange_rate_id, 0, 0, 0, getCostCentreCompany($grn->relPurchaseOrder->cost_centre_id), false, 'json');
    }

    public function grnSlip($id)
    {
        try {
            $title = "GRN Slip";
            $note = GoodsReceivedNote::findOrFail($id);
            $items = GoodsReceivedItem::with([
                'relProduct.attributes.attributeOption.attribute',
                'attributes.attributeOption.attribute',
            ])
            ->where('goods_received_note_id', $note->id)
            ->whereHas('relGoodsReceivedItemStockIn', function ($query) {
                return $query->where('is_grn_complete', 'yes');
            })->get();

            $data = [
                'title' => $title,
                'note' => $note,
                'items' => $items
            ];

            return viewMPDF('pms.backend.pages.grn-stock-in.grn-slip-pdf', $data, $title, $title);

            //return view('pms.backend.pages.grn-stock-in.grn-slip', $data);
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }
}