<?php
bolt_decrypt( __FILE__ , 'nbZIIL'); return 0;
##!!!##