<?php
bolt_decrypt( __FILE__ , 'pyN12H'); return 0;
##!!!##