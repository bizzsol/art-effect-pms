<?php
bolt_decrypt( __FILE__ , '1iSKOy'); return 0;
##!!!##

namespace App\Http\Controllers\Pms\Grn;

use App\Http\Controllers\Controller;
use App\Models\PmsModels\InventoryModels\InventoryActionControl;
use App\Models\PmsModels\Product;
use App\Models\PmsModels\Warehouses;
use Illuminate\Http\Request;
use App\Models\PmsModels\Purchase\PurchaseOrder;
use App\Models\PmsModels\Purchase\PurchaseOrderItem;
use App\Models\PmsModels\RequisitionItem;
use App\Models\PmsModels\Grn\GoodsReceivedNote;
use App\Models\PmsModels\Grn\GoodsReceivedItem;
use App\Models\PmsModels\GoodsReceivedItemAttribute;
use App\Models\PmsModels\Grn\GoodsReceivedItemStockIn;
use App\Models\PmsModels\PurchaseReturn;
use App\Models\PmsModels\PurchaseReturnGateOut;
use App\Models\PmsModels\Purchase\PurchaseOrderRequisition;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use Yajra\DataTables\Facades\DataTables;

class GRNController extends Controller
{
    public function headerColumns($value = '')
    {
        $array = array(
            ['SL', 'SL'],
            ['PO_reference', 'PO_reference', 'text-center'],
            ['PO_date', 'PO_date', 'text-center'],
            ['requisitions', 'requisitions', 'text-center'],
            ['challan', 'challan', 'text-center'],
            ['gate_in_reference', 'gate_in_reference', 'text-center'],
            ['gate_in_date', 'gate_in_date', 'text-center'],
            ['gate_in_qty', 'gate_in_qty', 'text-right'],
            ['received_status', 'received_status', 'text-center'],
            ['actions', 'actions', 'text-center'],
        );

        if (auth()->user()->hasPermissionTo('quality-ensure')) {
            array_push($array, ['quality_ensure', 'quality_ensure']);
        }

        return $array;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $title = "Gate-In List";
        $from_date = request()->has('from_date') && strtotime(request()->get('from_date')) > 0 ? request()->get('from_date') : '';
        $to_date = request()->has('to_date') && strtotime(request()->get('to_date')) > 0 ? request()->get('to_date') : '';
        $received_status = request()->has('received_status') ? request()->get('received_status') : '';

        try {
            if (request()->ajax()) {
                $gateIns = GoodsReceivedNote::with([
                    'relPurchaseOrder.relPurchaseOrderItems',
                    'relPurchaseOrder.purchaseOrderRequisitions.requisition',
                    'relGoodsReceivedItems'
                ])
                ->whereHas('relPurchaseOrder.relQuotation.relSuppliers', function($query){
                    return $query->whereNotIn('name', ignoreSuppliers());
                })
                    ->whereHas('relPurchaseOrder.purchaseOrderRequisitions.requisition.requisitionItems.product', function ($query) {
                        return $query->where('is_service', 0);
                    })
                    ->when(!auth()->user()->hasRole('Gate Permission'), function ($query) {
                        if (auth()->user()->hasRole('Employee')) {
                            return $query->where('is_sent_to_requisitor', 'yes')->whereHas('relPurchaseOrder.purchaseOrderRequisitions.requisition',
                                function ($query) {
                                    return $query->where('author_id', auth()->user()->id);
                                });
                        } else {
                            return $query->when(auth()->user()->hasRole('Department-Head') && !auth()->user()->hasRole('Store-Manager'), function ($query) {
                                return $query->whereHas('relPurchaseOrder.purchaseOrderRequisitions', function ($query) {
                                    return $query->whereIn('hr_department_id', auth()->user()->priorities->pluck('hr_department_id')->toArray());
                                });
                            })
                                ->when(!auth()->user()->hasRole('Department-Head') || auth()->user()->hasRole('Store-Manager'), function ($query) {
                                    return $query->whereHas('relPurchaseOrder.purchaseOrderRequisitions', function ($query) {
                                        return $query->where('hr_department_id', 0);
                                    });
                                });
                        }
                    })
                    ->when(auth()->user()->hasRole('Gate Permission'), function ($query) {
                        return $query->whereHas('relPurchaseOrder', function ($query) {
                            return $query->whereIn('hr_unit_id', auth()->user()->priorities->pluck('hr_unit_id')->toArray());
                        });
                    })
                    ->when(auth()->user()->hasRole('Employee'), function ($query) {
                        return $query->whereHas('relPurchaseOrder.purchaseOrderRequisitions.requisition', function ($query) {
                            return $query->where('author_id', auth()->user()->id);
                        });
                    })
                    ->when(!empty($from_date), function ($query) use ($from_date) {
                        return $query->where(DB::raw('substr(`received_date`, 1, 10)'), '>=', $from_date);
                    })
                    ->when(!empty($to_date), function ($query) use ($to_date) {
                        return $query->where(DB::raw('substr(`received_date`, 1, 10)'), '<=', $to_date);
                    })
                    ->when(!empty($received_status), function ($query) use ($received_status) {
                        return $query->where('received_status', $received_status);
                    })
                    ->when(!datatableOrdering(), function ($query) {
                        return $query->orderby('created_at', 'desc');
                    });

                return Datatables::of($gateIns)
                    ->addIndexColumn()
                    ->addColumn('PO_reference', function ($grn) {
                        return '<a href="javascript:void(0)" class="btn btn-link btn-xs" onclick="purchaseOrderDetails($(this))" data-src="' . route('pms.purchase.order-list.show', $grn->relPurchaseOrder->id) . '" data-title="Purchase Order Details">' . $grn->relPurchaseOrder->reference_no . '</a>';
                    })
                    ->filterColumn('PO_reference', function ($query, $keyword) {
                        return $query->whereHas('relPurchaseOrder', function ($query) use ($keyword) {
                            $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('PO_reference', function ($query, $order) {
                        return pleaseSortMe($query, $order, PurchaseOrder::select('purchase_orders.reference_no')
                            ->whereColumn('purchase_orders.id', 'goods_received_notes.purchase_order_id')
                        );
                    })
                    ->addColumn('PO_date', function ($grn) {
                        return date('Y-m-d', strtotime($grn->relPurchaseOrder->po_date));
                    })
                    ->filterColumn('PO_date', function ($query, $keyword) {
                        return $query->whereHas('relPurchaseOrder', function ($query) use ($keyword) {
                            $query->where('po_date', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('PO_reference', function ($query, $order) {
                        return pleaseSortMe($query, $order, PurchaseOrder::select('purchase_orders.po_date')
                            ->whereColumn('purchase_orders.id', 'goods_received_notes.purchase_order_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('requisitions', function ($grn) {
                        return $grn->relPurchaseOrder->purchaseOrderRequisitions->pluck('requisition.reference_no')->implode(', ');
                    })
                    ->filterColumn('requisitions', function ($query, $keyword) {
                        return $query->whereHas('relPurchaseOrder.purchaseOrderRequisitions.requisition', function ($query) use ($keyword) {
                            $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('requisitions', function ($query, $order) {
                        return pleaseSortMe($query, $order, PurchaseOrder::select('requisitions.reference_no')
                            ->join('requisitions', 'requisitions.id', '=', 'purchase_order_requisitions.requisition_id')
                            ->join('purchase_order_requisitions', 'purchase_order_requisitions.purchase_order_id', '=', 'purchase_orders.id')
                            ->whereColumn('purchase_orders.id', 'goods_received_notes.purchase_order_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('gate_in_reference', function ($grn) {
                        return '<div style="width: 100%">
                                    <div style="width: 90%;float: left;clear:right">
                                        <a href="javascript:void(0)" class="btn btn-link btn-xs" onclick="showGateInPODetails($(this))" data-src="' . route('pms.grn.grn-process.show', $grn->id) . '" data-title="Gate In Details">' . $grn->reference_no . '</a>
                                    </div>
                                    <div style="width: 10%;float: left;clear:right">
                                        <a class="btn btn-primary btn-xs" href="' . url('pms/grn/gate-in-slip/' . $grn->purchase_order_id . '?grn=' . $grn->id) . '" target="_blank" style="margin-top: 7.5px"><i class="la la-print"></i></a>
                                    </div>
                                </div>';
                    })
                    ->filterColumn('gate_in_reference', function ($query, $keyword) {
                        $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('gate_in_reference', function ($query, $order) {
                        return $query->orderBy('reference_no', $order);
                    })
                    ->addColumn('gate_in_date', function ($grn) {
                        return date('Y-m-d', strtotime($grn->received_date));
                    })
                    ->filterColumn('gate_in_date', function ($query, $keyword) {
                        $query->where('received_date', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('gate_in_date', function ($query, $order) {
                        return $query->orderBy('received_date', $order);
                    })
                    ->addColumn('gate_in_qty', function ($grn) {
                        return $grn->relGoodsReceivedItems->sum('qty');
                    })
                    ->editColumn('received_status', function ($grn) {
                        if ($grn->received_status == 'partial') {
                            return '<a class="btn btn-warning btn-xs">Partial Received</a>';
                        } elseif ($grn->received_status == 'full') {
                            return '<a class="btn btn-success btn-xs">Full Received</a>';
                        } else {
                            return '<a class="btn btn-dark btn-xs">' . ucwords($grn->received_status) . '</a>';
                        }
                    })
                    ->addColumn('quality_ensure', function ($grn) {
                        $btns = '';

                        if ($grn->relGoodsReceivedItems()->whereIn('quality_ensure', ['pending'])->count() > 0) {
                            $qc = auth()->user()->hasRole('Employee') ? auth()->user()->hasPermissionTo('quality-ensure') : ($grn->is_sent_to_requisitor == 'no');
                            if ($qc){
                                $btns .= '<a href="' . route('pms.quality.ensure.check', $grn->id) . '" title="Quality Ensure" class="btn btn-success btn-xs"><i class="las la-check-circle"> ' . __('Quality Ensure') . '</i></a>';
                            }

                            if ($grn->is_sent_to_requisitor == 'no') {
                                $btns .= '<a title="Send Mail" onclick="sendToRequisitor($(this))" data-action="' .
                                    route
                                    ('pms.grn.send.to.requisitor', [$grn->purchase_order_id, $grn->id]) . '" class="btn btn-info btn-xs mt-1"><i class="las la-paper-plane">&nbsp;&nbsp;Send to Requisitor</i></a>';
                            }

                        } else {
                            if (!isSupplierRating('goods_received_notes', $grn->id, 'qc') && in_array((isset($grn->relPurchaseOrder->relQuotation->type) ? $grn->relPurchaseOrder->relQuotation->type : ''), ['manual', 'online'])) {
                                return '<a href="' . url('pms/supplier/rating/' . $grn->relPurchaseOrder->relQuotation->supplier_id . '/' . $grn->id) . '?table=goods_received_notes&field=' . $grn->id . '&type=qc" class="btn btn-info btn-xs">Ratings</a>';
                            }
                        }
                        return $btns;

                    })
                    ->addColumn('actions', function ($grn) {
                        return '<a title="Send Mail" onclick="sendMail($(this))" data-action="' . route('pms.grn.send.gate.in.slip', [$grn->purchase_order_id, $grn->id]) . '" class="btn btn-success btn-xs"><i class="las la-check-circle">&nbsp;&nbsp;Send Mail</i></a>';
                    })
                    ->rawColumns(['PO_reference', 'gate_in_reference', 'received_status', 'quality_ensure', 'actions'])
                    ->toJson();
            }

            return view('pms.backend.pages.grn.index', [
                'title' => "Gate-In List",
                'from_date' => $from_date,
                'to_date' => $to_date,
                'received_status' => $received_status,
                'headerColumns' => $this->headerColumns()
            ]);
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    public function grnProcessSearch(Request $request)
    {
        $response = [];

        $from_date = date('Y-m-d', strtotime($request->from_date));
        $to_date = date('Y-m-d', strtotime($request->to_date));
        $received_status = $request->received_status;

        $purchaseOrder = PurchaseOrder::with('relPurchaseOrderItems', 'relGoodReceiveNote', 'relGoodReceiveNote.relGoodsReceivedItems')
            ->where('is_send', 'yes')
            ->whereHas('relGoodReceiveNote', function ($query) {
                return $query->whereRaw('purchase_orders.id=goods_received_notes.purchase_order_id');
            })
            ->when(!auth()->user()->hasRole('Gate Permission'), function ($query) {
                return $query->when(auth()->user()->hasRole('Department-Head'), function ($query) {
                    return $query->whereHas('purchaseOrderRequisitions', function ($query) {
                        return $query->where('hr_department_id', auth()->user()->employee->as_department_id);
                    });
                })
                    ->when(!auth()->user()->hasRole('Department-Head'), function ($query) {
                        return $query->whereHas('purchaseOrderRequisitions', function ($query) {
                            return $query->where('hr_department_id', 0);
                        });
                    });
            })
            ->when(auth()->user()->hasRole('Gate Permission'), function ($query) {
                return $query->where('hr_unit_id', auth()->user()->employee->as_unit_id);
            })
            ->when(isset($received_status), function ($query) use ($received_status) {
                return $query->whereHas('relGoodReceiveNote', function ($query) use ($received_status) {
                    return $query->where('received_status', $received_status);
                });
            })
            ->whereDate('po_date', '>=', $from_date)
            ->whereDate('po_date', '<=', $to_date)
            ->orderBy('id', 'desc')
            ->paginate(30);

        try {
            if (count($purchaseOrder) > 0) {
                $body = \Illuminate\Support\Facades\View::make('pms.backend.pages.grn.grn-list-search',
                    ['purchaseOrder' => $purchaseOrder, 'received_status' => $received_status]);
                $contents = $body->render();

                $response['result'] = 'success';
                $response['body'] = $contents;
            } else {
                $response['result'] = 'error';
                $response['message'] = 'Data not found.!!';
            }

        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }

        return $response;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function poListIndex()
    {
        try {

            // $title="(Gate-In) Purchase Order List";
            // $data = PurchaseOrder::with('relPurchaseOrderItems','relGoodReceiveNote','relGoodReceiveNote.relGoodsReceivedItems')
            //     ->when(request()->has('from_date') && request()->has('to_date'), function($query){
            //         return $query->where(\DB::raw('substr(`po_date`, 1, 10)'), '>=', date('Y-m-d', strtotime(request()->get('from_date'))));
            //     })
            //     ->when(request()->has('to_date'), function($query){
            //         return $query->where(\DB::raw('substr(`po_date`, 1, 10)'), '<=', date('Y-m-d', strtotime(request()->get('to_date'))));
            //     })
            //     ->when(isset(auth()->user()->employee->as_unit_id), function($query){
            //         return $query->where('hr_unit_id',auth()->user()->employee->as_unit_id);
            //     })
            //     ->where('is_send','yes')
            //     ->orderBy('id','desc')
            //     ->paginate(30);

            // if (count($data)>0){
            //     calculateGrnQtyAgainstPurchaseOrder($data);
            // }
            // return view('pms.backend.pages.grn.po-index',compact('title','data'));

            $title = "Gate In/Out";

            return view('pms.backend.pages.grn.scan', compact('title'));

        } catch (\Throwable $th) {
            return $this->backWithWarning($th->getMessage());
        }
    }

    public function scan(Request $request)
    {
        $request->validate([
            'type' => 'required',
            'po_reference' => 'required'
        ]);

        if ($request->type == "in") {
            $order = PurchaseOrder::whereHas('purchaseOrderRequisitions.requisition.requisitionItems.product', function ($query) {
                return $query->where('is_service', 0);
            })
                ->where('reference_no', $request->po_reference)
                ->first();
            if (isset($order->id)) {
                return redirect('pms/grn/grn-list/create/' . $order->id);
            }
            return $this->backWithError('Purchase order not found!');
        } else {
            $order = PurchaseOrder::whereHas('relGoodReceiveNote.relGoodsReceivedItems.relPurchaseOrderReturns', function ($query) use ($request) {
                return $query->where('code', $request->po_reference);
            })->first();
            if (isset($order->id)) {
                return redirect('pms/grn/gate-out/' . $order->id . '?code=' . $request->po_reference);
            }
            return $this->backWithError('Return/Replace Data not found!');
        }
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create($id)
    {
        try {

            $purchaseOrder = PurchaseOrder::with([
                'Unit',
                'relPurchaseOrderItems.relReceiveProduct',
                'relPurchaseOrderItems.relProduct.category.category',
                'relPurchaseOrderItems.relProduct.productUnit',
                'relPurchaseOrderItems.relProduct.attributes.attributeOption.attribute',
                'relQuotation.relQuotationItems',
                'relQuotation.relSuppliers',
            ])
                ->whereHas('purchaseOrderRequisitions.requisition.requisitionItems.product', function ($query) {
                    return $query->where('is_service', 0);
                })
                ->where([
                    'id' => $id,
                    'is_send' => 'yes'
                ])
                ->first();

            $requisitionItems = RequisitionItem::with([
                'attributes.attributeOption.attribute'
            ])
                ->whereHas('requisition.requestProposalRequisition', function ($query) use ($purchaseOrder) {
                    return $query->where('request_proposal_id', $purchaseOrder->relQuotation->request_proposal_id);
                })
                ->get();


            if (!isset($purchaseOrder->id)) {
                return $this->backWithWarning("No Available Data Found!");
            }

            if (count($purchaseOrder->relGoodReceiveNote) > 0) {
                $grnQty = $purchaseOrder->relPurchaseOrderItems->each(function ($item, $i) use ($purchaseOrder) {
                    $purchaseOrder->relGoodReceiveNote->each(function ($grnItem, $k) use ($item) {
                        $item['grn_qty'] += $grnItem->relGoodsReceivedItems->where('uid', $item->uid)->sum('qty');
                    });
                });
            }

            //return $purchaseOrder;
            $gateOuts = PurchaseReturn::with([
                'gateOuts',
                'relGoodsReceivedItems.relGoodsReceivedNote',
            ])
                ->whereHas('relGoodsReceivedItems.relGoodsReceivedNote', function ($query) use ($purchaseOrder) {
                    return $query->where('purchase_order_id', $purchaseOrder->id);
                })
                ->where('status', 'return-change')
                ->get();

            $available = 0;
            if (isset($gateOuts[0])) {
                foreach ($gateOuts as $key => $gateOut) {
                    $available += ($gateOut->gateOuts->sum('qty') - $gateOut->received_qty);
                }
            }

            if ($available <= 0) {
                $result = $this->checkOrderQtyAndReceiveQty($purchaseOrder);
                if ($result == -1) {
                    return $this->backWithWarning('Received qty can not be greater than purchase order qty');
                } elseif ($result == 0) {
                    return $this->backWithWarning('Total Product (s) Already Received');
                }
            }

            $title = "Gate-In Receive";
            $prefix = 'GATE-IN-' . date('y', strtotime(date('Y-m-d'))) . '-' . $purchaseOrder->Unit->hr_unit_short_name . '-';
            $refNo = uniqueCode(20, $prefix, 'goods_received_notes', 'id');
            return view('pms.backend.pages.grn.create', compact('title', 'purchaseOrder', 'refNo', 'gateOuts', 'requisitionItems'));

        } catch (Throwable $th) {
            return $this->backWithWarning($th->getMessage());
        }
    }

    public function checkOrderQtyAndReceiveQty($purchaseOrder)
    {
        $totalReceiveQty = 0;
        foreach ($purchaseOrder->relGoodReceiveNote as $grn) {
            $totalReceiveQty += $grn->relGoodsReceivedItems->sum('qty');
        }
        $totalOrderQty = $purchaseOrder->relPurchaseOrderItems->sum('qty');
        return ($totalOrderQty <=> $totalReceiveQty);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'received_date' => 'required|date',
            'reference_no' => "required|unique:goods_received_notes|max:100",
            'challan' => "required|max:100",
            'delivery_by' => "nullable|max:200",
            'note' => "nullable|max:500",
            'total_price' => "required",
            'gross_price' => "required",
            // 'challan_file' => 'image|mimes:jpeg,jpg,png,gif,pdf|nullable|max:5048',
        ]);

        if (!isset($request->product_id[0])) {
            $this->validate($request, [
                'replace_qty' => 'required',
                'replace_qty.*' => 'required',
            ]);
        }

        $purchaseOrder = PurchaseOrder::with([
            'relQuotation',
            'Unit'
        ])->findOrFail($request->purchase_order_id);
        
        $requisitionItems = RequisitionItem::with([
            'attributes'
        ])
        ->whereHas('requisition.requestProposalRequisition', function ($query) use ($purchaseOrder) {
            return $query->where('request_proposal_id', $purchaseOrder->relQuotation->request_proposal_id);
        })
        ->get();

        DB::beginTransaction();
        try {

            $challanFile = '';
            if ($request->hasFile('challan_file')) {
                $challanFile = $this->fileUpload($request->file('challan_file'), 'upload/grn/challan-file');
            }

            $prefix = 'GRN-' . date('y', strtotime(date('Y-m-d'))) . '-'.$purchaseOrder->Unit->hr_unit_short_name.'-';
            $grnReferenceNo = uniqueCode(16, $prefix, 'goods_received_notes', 'id');
            $goodsReceivedNote = GoodsReceivedNote::create([
                'purchase_order_id' => $request->purchase_order_id,
                'reference_no' => $request->reference_no,
                'grn_reference_no' => $grnReferenceNo,
                'challan' => $request->challan,
                'challan_file' => $challanFile,
                'total_price' => $request->total_price,
                'discount' => $request->discount ?? 0,
                'vat' => $request->vat ?? 0,
                'gross_price' => $request->gross_price,
                'received_date' => date('Y-m-d', strtotime($request->received_date)),
                'delivery_by' => $request->delivery_by,
                'receive_by' => \Auth::user()->id,
                'note ' => $request->note,
                'created_by' => \Auth::user()->id,
            ]);

            $grnAttributes = [];

            if (isset($request->product_id[0])) {
                foreach ($request->product_id as $key => $uid) {
                    if ($request->qty[$uid] != 0) {
                        if ($request->vat_type[$uid] == 'inclusive') {
                            $total_amount = ((isset($request->unit_amount[$uid]) ? $request->unit_amount[$uid] : 0) - (isset($request->item_discount_amount[$uid]) ? $request->item_discount_amount[$uid] : 0));
                        } elseif ($request->vat_type[$uid] == 'exclusive') {
                            $total_amount = ((isset($request->unit_amount[$uid]) ? $request->unit_amount[$uid] : 0) - (isset($request->item_discount_amount[$uid]) ? $request->item_discount_amount[$uid] : 0)) + (isset($request->sub_total_vat_price[$uid]) ? $request->sub_total_vat_price[$uid] : 0);
                        } else {
                            $total_amount = ((isset($request->unit_amount[$uid]) ? $request->unit_amount[$uid] : 0) - (isset($request->item_discount_amount[$uid]) ? $request->item_discount_amount[$uid] : 0));
                        }

                        $requisitionItem = $requisitionItems->where('uid', $uid)->first();
                        $goodsReceivedItem = GoodsReceivedItem::create([
                            'goods_received_note_id' => $goodsReceivedNote->id,
                            'uid' => $requisitionItem->uid,
                            'product_id' => $requisitionItem->product_id,
                            'unit_amount' => $request->unit_price[$uid],
                            'qty' => $request->qty[$uid],
                            'sub_total' => $request->unit_amount[$uid],
                            'discount_percentage' => $request->discount_percentage[$uid],
                            'discount' => $request->item_discount_amount[$uid],
                            'vat_type' => $request->vat_type[$uid],
                            'vat_percentage' => $request->vat_percentage[$uid],
                            'vat' => $request->sub_total_vat_price[$uid],
                            'total_amount' => $total_amount,
                        ]);
                        if ($goodsReceivedItem) {
                            if (isset($requisitionItem->id) && $requisitionItem->attributes->count() > 0) {
                                foreach ($requisitionItem->attributes as $attribute) {
                                    array_push($grnAttributes, [
                                        'goods_received_item_id' => $goodsReceivedItem->id,
                                        'attribute_option_id' => $attribute->attribute_option_id,
                                        'created_by' => auth()->user()->id
                                    ]);
                                }
                            }
                        }
                    }
                }
            }

            if (isset($request->replace_qty) && is_array($request->replace_qty) && count($request->replace_qty) > 0) {
                foreach ($request->replace_qty as $purchase_return_id => $replace_qty) {
                    if ($replace_qty > 0) {
                        $purchaseReturn = PurchaseReturn::find($purchase_return_id);
                        $requisitionItem = $requisitionItems->where('uid', $uid)->first();
                        $goodsReceivedItem = GoodsReceivedItem::create([
                            'goods_received_note_id' => $goodsReceivedNote->id,
                            'uid' => $requisitionItem->uid,
                            'product_id' => $requisitionItem->product_id,
                            'unit_amount' => 0,
                            'qty' => $replace_qty,
                            'sub_total' => 0,
                            'discount_percentage' => 0,
                            'discount' => 0,
                            'vat_percentage' => 0,
                            'vat' => 0,
                            'total_amount' => 0,
                        ]);
                        if ($goodsReceivedItem) {
                            if (isset($requisitionItem->id) && $requisitionItem->attributes->count() > 0) {
                                foreach ($requisitionItem->attributes as $attribute) {
                                    array_push($grnAttributes, [
                                        'goods_received_item_id' => $goodsReceivedItem->id,
                                        'attribute_option_id' => $attribute->attribute_option_id,
                                        'created_by' => auth()->user()->id
                                    ]);
                                }
                            }
                        }
                    }
                }
            }

            if (isset($grnAttributes[0])) {
                GoodsReceivedItemAttribute::insert($grnAttributes);
            }

            if (isset($request->replace_qty) && is_array($request->replace_qty) && count($request->replace_qty) > 0) {
                foreach ($request->replace_qty as $purchase_return_id => $replace_qty) {
                    if ($replace_qty > 0) {
                        $purchaseReturn = PurchaseReturn::find($purchase_return_id);
                        $purchaseReturn->received_qty = ($purchaseReturn->received_qty + $replace_qty);
                        $purchaseReturn->save();
                    }
                }
            } else {
                $result = $this->changeReceiveStatus($request, $goodsReceivedNote);

                if ($result === false) {
                    return $this->backWithWarning('Received qty greater than purchase order qty');
                }
            }

            $message = '<span class="notification-links" data-src="' . route('pms.grn.grn-process.show', $goodsReceivedNote->id) . '?view" data-title="Gate-In Details">Reference No:' . $goodsReceivedNote->reference_no . '. Waiting for the Quality Ensure.</span>';

            $storeManager = getManagerInfo('Store-Manager', $purchaseOrder->hr_unit_id);
            if ($storeManager > 0) {
                CreateOrUpdateNotification($message, 'unread', '', $storeManager, 'send-to-store', '');
            }

            $departmentHead = getDepartmentHeadInfo($purchaseOrder->hr_unit_id, $purchaseOrder->purchaseOrderRequisitions[0]->hr_department_id);
            if ($departmentHead > 0) {
                CreateOrUpdateNotification($message, 'unread', '', $departmentHead, 'send-to-department-head', '');
            }


            DB::commit();
            return $this->redirectBackWithSuccess('Successfully Gate In By Gate Manager.', 'pms.grn.po.list');

        } catch (Exception $e) {
            DB::rollback();
            return $this->backWithError($e->getMessage());
        }

    }

    public function changeReceiveStatus($request, $goodsReceivedNote)
    {

        $purchaseOrder = PurchaseOrder::with('relPurchaseOrderItems')->findOrFail($request->purchase_order_id);

        $totalOrderQty = $purchaseOrder->relPurchaseOrderItems->sum('qty');

        $grns = GoodsReceivedNote::with('relGoodsReceivedItems')
            ->whereIn('purchase_order_id', [$request->purchase_order_id])->get();

        $totalReceiveQty = 0;
        foreach ($grns as $grn) {
            $totalReceiveQty += $grn->relGoodsReceivedItems->sum('qty');
        }

        if ($totalOrderQty < $totalReceiveQty) {
            return false;
        }

        if ($totalOrderQty == $totalReceiveQty) {
            $goodsReceivedNote->update(['received_status' => 'full']);
            return true;
        }
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $response = [];

        try {
            $modal = GoodsReceivedNote::with([
                'relPurchaseOrder.relQuotation.relSuppliers.SupplierRatings',
                'relPurchaseOrder.relQuotation.exchangeRate.currency',
                'relGoodsReceivedItems.relProduct.productUnit',
                'relGoodsReceivedItems.relProduct.category.category',
                'relGoodsReceivedItems.relProduct.attributes.attributeOption.attribute',
                'relGoodsReceivedItems.attributes.attributeOption.attribute',
            ])->findOrFail($id);
            if ($modal) {
                $body = \Illuminate\Support\Facades\View::make('pms.backend.pages.grn.show',
                    ['grn' => $modal]);
                $contents = $body->render();

                if (request()->has('view')) {
                    return $contents;
                }

                $response['result'] = 'success';
                $response['body'] = $contents;
                $response['message'] = 'Successfully Generated PO';
            } else {
                $response['result'] = 'error';
                $response['message'] = 'GRN not found!!';
            }

        } catch (\Throwable $th) {
            $response['result'] = 'error';
            $response['message'] = $th->getMessage();
        }

        return $response;
    }

    public function purchaseOrderListAgainstGrnHeaderColumns($value = '')
    {
        return array(
            ['SL', 'SL', 'text-center'],
            ['PO_date', 'PO_date', 'text-center'],
            ['supplier', 'supplier', 'text-center'],
            ['reference', 'reference', 'text-center'],
            ['PO_qty', 'PO_qty', 'text-right'],
            ['gate_in_qty', 'gate_in_qty', 'text-right'],
            ['receive_status', 'receive_status', 'text-center'],
            ['options', 'options', 'text-center'],
        );
    }

    public function purchaseOrderListAgainstGrn()
    {
        try {
            $purchaseOrdersAgainstGrn = PurchaseOrder::with([
                'relPurchaseOrderItems',
                'relGoodReceiveNote.relGoodsReceivedItems',
                'relQuotation.relSuppliers'
            ])
            ->whereHas('relQuotation.relSuppliers', function($query){
                return $query->whereNotIn('name', ignoreSuppliers());
            })
                ->where('is_send', 'yes')
                ->whereHas('relGoodReceiveNote', function ($query) {
                    $query->whereRaw('purchase_orders.id=goods_received_notes.purchase_order_id');
                })
                ->when(isset(auth()->user()->employee->as_unit_id), function ($query) {
                    return $query->where('hr_unit_id', auth()->user()->employee->as_unit_id);
                })
                ->when(!datatableOrdering(), function ($query) {
                    return $query->orderby('id', 'desc');
                });

            if (request()->ajax()) {
                return DataTables::of($purchaseOrdersAgainstGrn)
                    ->addIndexColumn()
                    ->addColumn('PO_date', function ($po) {
                        return isset($po->po_date) ? date('Y-m-d', strtotime($po->po_date)) : '';
                    })
                    ->filterColumn('PO_date', function ($query, $keyword) {
                        return $query->where('po_date', 'LIKE', '%' . $keyword . '%');
                    })
                    ->addColumn('supplier', function ($po) {
                        return isset($po->relQuotation->relSuppliers->name) ? $po->relQuotation->relSuppliers->name . ' (' . $po->relQuotation->relSuppliers->code . ')' : '';
                    })
                    ->filterColumn('supplier', function ($query, $keyword) {
                        return $query->whereHas('relQuotation.relSuppliers', function ($query) use ($keyword) {
                            return $query->where(function ($query) use ($keyword) {
                                return $query->where('name', 'LIKE', '%' . $keyword . '%')
                                    ->orWhere('code', 'LIKE', '%' . $keyword . '%');
                            });
                        });
                    })
                    ->addColumn('reference', function ($po) {
                        return '<a href="javascript:void(0)" class="btn btn-link" onclick="showPODetails($(this))" data-src="' . route('pms.purchase.order-list.show', $po->id) . '">' . $po->reference_no . '</a>';
                    })
                    ->filterColumn('reference', function ($query, $keyword) {
                        return $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                    })
                    ->addColumn('PO_qty', function ($po) {
                        return $po->relPurchaseOrderItems->sum('qty');
                    })
                    ->addColumn('gate_in_qty', function ($po) {
                        if (isset($po->relGoodReceiveNote[0])) {
                            $po->relGoodReceiveNote->each(function ($item, $i) {
                                $item['grn_qty'] = $item->relGoodsReceivedItems->sum('qty');
                            });
                            return $po->relGoodReceiveNote->sum('grn_qty');
                        }
                    })
                    ->addColumn('receive_status', function ($po) {
                        $total_grn_qty = 0;
                        if (isset($po->relGoodReceiveNote[0])) {
                            $po->relGoodReceiveNote->each(function ($item, $i) {
                                $item['grn_qty'] = $item->relGoodsReceivedItems->sum('qty');
                            });
                            $total_grn_qty = $po->relGoodReceiveNote->sum('grn_qty');
                        }
                        if ($po->relPurchaseOrderItems->sum('qty') == $total_grn_qty) {
                            return '<button class="btn btn-success btn-xs">Full Received</button>';
                        } else {
                            return '<button class="btn btn-warning btn-xs">Partial Received</button>';
                        }
                    })
                    ->addColumn('options', function ($po) {
                        return '<a href="' . route('pms.grn.grn-process.index') . '' . '?po_id=' . $po->id . '" target="_blank" class="btn btn-xs btn-success" data-toggle="tooltip" title="Click here to Grn List" > Gate-In(' . $po->relGoodReceiveNote->count() . ') </a>
                            <a class="btn btn-primary btn-xs" href="' . url('pms/grn/gate-in-slip/' . $po->id) . '" target="_blank"><i class="la la-print"></i></a>';
                    })
                    ->rawColumns(['reference', 'receive_status', 'options'])
                    ->toJson();
            }

            return view('pms.backend.pages.grn.po-list-against-grn', [
                'title' => "Purchase Order List Against GRN",
                'headerColumns' => $this->purchaseOrderListAgainstGrnHeaderColumns()
            ]);
        } catch (\Throwable $th) {
            return $this->backWithWarning($th->getMessage());
        }
    }

    public function sendToRequisitor($poId, $grnId)
    {
        $goodReceivedNote = GoodsReceivedNote::findOrFail($grnId);

        DB::beginTransaction();
        try {

            if ($goodReceivedNote) {
                $goodReceivedNote->is_sent_to_requisitor = 'yes';
                $goodReceivedNote->save();
            }

            DB::commit();
            return response()->json([
                'success' => true,
                'message' => 'QC Permission has been send to requisitor successfully!'
            ]);

        } catch (\Exception $th) {
            DB::rollBack();
            return response()->json([
                'success' => false,
                'message' => $e->getMessage()
            ]);
        }
    }
}
