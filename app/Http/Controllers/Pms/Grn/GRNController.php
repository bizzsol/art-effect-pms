<?php
bolt_decrypt( __FILE__ , '2Olnm0'); return 0;
##!!!##