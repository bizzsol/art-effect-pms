<?php
bolt_decrypt( __FILE__ , 'JNUP9u'); return 0;
##!!!##