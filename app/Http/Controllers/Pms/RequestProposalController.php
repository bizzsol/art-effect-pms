<?php
bolt_decrypt( __FILE__ , 'hHZULU'); return 0;
##!!!##CgpuYW1lc3BhY2UgQXBwXEh0dHBcQ29udHJvbGxlcnNcUG1zOwoKdXNlIEFwcFxIdHRwXENvbnRyb2xsZXJzXENvbnRyb2xsZXI7CnVzZSBBcHBcTWFpbFxQbXNcUmVxdWVzdEZvclByb3Bvc2FsVG9TdXBwbGllck1haWw7CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xDYXRlZ29yeTsKdXNlIEFwcFxNb2RlbHNcUG1zTW9kZWxzXFByb2R1Y3Q7CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xSZXF1aXNpdGlvbjsKdXNlIEFwcFxNb2RlbHNcUG1zTW9kZWxzXFJlcXVpc2l0aW9uSXRlbTsKdXNlIEFwcFxNb2RlbHNcUG1zTW9kZWxzXFJlcXVpc2l0aW9uVHlwZTsKdXNlIEFwcFxNb2RlbHNcUG1zTW9kZWxzXFJmcFxSZXF1ZXN0UHJvcG9zYWw7CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xSZnBcUmVxdWVzdFByb3Bvc2FsQXBwcm92YWw7CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xSZnBcUmVxdWVzdFByb3Bvc2FsRGVmaW5lU3VwcGxpZXI7CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xSZnBcUmVxdWVzdFByb3Bvc2FsRGV0YWlsczsKdXNlIEFwcFxNb2RlbHNcUG1zTW9kZWxzXFF1b3RhdGlvbnM7CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xRdW90YXRpb25zSXRlbXM7CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xQYXltZW50VGVybTsKdXNlIEFwcFxNb2RlbHNcUG1zTW9kZWxzXFN1cHBsaWVyczsKdXNlIEFwcFxNb2RlbHNcUG1zTW9kZWxzXFN1cHBsaWVyUGF5bWVudFRlcm07CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xSZXF1ZXN0UHJvcG9zYWxUcmFja2luZzsKdXNlIEFwcFxNb2RlbHNcUG1zTW9kZWxzXFJlcXVlc3RQcm9wb3NhbFJlcXVpc2l0aW9uczsKdXNlIEFwcFxNb2RlbHNcUG1zTW9kZWxzXFB1cmNoYXNlXFB1cmNoYXNlT3JkZXI7CnVzZSBBcHBcTW9kZWxzXEhyXERlcGFydG1lbnQ7CnVzZSBBcHBcVXNlcjsKCnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xBY2NvdW50c1xDdXJyZW5jeVR5cGU7Cgp1c2UgSWxsdW1pbmF0ZVxIdHRwXFJlcXVlc3Q7CnVzZSBBcHBcSHR0cFxSZXF1ZXN0czsKdXNlIEFwcFxNb2RlbHNcUG1zTW9kZWxzXFJlcXVpc2l0aW9uTm90ZUxvZ3M7CnVzZSBEQiwgVmFsaWRhdG9yLCBBdXRoLCBWaWV3Owp1c2UgSWxsdW1pbmF0ZVxTdXBwb3J0XEZhY2FkZXNcTWFpbDsKdXNlICBVUkwsIERhdGFUYWJsZXM7CgpjbGFzcyBSZXF1ZXN0UHJvcG9zYWxDb250cm9sbGVyIGV4dGVuZHMgQ29udHJvbGxlcgp7CiAgICBwdWJsaWMgZnVuY3Rpb24gaGVhZGVyQ29sdW1ucygkdmFsdWUgPSAnJykKICAgIHsKICAgICAgICByZXR1cm4gYXJyYXkoCiAgICAgICAgICAgIFsnU0wnLCAnU0wnXSwKICAgICAgICAgICAgWydyZWZlcmVuY2Vfbm8nLCAncmVmZXJlbmNlX25vJywgJ3RleHQtY2VudGVyJ10sCiAgICAgICAgICAgIFsncmVxdWlzaXRpb25zJywgJ3JlcXVpc2l0aW9ucycsICd0ZXh0LWNlbnRlciddLAogICAgICAgICAgICBbJ3Byb2R1Y3RzJywgJ3Byb2R1Y3RzJywgJ3RleHQtY2VudGVyJ10sCiAgICAgICAgICAgIFsnc3VwcGxpZXJzJywgJ3N1cHBsaWVycycsICd0ZXh0LWNlbnRlciddLAogICAgICAgICAgICBbJ3JlcXVpc2l0aW9uX2RhdGUnLCAncmVxdWVzdF9kYXRlJywgJ3RleHQtY2VudGVyJ10sCiAgICAgICAgICAgIFsndHlwZScsICd0eXBlJywgJ3RleHQtY2VudGVyJ10sCiAgICAgICAgICAgIFsnY3JlYXRlZF9ieScsICdjcmVhdGVkX2J5JywgJ3RleHQtY2VudGVyJ10sCiAgICAgICAgICAgIFsnYWN0aW9ucycsICdhY3Rpb25zJywgJ3RleHQtY2VudGVyJ10KICAgICAgICApOwogICAgfQoKICAgIC8qKgogICAgICogRGlzcGxheSBhIGxpc3Rpbmcgb2YgdGhlIHJlc291cmNlLgogICAgICoKICAgICAqIEByZXR1cm4gXElsbHVtaW5hdGVcSHR0cFxSZXNwb25zZQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gaW5kZXgoKQogICAgewoKICAgICAgICBpZiAoXHJlcXVlc3QoKS0+aGFzKCdzZW5kLW1haWwnKSl7CiAgICAgICAgICAgICRyZXF1ZXN0UHJvcG9zYWwgPSBSZXF1ZXN0UHJvcG9zYWw6OmZpbmQocmVxdWVzdCgpLT5nZXQoJ3NlbmQtbWFpbCcpKTsKICAgICAgICAgICAgXExvZzo6aW5mbygkcmVxdWVzdFByb3Bvc2FsKTsKICAgICAgICAgICAgaWYgKCRyZXF1ZXN0UHJvcG9zYWwpewogICAgICAgICAgICAgICAgJHN1cHBsaWVySWRzID0gJHJlcXVlc3RQcm9wb3NhbC0+ZGVmaW5lVG9TdXBwbGllcigpLT5wbHVjaygnc3VwcGxpZXJfaWQnKS0+YWxsKCk7CgogICAgICAgICAgICAgICAgJHRoaXMtPm1haWxTZW5kVG9TdXBwbGllcnMoJHJlcXVlc3RQcm9wb3NhbC0+aWQsICRzdXBwbGllcklkcyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuICdkb25lJzsKICAgICAgICB9CgogICAgICAgIHRyeSB7CgogICAgICAgICAgICAkdGl0bGUgPSAnQ1MgTGlzdCc7CgogICAgICAgICAgICAkcHJvcG9zYWxzID0gUmVxdWVzdFByb3Bvc2FsOjp3aGVyZU5vdEluKCdxdW90YXRpb25fZ2VuZXJhdGVfdHlwZScsIFsnY29tcGxldGUnXSkKICAgICAgICAgICAgICAgIC0+d2hlbighYXV0aCgpLT51c2VyKCktPmhhc0FueVJvbGUoWydQdXJjaGFzZS1EZXBhcnRtZW50JywgJ0F1ZGl0JywgJ0JpbGxpbmcnLCAnTWFuYWdlbWVudCcsICdBY2NvdW50cyddKSwgZnVuY3Rpb24gKCRxdWVyeSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlSGFzKCdyZXF1ZXN0UHJvcG9zYWxSZXF1aXNpdGlvbi5yZWxSZXF1aXNpdGlvbicsIGZ1bmN0aW9uICgkcXVlcnkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoJ2Fzc2lnbmVkX3VzZXJfaWQnLCBhdXRoKCktPnVzZXIoKS0+aWQpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC0+d2hlcmVIYXMoJ3JlcXVlc3RQcm9wb3NhbFJlcXVpc2l0aW9uLnJlbFJlcXVpc2l0aW9uJywgZnVuY3Rpb24gKCRxdWVyeSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlSW4oJ2hyX3VuaXRfaWQnLCBhdXRoKCktPnVzZXIoKS0+cHJpb3JpdGllcy0+cGx1Y2soJ2hyX3VuaXRfaWQnKS0+dG9BcnJheSgpKTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAvLyAtPndoZXJlSW4oJ2hyX3VuaXRfaWQnLCBhdXRoKCktPnVzZXIoKS0+cHJpb3JpdGllcy0+cGx1Y2soJ2hyX3VuaXRfaWQnKS0+dG9BcnJheSgpKQogICAgICAgICAgICAgICAgLT53aGVyZUhhcygncmVxdWVzdFByb3Bvc2FsUmVxdWlzaXRpb24ucmVsUmVxdWlzaXRpb24nLCBmdW5jdGlvbiAoJHF1ZXJ5KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoJ2lzX3NlbmRfdG9fcmZwJywgJ3llcycpLT53aGVyZSgnZGVsaXZlcnlfc3RhdHVzJywgJ3JmcCcpOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC0+c2VsZWN0KFsnaWQnXSkKICAgICAgICAgICAgICAgIC0+d2l0aENvdW50KFsnZGVmaW5lVG9TdXBwbGllcicsICdyZWxRdW90YXRpb25zJ10pCiAgICAgICAgICAgICAgICAtPmdldCgpOwoKICAgICAgICAgICAgJHByb3Bvc2FscyA9IGFycmF5X3ZhbHVlcyhhcnJheV9maWx0ZXIoYXJyYXlfbWFwKGZ1bmN0aW9uICgkcHJvcG9zYWwpIHsKICAgICAgICAgICAgICAgIGlmICgkcHJvcG9zYWxbJ2RlZmluZV90b19zdXBwbGllcl9jb3VudCddID4gJHByb3Bvc2FsWydyZWxfcXVvdGF0aW9uc19jb3VudCddKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRwcm9wb3NhbFsnaWQnXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgY29sbGVjdCgkcHJvcG9zYWxzKS0+dG9BcnJheSgpKSkpOwoKICAgICAgICAgICAgJHJlcXVlc3RQcm9wb3NhbHMgPSBSZXF1ZXN0UHJvcG9zYWw6OndpdGgoWwogICAgICAgICAgICAgICAgJ2RlZmluZVRvU3VwcGxpZXIuc3VwcGxpZXInLAogICAgICAgICAgICAgICAgJ3JlcXVlc3RQcm9wb3NhbERldGFpbHMucHJvZHVjdC5hdHRyaWJ1dGVzLmF0dHJpYnV0ZU9wdGlvbi5hdHRyaWJ1dGUnLAogICAgICAgICAgICAgICAgJ2NyZWF0ZWRCeScsCiAgICAgICAgICAgICAgICAncmVsUXVvdGF0aW9ucycsCiAgICAgICAgICAgICAgICAncmVxdWVzdFByb3Bvc2FsUmVxdWlzaXRpb24ucmVsUmVxdWlzaXRpb24nCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAtPndoZXJlSW4oJ2lkJywgJHByb3Bvc2FscykKICAgICAgICAgICAgICAgIC0+d2hlbighZGF0YXRhYmxlT3JkZXJpbmcoKSwgZnVuY3Rpb24gKCRxdWVyeSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPm9yZGVyYnkoJ3JlcXVlc3RfZGF0ZScsICdkZXNjJyk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICRvcHRpb25zID0gWwogICAgICAgICAgICAgICAgJ3F1b3RhdGlvbi1nZW5lcmF0ZScgPT4gYXV0aCgpLT51c2VyKCktPmhhc1Blcm1pc3Npb25UbygncXVvdGF0aW9uLWdlbmVyYXRlJyksCiAgICAgICAgICAgICAgICAncXVvdGF0aW9uLWNvbXBsZXRlJyA9PiBhdXRoKCktPnVzZXIoKS0+aGFzUGVybWlzc2lvblRvKCdxdW90YXRpb24tY29tcGxldGUnKSwKICAgICAgICAgICAgXTsKCiAgICAgICAgICAgIGlmIChyZXF1ZXN0KCktPmFqYXgoKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIERhdGF0YWJsZXM6Om9mKCRyZXF1ZXN0UHJvcG9zYWxzKQogICAgICAgICAgICAgICAgICAgIC0+YWRkSW5kZXhDb2x1bW4oKQogICAgICAgICAgICAgICAgICAgIC0+YWRkQ29sdW1uKCdyZWZlcmVuY2Vfbm8nLCBmdW5jdGlvbiAoJHJlcXVlc3RQcm9wb3NhbCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzxhIG9uY2xpY2s9Im9wZW5Nb2RhbCgnIC4gJHJlcXVlc3RQcm9wb3NhbC0+aWQgLiAnKSIgY2xhc3M9ImJ0biBidG4tbGluayB0ZXh0LXByaW1hcnkiPicgLiAkcmVxdWVzdFByb3Bvc2FsLT5yZWZlcmVuY2Vfbm8gLiAnPC9hPic7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPmZpbHRlckNvbHVtbigncmVmZXJlbmNlX25vJywgZnVuY3Rpb24gKCRxdWVyeSwgJGtleXdvcmQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHF1ZXJ5LT53aGVyZSgncmVmZXJlbmNlX25vJywgJ0xJS0UnLCAnJScgLiAka2V5d29yZCAuICclJyk7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPm9yZGVyQ29sdW1uKCdyZWZlcmVuY2Vfbm8nLCBmdW5jdGlvbiAoJHF1ZXJ5LCAkb3JkZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+b3JkZXJCeSgncmVmZXJlbmNlX25vJywgJG9yZGVyKTsKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIC0+YWRkQ29sdW1uKCdyZXF1aXNpdGlvbnMnLCBmdW5jdGlvbiAoJHJlcXVlc3RQcm9wb3NhbCkgewogICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWlzaXRpb25zID0gJyc7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHJlcXVlc3RQcm9wb3NhbC0+cmVxdWVzdFByb3Bvc2FsUmVxdWlzaXRpb24tPmNvdW50KCkgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkcmVxdWVzdFByb3Bvc2FsLT5yZXF1ZXN0UHJvcG9zYWxSZXF1aXNpdGlvbiBhcyAka2V5ID0+ICRyZXF1aXNpdGlvbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXF1aXNpdGlvbnMgLj0gKCRrZXkgPiAwID8gJywgJyA6ICcnKSAuICc8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGRhdGEtc3JjPSInIC4gcm91dGUoJ3Btcy5yZXF1aXNpdGlvbi5saXN0LnZpZXcuc2hvdycsICRyZXF1aXNpdGlvbi0+cmVsUmVxdWlzaXRpb24tPmlkKSAuICciIGNsYXNzPSJ0ZXh0LXByaW1hcnkgcmVxdWlzaXRpb24gbS0xIHJvdW5kZWQgc2hvd1JlcXVpc3Rpb25EZXRhaWxzIiBvbmNsaWNrPSJyZXF1aXN0aW9uRGV0YWlscygkKHRoaXMpKSI+JyAuICRyZXF1aXNpdGlvbi0+cmVsUmVxdWlzaXRpb24tPnJlZmVyZW5jZV9ubyAuICc8L2E+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRyZXF1aXNpdGlvbnM7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPmZpbHRlckNvbHVtbigncmVxdWlzaXRpb25zJywgZnVuY3Rpb24gKCRxdWVyeSwgJGtleXdvcmQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHF1ZXJ5LT53aGVyZUhhcygncmVxdWVzdFByb3Bvc2FsUmVxdWlzaXRpb24ucmVsUmVxdWlzaXRpb24nLCBmdW5jdGlvbiAoJHF1ZXJ5KSB1c2UgKCRrZXl3b3JkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgncmVmZXJlbmNlX25vJywgJ0xJS0UnLCAnJScgLiAka2V5d29yZCAuICclJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLT5vcmRlckNvbHVtbigncmVxdWlzaXRpb25zJywgZnVuY3Rpb24gKCRxdWVyeSwgJG9yZGVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwbGVhc2VTb3J0TWUoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcXVlcnksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkb3JkZXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZXF1ZXN0UHJvcG9zYWxSZXF1aXNpdGlvbnM6OnNlbGVjdCgncmVxdWlzaXRpb25zLnJlZmVyZW5jZV9ubycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5qb2luKCdyZXF1aXNpdGlvbnMnLCAncmVxdWlzaXRpb25zLmlkJywgJz0nLCAncmVxdWVzdF9wcm9wb3NhbF9yZXF1aXNpdGlvbnMucmVxdWlzaXRpb25faWQnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+d2hlcmVDb2x1bW4oJ3JlcXVlc3RfcHJvcG9zYWxfcmVxdWlzaXRpb25zLnJlcXVlc3RfcHJvcG9zYWxfaWQnLCAncmVxdWVzdF9wcm9wb3NhbHMuaWQnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dGFrZSgxKQogICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLT5hZGRDb2x1bW4oJ3Byb2R1Y3RzJywgZnVuY3Rpb24gKCRyZXF1ZXN0UHJvcG9zYWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHByb2R1Y3RzID0gJyc7CiAgICAgICAgICAgICAgICAgICAgICAgICRzbCA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICRhcnJheSA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHJlcXVlc3RQcm9wb3NhbC0+cmVxdWVzdFByb3Bvc2FsRGV0YWlscy0+Y291bnQoKSA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRyZXF1ZXN0UHJvcG9zYWwtPnJlcXVlc3RQcm9wb3NhbERldGFpbHMgYXMgJGtleSA9PiAkcHJvZHVjdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW5fYXJyYXkoJHByb2R1Y3QtPnByb2R1Y3RfaWQsICRhcnJheSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNsKys7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwcm9kdWN0cyAuPSAoJHNsID4gMSA/ICcsICcgOiAnJykgLiAkcHJvZHVjdC0+cHJvZHVjdC0+bmFtZSAuICcgJyAuIGdldFByb2R1Y3RBdHRyaWJ1dGVzRmFzdGVyKCRwcm9kdWN0LT5wcm9kdWN0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlfcHVzaCgkYXJyYXksICRwcm9kdWN0LT5wcm9kdWN0X2lkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcHJvZHVjdHM7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPmZpbHRlckNvbHVtbigncHJvZHVjdHMnLCBmdW5jdGlvbiAoJHF1ZXJ5LCAka2V5d29yZCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZShmdW5jdGlvbiAoJHF1ZXJ5KSB1c2UgKCRrZXl3b3JkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZShmdW5jdGlvbiAoJHF1ZXJ5KSB1c2UgKCRrZXl3b3JkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmVIYXMoJ3JlcXVlc3RQcm9wb3NhbERldGFpbHMucHJvZHVjdCcsIGZ1bmN0aW9uICgkcXVlcnkpIHVzZSAoJGtleXdvcmQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoJ25hbWUnLCAnTElLRScsICclJyAuICRrZXl3b3JkIC4gJyUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5vcldoZXJlKGZ1bmN0aW9uICgkcXVlcnkpIHVzZSAoJGtleXdvcmQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmVIYXMoJ3JlcXVlc3RQcm9wb3NhbERldGFpbHMucHJvZHVjdC5hdHRyaWJ1dGVzLmF0dHJpYnV0ZU9wdGlvbicsIGZ1bmN0aW9uICgkcXVlcnkpIHVzZSAoJGtleXdvcmQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRxdWVyeS0+d2hlcmUoJ25hbWUnLCAnTElLRScsICclJyAuICRrZXl3b3JkIC4gJyUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+b3JXaGVyZUhhcygncmVxdWVzdFByb3Bvc2FsRGV0YWlscy5wcm9kdWN0LmF0dHJpYnV0ZXMuYXR0cmlidXRlT3B0aW9uLmF0dHJpYnV0ZScsIGZ1bmN0aW9uICgkcXVlcnkpIHVzZSAoJGtleXdvcmQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcXVlcnktPndoZXJlKCduYW1lJywgJ0xJS0UnLCAnJScgLiAka2V5d29yZCAuICclJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPm9yZGVyQ29sdW1uKCdwcm9kdWN0cycsIGZ1bmN0aW9uICgkcXVlcnksICRvcmRlcikgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGxlYXNlU29ydE1lKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHF1ZXJ5LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJG9yZGVyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVxdWVzdFByb3Bvc2FsRGV0YWlsczo6c2VsZWN0KCdwcm9kdWN0cy5uYW1lJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmpvaW4oJ3Byb2R1Y3RzJywgJ3Byb2R1Y3RzLmlkJywgJz0nLCAncmVxdWVzdF9wcm9wb3NhbF9kZXRhaWxzLnByb2R1Y3RfaWQnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+d2hlcmVDb2x1bW4oJ3JlcXVlc3RfcHJvcG9zYWxfZGV0YWlscy5yZXF1ZXN0X3Byb3Bvc2FsX2lkJywgJ3JlcXVlc3RfcHJvcG9zYWxzLmlkJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnRha2UoMSkKICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIC0+YWRkQ29sdW1uKCdzdXBwbGllcnMnLCBmdW5jdGlvbiAoJHJlcXVlc3RQcm9wb3NhbCkgewogICAgICAgICAgICAgICAgICAgICAgICAkc3VwcGxpZXJzID0gJyc7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkcmVxdWVzdFByb3Bvc2FsLT5kZWZpbmVUb1N1cHBsaWVyLT5jb3VudCgpID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJHJlcXVlc3RQcm9wb3NhbC0+ZGVmaW5lVG9TdXBwbGllciBhcyAka2V5ID0+ICRzdXBwbGllcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdXBwbGllcnMgLj0gKCRrZXkgPiAwID8gJywgJyA6ICcnKSAuICRzdXBwbGllci0+c3VwcGxpZXItPm5hbWUgLiAnICgnIC4gJHN1cHBsaWVyLT5zdXBwbGllci0+Y29kZSAuICcpJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHN1cHBsaWVyczsKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIC0+ZmlsdGVyQ29sdW1uKCdzdXBwbGllcnMnLCBmdW5jdGlvbiAoJHF1ZXJ5LCAka2V5d29yZCkgewogICAgICAgICAgICAgICAgICAgICAgICAkcXVlcnktPndoZXJlSGFzKCdkZWZpbmVUb1N1cHBsaWVyLnN1cHBsaWVyJywgZnVuY3Rpb24gKCRxdWVyeSkgdXNlICgka2V5d29yZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoJ25hbWUnLCAnTElLRScsICclJyAuICRrZXl3b3JkIC4gJyUnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+b3JXaGVyZSgnY29kZScsICdMSUtFJywgJyUnIC4gJGtleXdvcmQgLiAnJScpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIC0+b3JkZXJDb2x1bW4oJ3N1cHBsaWVycycsIGZ1bmN0aW9uICgkcXVlcnksICRvcmRlcikgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGxlYXNlU29ydE1lKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHF1ZXJ5LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJG9yZGVyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVxdWVzdFByb3Bvc2FsRGVmaW5lU3VwcGxpZXI6OnNlbGVjdCgnc3VwcGxpZXIubmFtZScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5qb2luKCdzdXBwbGllcnMnLCAnc3VwcGxpZXJzLmlkJywgJz0nLCAncmVxdWVzdF9wcm9wb3NhbF9kZWZpbmVfc3VwcGxpZXJzLnN1cHBsaWVyX2lkJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPndoZXJlQ29sdW1uKCdyZXF1ZXN0X3Byb3Bvc2FsX2RlZmluZV9zdXBwbGllcnMucmVxdWVzdF9wcm9wb3NhbF9pZCcsICdyZXF1ZXN0X3Byb3Bvc2Fscy5pZCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT50YWtlKDEpCiAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPmVkaXRDb2x1bW4oJ3JlcXVpc2l0aW9uX2RhdGUnLCBmdW5jdGlvbiAoJHJlcXVlc3RQcm9wb3NhbCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZSgnWS1tLWQnLCBzdHJ0b3RpbWUoJHJlcXVlc3RQcm9wb3NhbC0+cmVxdWVzdF9kYXRlKSk7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPmZpbHRlckNvbHVtbigncmVxdWlzaXRpb25fZGF0ZScsIGZ1bmN0aW9uICgkcXVlcnksICRrZXl3b3JkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRxdWVyeS0+d2hlcmUoJ3JlcXVlc3RfZGF0ZScsICdMSUtFJywgJyUnIC4gJGtleXdvcmQgLiAnJScpOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLT5vcmRlckNvbHVtbigncmVxdWlzaXRpb25fZGF0ZScsIGZ1bmN0aW9uICgkcXVlcnksICRvcmRlcikgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT5vcmRlckJ5KCdyZXF1ZXN0X2RhdGUnLCAkb3JkZXIpOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLT5hZGRDb2x1bW4oJ2NyZWF0ZWRfYnknLCBmdW5jdGlvbiAoJHJlcXVlc3RQcm9wb3NhbCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNzZXQoJHJlcXVlc3RQcm9wb3NhbC0+Y3JlYXRlZEJ5LT5uYW1lKSA/ICRyZXF1ZXN0UHJvcG9zYWwtPmNyZWF0ZWRCeS0+bmFtZSA6ICcnOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLT5maWx0ZXJDb2x1bW4oJ2NyZWF0ZWRfYnknLCBmdW5jdGlvbiAoJHF1ZXJ5LCAka2V5d29yZCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZUhhcygnY3JlYXRlZEJ5JywgZnVuY3Rpb24gKCRxdWVyeSkgdXNlICgka2V5d29yZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHF1ZXJ5LT53aGVyZSgnbmFtZScsICdMSUtFJywgJyUnIC4gJGtleXdvcmQgLiAnJScpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIC0+b3JkZXJDb2x1bW4oJ2NyZWF0ZWRfYnknLCBmdW5jdGlvbiAoJHF1ZXJ5LCAkb3JkZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBsZWFzZVNvcnRNZSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRxdWVyeSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRvcmRlciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVzZXI6OnNlbGVjdCgnbmFtZScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT53aGVyZUNvbHVtbigndXNlcnMuaWQnLCAncmVxdWVzdF9wcm9wb3NhbHMuY3JlYXRlZF9ieScpCiAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPmFkZENvbHVtbignYWN0aW9ucycsIGZ1bmN0aW9uICgkcmVxdWVzdFByb3Bvc2FsKSB1c2UgKCRvcHRpb25zKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRhY3Rpb25zID0gJyc7CiAgICAgICAgICAgICAgICAgICAgICAgICRhY3Rpb25zIC49ICc8ZGl2IGNsYXNzPSJidG4tZ3JvdXAiPjxidXR0b24gY2xhc3M9ImJ0biBkcm9wZG93bi10b2dnbGUiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9InN0YXR1c05hbWUiPjxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB3aWR0aD0iMTYiIGhlaWdodD0iMTYiIGZpbGw9ImN1cnJlbnRDb2xvciIgY2xhc3M9ImJpIGJpLXRocmVlLWRvdHMtdmVydGljYWwiIHZpZXdCb3g9IjAgMCAxNiAxNiI+PHBhdGggZD0iTTkuNSAxM2ExLjUgMS41IDAgMSAxLTMgMCAxLjUgMS41IDAgMCAxIDMgMHptMC01YTEuNSAxLjUgMCAxIDEtMyAwIDEuNSAxLjUgMCAwIDEgMyAwem0wLTVhMS41IDEuNSAwIDEgMS0zIDAgMS41IDEuNSAwIDAgMSAzIDB6Ii8+PC9zdmc+PC9zcGFuPjwvYnV0dG9uPjx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+JzsKCiAgICAgICAgICAgICAgICAgICAgICAgICRyZXF1aXNpdGlvbklkID0gJHJlcXVlc3RQcm9wb3NhbC0+cmVxdWVzdFByb3Bvc2FsUmVxdWlzaXRpb24tPmZpcnN0KCktPnJlcXVpc2l0aW9uX2lkOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRyZXF1aXNpdGlvbklkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYWN0aW9ucyAuPSAnPGxpPjxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgdGl0bGU9IlRyYWNrIFByb2dyZXNzIgogICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRyYWNraW5nUmVxdWlzdGlvblN0YXR1cyIgb25jbGljaz0idHJhY2tSZXF1aXNpdGlvblByb2dyZXNzKCQodGhpcykpIiBkYXRhLWlkPSInIC4gJHJlcXVpc2l0aW9uSWQgLiAnIj48aSBjbGFzcz0ibGEgbGEtbWFwIj48L2k+VHJhY2sgUHJvZ3Jlc3M8L2E+PC9saT4nOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJG9wdGlvbnNbJ3F1b3RhdGlvbi1nZW5lcmF0ZSddKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYWN0aW9ucyAuPSAnPGxpPjxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSInIC4gcm91dGUoJ3Btcy5yZnAucXVvdGF0aW9ucy5nZW5lcmF0ZScsICRyZXF1ZXN0UHJvcG9zYWwtPmlkKSAuICciPjxpIGNsYXNzPSJsYXMgbGEtcGx1cyI+PC9pPiBDUyBHZW5lcmF0ZTwvYT48L2xpPic7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkcmVxdWVzdFByb3Bvc2FsLT5yZWxRdW90YXRpb25zLT5jb3VudCgpID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRvcHRpb25zWydxdW90YXRpb24tY29tcGxldGUnXSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhY3Rpb25zIC49ICc8bGk+PGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBvbmNsaWNrPSJjb21wbGV0ZVFHKCQodGhpcykpIiBjbGFzcz0iY29tcGxldGVRRyIgZGF0YS1zcmM9IicgLiByb3V0ZSgncG1zLnJmcC5nZW5lcmF0ZS5jb21wbGV0ZScpIC4gJyIgZGF0YS1pZD0nIC4gJHJlcXVlc3RQcm9wb3NhbC0+aWQgLiAnPjxpIGNsYXNzPSJsYXMgbGEtY2hlY2stY2lyY2xlIj48L2k+IENvbXBsZXRlPC9hPjwvbGk+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICRhY3Rpb25zIC49JzxsaT48YSB0YXJnZXQ9Il9fYmxhbmsiIGhyZWY9Iicucm91dGUoJ3Btcy5yZnAucmVxdWVzdC1wcm9wb3NhbC5lZGl0JywkcmVxdWVzdFByb3Bvc2FsLT5pZCkuJyI+PGkgY2xhc3M9ImxhcyBsYS1lZGl0Ij48L2k+IFJGUCBSZXZpc2U8L2E+PC9saT4nOwogICAgICAgICAgICAgICAgICAgICAgICAvLyB9CgogICAgICAgICAgICAgICAgICAgICAgICAkYWN0aW9ucyAuPSAnPGxpPjxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSInIC4gcm91dGUoJ3Btcy5yZnAuaGlzdG9yeScsICRyZXF1ZXN0UHJvcG9zYWwtPmlkKSAuICciPjxpIGNsYXNzPSJsYXMgbGEtaGlzdG9yeSI+PC9pPiBDUyBIaXN0b3J5PC9hPjwvbGk+JzsKCiAgICAgICAgICAgICAgICAgICAgICAgICRhY3Rpb25zIC49ICc8L3VsPjwvZGl2Pic7CgogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJGFjdGlvbnM7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPnJhd0NvbHVtbnMoWydyZWZlcmVuY2Vfbm8nLCAncmVxdWlzaXRpb25zJywgJ3JlcXVpc2l0aW9uX2RhdGUnLCAnY3JlYXRlZF9ieScsICdhY3Rpb25zJ10pCiAgICAgICAgICAgICAgICAgICAgLT5tYWtlKHRydWUpOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gdmlldygncG1zLmJhY2tlbmQucGFnZXMucmZwLmluZGV4JywgWwogICAgICAgICAgICAgICAgJ3RpdGxlJyA9PiAkdGl0bGUsCiAgICAgICAgICAgICAgICAnaGVhZGVyQ29sdW1ucycgPT4gJHRoaXMtPmhlYWRlckNvbHVtbnMoKQogICAgICAgICAgICBdKTsKICAgICAgICB9IGNhdGNoIChcVGhyb3dhYmxlICR0aCkgewogICAgICAgICAgICByZXR1cm4gJHRoaXMtPmJhY2tXaXRoRXJyb3IoJHRoLT5nZXRNZXNzYWdlKCkpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIERpc3BsYXkgYSBsaXN0aW5nIG9mIHRoZSByZXNvdXJjZS4KICAgICAqCiAgICAgKiBAcmV0dXJuIFxJbGx1bWluYXRlXEh0dHBcUmVzcG9uc2UKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIHJlcUhlYWRlckNvbHVtbnMoJHZhbHVlID0gJycpCiAgICB7CiAgICAgICAgJHJvdyA9IGFycmF5KAogICAgICAgICAgICBbJ1NMJywgJ1NMJywgJycsICd3aWR0aDo1JSddLAogICAgICAgICAgICBbJ3VuaXQnLCAndW5pdCcsICd0ZXh0LWNlbnRlciddLAogICAgICAgICAgICBbJ3JlZmVyZW5jZV9ubycsICdyZWZlcmVuY2Vfbm8nLCAndGV4dC1jZW50ZXInLCAnd2lkdGg6MjAlJ10sCiAgICAgICAgICAgIC8vWydyZXF1aXNpdGlvbl9kYXRlJywgJ3JlcXVpc2l0aW9uX2RhdGUnLCAndGV4dC1jZW50ZXInXSwKICAgICAgICAgICAgWydhcHByb3Zlcl9kYXRlJywgJ2FwcHJvdmVyX2RhdGUnLCAndGV4dC1jZW50ZXInXSwKICAgICAgICAgICAgWydwcm9kdWN0X2NhdGVnb3J5JywgJ3Byb2R1Y3RfY2F0ZWdvcnknLCAndGV4dC1jZW50ZXInXSwKICAgICAgICAgICAgWydkZXBhcnRtZW50JywgJ2RlcGFydG1lbnQnLCAndGV4dC1jZW50ZXInXSwKICAgICAgICAgICAgWydyZXF1aXNpdGlvbl9ieScsICdyZXF1aXNpdGlvbl9ieScsICd0ZXh0LWNlbnRlciddLAogICAgICAgICAgICBbJ2F0dGFjaG1lbnQnLCAnYXR0YWNobWVudCcsICd0ZXh0LWNlbnRlciddLAogICAgICAgICAgICBbJ3N0b3JlX21lc3NhZ2UnLCAnc3RvcmVfbWVzc2FnZScsICd0ZXh0LWNlbnRlciddLAogICAgICAgICAgICBbJ3NhbGVhYmxlJywgJ3NhbGVhYmxlJywgJ3RleHQtY2VudGVyJ10sCiAgICAgICAgICAgIFsnYXNzaWduZWRfcGVyc29uJywgJ2Fzc2lnbmVkX3BlcnNvbicsICd0ZXh0LWNlbnRlciddLAogICAgICAgICAgICBbJ2FjdGlvbnMnLCAnYWN0aW9ucycsICd0ZXh0LWNlbnRlcicsICd3aWR0aDoxNSUnXQogICAgICAgICk7CgogICAgICAgIGlmIChhdXRoKCktPnVzZXIoKS0+aGFzUm9sZSgnRW1wbG95ZWUnKSB8fCBhdXRoKCktPnVzZXIoKS0+aGFzUm9sZSgnRGVwYXJ0bWVudC1IZWFkJykgfHwgYXV0aCgpLT51c2VyKCktPmhhc1JvbGUoJ1B1cmNoYXNlLURlcGFydG1lbnQnKSkgewogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHVuc2V0KCRyb3dbN10pOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICRyb3c7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIHJlcXVpc2l0aW9uSW5kZXgoKQogICAgewoKICAgICAgICBpZiAocmVxdWVzdCgpLT5oYXMoJ2Fzc2lnbi1wZXJzb24nKSkgewogICAgICAgICAgICAkcmVxdWlzaXRpb24gPSBSZXF1aXNpdGlvbjo6ZmluZE9yRmFpbChyZXF1ZXN0KCktPmdldCgncmVxdWlzaXRpb25faWQnKSk7CiAgICAgICAgICAgIHJldHVybiB2aWV3KCdwbXMuYmFja2VuZC5wYWdlcy5yZnAuYXNzaWduLXBlcnNvbicsIFsKICAgICAgICAgICAgICAgICdyZXF1aXNpdGlvbicgPT4gJHJlcXVpc2l0aW9uLAogICAgICAgICAgICAgICAgJ3VzZXJzJyA9PiBVc2VyOjpyb2xlKFsnUHVyY2hhc2UtRGVwYXJ0bWVudCcsICdQdXJjaGFzZS1FbXBsb3llZSddKQogICAgICAgICAgICAgICAgICAgIC0+d2hlcmVIYXMoJ3ByaW9yaXRpZXMnLCBmdW5jdGlvbiAoJHF1ZXJ5KSB1c2UgKCRyZXF1aXNpdGlvbikgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgnaHJfdW5pdF9pZCcsICRyZXF1aXNpdGlvbi0+aHJfdW5pdF9pZCk7CiAgICAgICAgICAgICAgICAgICAgfSktPmdldCgpCiAgICAgICAgICAgIF0pOwogICAgICAgIH0KCiAgICAgICAgaWYgKHJlcXVlc3QoKS0+aGFzKCdzZW5kLXRvLXJmcCcpKSB7CiAgICAgICAgICAgICRyZXF1aXNpdGlvbiA9IFJlcXVpc2l0aW9uOjpmaW5kT3JGYWlsKHJlcXVlc3QoKS0+Z2V0KCdyZXF1aXNpdGlvbl9pZCcpKTsKICAgICAgICAgICAgcmV0dXJuIHZpZXcoJ3Btcy5iYWNrZW5kLnBhZ2VzLnJmcC5hc3NpZ24tcGVyc29uLWZvci1yZXF1aXNpdGlvbicsIFsKICAgICAgICAgICAgICAgICdyZXF1aXNpdGlvbicgPT4gJHJlcXVpc2l0aW9uLAogICAgICAgICAgICAgICAgJ3VzZXJzJyA9PiBVc2VyOjpyb2xlKFsnUHVyY2hhc2UtRGVwYXJ0bWVudCcsICdQdXJjaGFzZS1FbXBsb3llZSddKQogICAgICAgICAgICAgICAgICAgIC0+d2hlcmVIYXMoJ3ByaW9yaXRpZXMnLCBmdW5jdGlvbiAoJHF1ZXJ5KSB1c2UgKCRyZXF1aXNpdGlvbikgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgnaHJfdW5pdF9pZCcsICRyZXF1aXNpdGlvbi0+aHJfdW5pdF9pZCk7CiAgICAgICAgICAgICAgICAgICAgfSktPmdldCgpCiAgICAgICAgICAgIF0pOwogICAgICAgIH0KCiAgICAgICAgJHRpdGxlID0gJ0NTIFJlcXVpc2l0aW9uIExpc3QnOwogICAgICAgICRmcm9tID0gcmVxdWVzdCgpLT5oYXMoJ2Zyb20nKSA/IHJlcXVlc3QoKS0+Z2V0KCdmcm9tJykgOiAwOwogICAgICAgICR0byA9IHJlcXVlc3QoKS0+aGFzKCd0bycpID8gcmVxdWVzdCgpLT5nZXQoJ3RvJykgOiAwOwogICAgICAgICRjYXRlZ29yeV9pZCA9IHJlcXVlc3QoKS0+aGFzKCdjYXRlZ29yeV9pZCcpID8gcmVxdWVzdCgpLT5nZXQoJ2NhdGVnb3J5X2lkJykgOiAwOwogICAgICAgICRkZXBhcnRtZW50X2lkID0gcmVxdWVzdCgpLT5oYXMoJ2RlcGFydG1lbnRfaWQnKSA/IHJlcXVlc3QoKS0+Z2V0KCdkZXBhcnRtZW50X2lkJykgOiAwOwogICAgICAgICRyZXF1aXNpdGlvbl9ieSA9IHJlcXVlc3QoKS0+aGFzKCdyZXF1aXNpdGlvbl9ieScpID8gcmVxdWVzdCgpLT5nZXQoJ3JlcXVpc2l0aW9uX2J5JykgOiAwOwoKICAgICAgICAkY2F0ZWdvcmllcyA9IENhdGVnb3J5Ojpkb2VzbnRIYXZlKCdjYXRlZ29yeScpCiAgICAgICAgICAgIC0+Z2V0KCk7CgogICAgICAgICRkZXBhcnRtZW50cyA9IFJlcXVpc2l0aW9uOjpqb2luKCd1c2VycycsICd1c2Vycy5pZCcsICc9JywgJ3JlcXVpc2l0aW9ucy5hdXRob3JfaWQnKQogICAgICAgICAgICAtPmpvaW4oJ2hyX2FzX2Jhc2ljX2luZm8nLCAnaHJfYXNfYmFzaWNfaW5mby5hc3NvY2lhdGVfaWQnLCAnPScsICd1c2Vycy5hc3NvY2lhdGVfaWQnKQogICAgICAgICAgICAtPmpvaW4oJ2hyX2RlcGFydG1lbnQnLCAnaHJfZGVwYXJ0bWVudC5ocl9kZXBhcnRtZW50X2lkJywgJz0nLCAnaHJfYXNfYmFzaWNfaW5mby5hc19kZXBhcnRtZW50X2lkJykKICAgICAgICAgICAgLT5ncm91cEJ5KCdocl9kZXBhcnRtZW50LmhyX2RlcGFydG1lbnRfaWQnKQogICAgICAgICAgICAtPndoZXJlKGZ1bmN0aW9uICgkcXVlcnkpIHsKICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlKFsKICAgICAgICAgICAgICAgICAgICAnc3RhdHVzJyA9PiAxLAogICAgICAgICAgICAgICAgICAgICdhcHByb3ZlZF9pZCcgPT4gMSwKICAgICAgICAgICAgICAgICAgICAnaXNfc2VuZF90b19yZnAnID0+ICd5ZXMnLAogICAgICAgICAgICAgICAgICAgICdkZWxpdmVyeV9zdGF0dXMnID0+ICdwcm9jZXNzaW5nJywKICAgICAgICAgICAgICAgICAgICAnaXNfcG9fZ2VuZXJhdGUnID0+ICdubycsCiAgICAgICAgICAgICAgICBdKS0+b3JXaGVyZSgncmVxdWVzdF9zdGF0dXMnLCAncmZwJyk7CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIC0+Z2V0KFsKICAgICAgICAgICAgICAgICdocl9kZXBhcnRtZW50LmhyX2RlcGFydG1lbnRfaWQnLAogICAgICAgICAgICAgICAgJ2hyX2RlcGFydG1lbnQuaHJfZGVwYXJ0bWVudF9uYW1lJwogICAgICAgICAgICBdKTsKCiAgICAgICAgJHVzZXJMaXN0ID0gUmVxdWlzaXRpb246OmpvaW4oJ3VzZXJzJywgJ3VzZXJzLmlkJywgJz0nLCAncmVxdWlzaXRpb25zLmF1dGhvcl9pZCcpCiAgICAgICAgICAgIC0+Z3JvdXBCeSgncmVxdWlzaXRpb25zLmF1dGhvcl9pZCcpCiAgICAgICAgICAgIC0+d2hlcmUoZnVuY3Rpb24gKCRxdWVyeSkgewogICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoWwogICAgICAgICAgICAgICAgICAgICdyZXF1aXNpdGlvbnMuc3RhdHVzJyA9PiAxLAogICAgICAgICAgICAgICAgICAgICdyZXF1aXNpdGlvbnMuYXBwcm92ZWRfaWQnID0+IDEsCiAgICAgICAgICAgICAgICAgICAgJ3JlcXVpc2l0aW9ucy5pc19zZW5kX3RvX3JmcCcgPT4gJ3llcycsCiAgICAgICAgICAgICAgICAgICAgJ3JlcXVpc2l0aW9ucy5kZWxpdmVyeV9zdGF0dXMnID0+ICdwcm9jZXNzaW5nJywKICAgICAgICAgICAgICAgICAgICAncmVxdWlzaXRpb25zLmlzX3BvX2dlbmVyYXRlJyA9PiAnbm8nCiAgICAgICAgICAgICAgICBdKS0+b3JXaGVyZSgncmVxdWlzaXRpb25zLnJlcXVlc3Rfc3RhdHVzJywgJ3JmcCcpOwogICAgICAgICAgICB9KQogICAgICAgICAgICAtPmdldChbJ3VzZXJzLmlkJywgJ3VzZXJzLm5hbWUnXSk7CgogICAgICAgIHRyeSB7CgogICAgICAgICAgICAkcmVxdWlzaXRpb25zID0gUmVxdWlzaXRpb246OndpdGgoWwogICAgICAgICAgICAgICAgJ3VuaXQnLAogICAgICAgICAgICAgICAgJ2l0ZW1zLnByb2R1Y3QuY2F0ZWdvcnkuY2F0ZWdvcnknLAogICAgICAgICAgICAgICAgJ3JlbFVzZXJzTGlzdC5lbXBsb3llZS51bml0JywKICAgICAgICAgICAgICAgICdhc3NpZ25lZFBlcnNvbicKICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIC0+d2hlbihzdHJ0b3RpbWUoJGZyb20pID4gMCwgZnVuY3Rpb24gKCRxdWVyeSkgdXNlICgkZnJvbSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlRGF0ZSgncmVxdWlzaXRpb25fZGF0ZScsICc+PScsICRmcm9tKTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAtPndoZW4oc3RydG90aW1lKCR0bykgPiAwLCBmdW5jdGlvbiAoJHF1ZXJ5KSB1c2UgKCR0bykgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlRGF0ZSgncmVxdWlzaXRpb25fZGF0ZScsICc8PScsICR0byk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLT53aGVuKCRkZXBhcnRtZW50X2lkID4gMCwgZnVuY3Rpb24gKCRxdWVyeSkgdXNlICgkZGVwYXJ0bWVudF9pZCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlSGFzKCdyZWxVc2Vyc0xpc3QuZW1wbG95ZWUnLCBmdW5jdGlvbiAoJHF1ZXJ5KSB1c2UgKCRkZXBhcnRtZW50X2lkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlKCdhc19kZXBhcnRtZW50X2lkJywgJGRlcGFydG1lbnRfaWQpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC0+d2hlbigkcmVxdWlzaXRpb25fYnkgPiAwLCBmdW5jdGlvbiAoJHF1ZXJ5KSB1c2UgKCRyZXF1aXNpdGlvbl9ieSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlKCdhdXRob3JfaWQnLCAkcmVxdWlzaXRpb25fYnkpOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC0+d2hlbigkY2F0ZWdvcnlfaWQgPiAwLCBmdW5jdGlvbiAoJHF1ZXJ5KSB1c2UgKCRjYXRlZ29yeV9pZCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlSGFzKCdpdGVtcy5wcm9kdWN0LmNhdGVnb3J5LmNhdGVnb3J5JywgZnVuY3Rpb24gKCRxdWVyeSkgdXNlICgkY2F0ZWdvcnlfaWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoJ2lkJywgJGNhdGVnb3J5X2lkKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAtPndoZXJlKGZ1bmN0aW9uICgkcXVlcnkpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZShbCiAgICAgICAgICAgICAgICAgICAgICAgICdzdGF0dXMnID0+IDEsCiAgICAgICAgICAgICAgICAgICAgICAgICdhcHByb3ZlZF9pZCcgPT4gMSwKICAgICAgICAgICAgICAgICAgICAgICAgJ2lzX3NlbmRfdG9fcmZwJyA9PiAneWVzJywKICAgICAgICAgICAgICAgICAgICAgICAgJ2RlbGl2ZXJ5X3N0YXR1cycgPT4gJ3Byb2Nlc3NpbmcnLAogICAgICAgICAgICAgICAgICAgICAgICAnaXNfcG9fZ2VuZXJhdGUnID0+ICdubycsCiAgICAgICAgICAgICAgICAgICAgXSktPm9yV2hlcmUoJ3JlcXVlc3Rfc3RhdHVzJywgJ3JmcCcpOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC0+d2hlcmVJbignaHJfdW5pdF9pZCcsIGF1dGgoKS0+dXNlcigpLT5wcmlvcml0aWVzLT5wbHVjaygnaHJfdW5pdF9pZCcpLT50b0FycmF5KCkpCiAgICAgICAgICAgICAgICAvLyAtPndoZW4oYXV0aCgpLT51c2VyKCktPmhhc1JvbGUoJ1B1cmNoYXNlLUVtcGxveWVlJyksIGZ1bmN0aW9uKCRxdWVyeSkgewogICAgICAgICAgICAgICAgLy8gICAgIHJldHVybiAkcXVlcnktPndoZXJlKCdhc3NpZ25lZF91c2VyX2lkJywgYXV0aCgpLT5pZCgpKTsKICAgICAgICAgICAgICAgIC8vIH0pCgogICAgICAgICAgICAgICAgLT53aGVuKAogICAgICAgICAgICAgICAgICAgIGF1dGgoKS0+dXNlcigpLT5yb2xlcy0+Y291bnQoKSA9PT0gMQogICAgICAgICAgICAgICAgICAgICYmIGF1dGgoKS0+dXNlcigpLT5oYXNSb2xlKCdQdXJjaGFzZS1FbXBsb3llZScpLAogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkcXVlcnkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoJ2Fzc2lnbmVkX3VzZXJfaWQnLCBhdXRoKCktPmlkKCkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC8vb2xkIHNvcnRpbmcgY29kZQovLyAgICAgICAgICAgICAgICAtPndoZW4oIWRhdGF0YWJsZU9yZGVyaW5nKCksIGZ1bmN0aW9uICgkcXVlcnkpIHsKLy8gICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPm9yZGVyYnkoJ3JlZmVyZW5jZV9ubycsICdkZXNjJyk7Ci8vICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgLT53aGVuKCFkYXRhdGFibGVPcmRlcmluZygpLCBmdW5jdGlvbiAoJHF1ZXJ5KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+b3JkZXJieSgnYXBwcm92ZXJfZGF0ZScsICdkZXNjJyk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGlmIChyZXF1ZXN0KCktPmFqYXgoKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIERhdGF0YWJsZXM6Om9mKCRyZXF1aXNpdGlvbnMpCiAgICAgICAgICAgICAgICAgICAgLT5hZGRJbmRleENvbHVtbigpCiAgICAgICAgICAgICAgICAgICAgLT5lZGl0Q29sdW1uKCdyZWZlcmVuY2Vfbm8nLCBmdW5jdGlvbiAoJHZhbHVlcykgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgZGF0YS1zcmM9IicgLiByb3V0ZSgncG1zLnJlcXVpc2l0aW9uLmxpc3Qudmlldy5zaG93JywgJHZhbHVlcy0+aWQpIC4gJyIgY2xhc3M9ImJ0biBidG4tbGluayByZXF1aXNpdGlvbiBtLTEgcm91bmRlZCBzaG93UmVxdWlzdGlvbkRldGFpbHMiIG9uY2xpY2s9InJlcXVpc3Rpb25EZXRhaWxzKCQodGhpcykpIj4nIC4gJHZhbHVlcy0+cmVmZXJlbmNlX25vIC4gJzwvYT4nOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgb25jbGljaz0ib3Blbk1vZGFsKCcgLiAkdmFsdWVzLT5pZCAuICcpIiAgY2xhc3M9ImJ0biBidG4tbGluayI+JyAuICR2YWx1ZXMtPnJlZmVyZW5jZV9ubyAuICc8L2E+JzsKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIC0+ZWRpdENvbHVtbigncmVxdWlzaXRpb25fZGF0ZScsIGZ1bmN0aW9uICgkdmFsdWVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRlKCdZLW0tZCcsIHN0cnRvdGltZSgkdmFsdWVzLT5yZXF1aXNpdGlvbl9kYXRlKSk7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPmZpbHRlckNvbHVtbigncmVxdWlzaXRpb25fZGF0ZScsIGZ1bmN0aW9uICgkcXVlcnksICRrZXl3b3JkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRxdWVyeS0+d2hlcmUoJ3JlcXVpc2l0aW9uX2RhdGUnLCAnTElLRScsICclJyAuICRrZXl3b3JkIC4gJyUnKTsKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIC0+b3JkZXJDb2x1bW4oJ3JlcXVpc2l0aW9uX2RhdGUnLCBmdW5jdGlvbiAoJHF1ZXJ5LCAkb3JkZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+b3JkZXJCeSgncmVxdWlzaXRpb25fZGF0ZScsICRvcmRlcik7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPmFkZENvbHVtbignYXBwcm92ZXJfZGF0ZScsIGZ1bmN0aW9uICgkcmVxdWlzaXRpb24pIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRyZXF1aXNpdGlvbi0+YXBwcm92ZXJfZGF0ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBkYXRlKCdZLW0tZCcsIHN0cnRvdGltZSgkcmVxdWlzaXRpb24tPmFwcHJvdmVyX2RhdGUpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLT5maWx0ZXJDb2x1bW4oJ2FwcHJvdmVyX2RhdGUnLCBmdW5jdGlvbiAoJHF1ZXJ5LCAka2V5d29yZCkgewogICAgICAgICAgICAgICAgICAgICAgICAkcXVlcnktPndoZXJlKCdhcHByb3Zlcl9kYXRlJywgJ0xJS0UnLCAnJScgLiAka2V5d29yZCAuICclJyk7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPm9yZGVyQ29sdW1uKCdhcHByb3Zlcl9kYXRlJywgZnVuY3Rpb24gKCRxdWVyeSwgJG9yZGVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPm9yZGVyQnkoJ2FwcHJvdmVyX2RhdGUnLCAkb3JkZXIpOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLT5hZGRDb2x1bW4oJ3Byb2R1Y3RfY2F0ZWdvcnknLCBmdW5jdGlvbiAoJHZhbHVlcykgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNzZXQoJHZhbHVlcy0+aXRlbXNbMF0tPnByb2R1Y3QtPmNhdGVnb3J5LT5jYXRlZ29yeS0+bmFtZSkgPyAkdmFsdWVzLT5pdGVtc1swXS0+cHJvZHVjdC0+Y2F0ZWdvcnktPmNhdGVnb3J5LT5uYW1lIDogJyc7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPmZpbHRlckNvbHVtbigncHJvZHVjdF9jYXRlZ29yeScsIGZ1bmN0aW9uICgkcXVlcnksICRrZXl3b3JkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlSGFzKCdpdGVtcy5wcm9kdWN0LmNhdGVnb3J5LmNhdGVnb3J5JywgZnVuY3Rpb24gKCRxdWVyeSkgdXNlICgka2V5d29yZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHF1ZXJ5LT53aGVyZSgnbmFtZScsICdMSUtFJywgJyUnIC4gJGtleXdvcmQgLiAnJScpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIC0+b3JkZXJDb2x1bW4oJ3Byb2R1Y3RfY2F0ZWdvcnknLCBmdW5jdGlvbiAoJHF1ZXJ5LCAkb3JkZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBsZWFzZVNvcnRNZSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRxdWVyeSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRvcmRlciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlcXVpc2l0aW9uSXRlbTo6c2VsZWN0KCdtYWluX2NhdGVnb3J5Lm5hbWUnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+am9pbigncHJvZHVjdHMnLCAncHJvZHVjdHMuaWQnLCAnPScsICdyZXF1aXNpdGlvbl9pdGVtcy5wcm9kdWN0X2lkJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmpvaW4oJ2NhdGVnb3JpZXMgYXMgc3ViX2NhdGVnb3J5JywgJ3N1Yl9jYXRlZ29yeS5pZCcsICc9JywgJ3Byb2R1Y3RzLmNhdGVnb3J5X2lkJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmpvaW4oJ2NhdGVnb3JpZXMgYXMgbWFpbl9jYXRlZ29yeScsICdtYWluX2NhdGVnb3J5LmlkJywgJz0nLCAnc3ViX2NhdGVnb3J5LnBhcmVudF9pZCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT53aGVyZUNvbHVtbigncmVxdWlzaXRpb25faXRlbXMucmVxdWlzaXRpb25faWQnLCAncmVxdWlzaXRpb25zLmlkJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnRha2UoMSkKICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIC0+YWRkQ29sdW1uKCd1bml0JywgZnVuY3Rpb24gKCR2YWx1ZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICR2YWx1ZXMtPnVuaXQtPmhyX3VuaXRfc2hvcnRfbmFtZTsKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIC0+ZmlsdGVyQ29sdW1uKCd1bml0JywgZnVuY3Rpb24gKCRxdWVyeSwgJGtleXdvcmQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmVIYXMoJ3VuaXQnLCBmdW5jdGlvbiAoJHF1ZXJ5KSB1c2UgKCRrZXl3b3JkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcXVlcnktPndoZXJlKCdocl91bml0X3Nob3J0X25hbWUnLCAnTElLRScsICclJyAuICRrZXl3b3JkIC4gJyUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPm9yZGVyQ29sdW1uKCd1bml0JywgZnVuY3Rpb24gKCRxdWVyeSwgJG9yZGVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwbGVhc2VTb3J0TWUoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcXVlcnksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkb3JkZXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBVbml0OjpzZWxlY3QoJ2hyX3VuaXQuaHJfdW5pdF9zaG9ydF9uYW1lJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPndoZXJlQ29sdW1uKCdocl91bml0LmhyX3VuaXRfaWQnLCAncmVxdWlzaXRpb25zLmhyX3VuaXRfaWQnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dGFrZSgxKQogICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLT5hZGRDb2x1bW4oJ2RlcGFydG1lbnQnLCBmdW5jdGlvbiAoJHZhbHVlcykgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNzZXQoJHZhbHVlcy0+cmVsVXNlcnNMaXN0LT5lbXBsb3llZS0+ZGVwYXJ0bWVudC0+aHJfZGVwYXJ0bWVudF9uYW1lKSA/ICR2YWx1ZXMtPnJlbFVzZXJzTGlzdC0+ZW1wbG95ZWUtPmRlcGFydG1lbnQtPmhyX2RlcGFydG1lbnRfbmFtZSA6ICcnOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLT5maWx0ZXJDb2x1bW4oJ2RlcGFydG1lbnQnLCBmdW5jdGlvbiAoJHF1ZXJ5LCAka2V5d29yZCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZUhhcygncmVsVXNlcnNMaXN0LmVtcGxveWVlLmRlcGFydG1lbnQnLCBmdW5jdGlvbiAoJHF1ZXJ5KSB1c2UgKCRrZXl3b3JkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcXVlcnktPndoZXJlKCdocl9kZXBhcnRtZW50X25hbWUnLCAnTElLRScsICclJyAuICRrZXl3b3JkIC4gJyUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPm9yZGVyQ29sdW1uKCdkZXBhcnRtZW50JywgZnVuY3Rpb24gKCRxdWVyeSwgJG9yZGVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwbGVhc2VTb3J0TWUoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcXVlcnksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkb3JkZXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBVc2VyOjpzZWxlY3QoJ2hyX2RlcGFydG1lbnQuaHJfZGVwYXJ0bWVudF9uYW1lJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmpvaW4oJ2hyX2FzX2Jhc2ljX2luZm8nLCAnaHJfYXNfYmFzaWNfaW5mby5hc3NvY2lhdGVfaWQnLCAnPScsICd1c2Vycy5hc3NvY2lhdGVfaWQnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+am9pbignaHJfZGVwYXJ0bWVudCcsICdocl9kZXBhcnRtZW50LmhyX2RlcGFydG1lbnRfaWQnLCAnPScsICdocl9hc19iYXNpY19pbmZvLmFzX2RlcGFydG1lbnRfaWQnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+d2hlcmVDb2x1bW4oJ3VzZXJzLmlkJywgJ3JlcXVpc2l0aW9ucy5hdXRob3JfaWQnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dGFrZSgxKQogICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLT5hZGRDb2x1bW4oJ3JlcXVpc2l0aW9uX2J5JywgZnVuY3Rpb24gKCR2YWx1ZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzc2V0KCR2YWx1ZXMtPnJlbFVzZXJzTGlzdC0+bmFtZSkgPyAkdmFsdWVzLT5yZWxVc2Vyc0xpc3QtPm5hbWUgOiAnJzsKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIC0+ZmlsdGVyQ29sdW1uKCdyZXF1aXNpdGlvbl9ieScsIGZ1bmN0aW9uICgkcXVlcnksICRrZXl3b3JkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlSGFzKCdyZWxVc2Vyc0xpc3QnLCBmdW5jdGlvbiAoJHF1ZXJ5KSB1c2UgKCRrZXl3b3JkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcXVlcnktPndoZXJlKCduYW1lJywgJ0xJS0UnLCAnJScgLiAka2V5d29yZCAuICclJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLT5vcmRlckNvbHVtbigncmVxdWlzaXRpb25fYnknLCBmdW5jdGlvbiAoJHF1ZXJ5LCAkb3JkZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBsZWFzZVNvcnRNZSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRxdWVyeSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRvcmRlciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVzZXI6OnNlbGVjdCgndXNlcnMubmFtZScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT53aGVyZUNvbHVtbigndXNlcnMuaWQnLCAncmVxdWlzaXRpb25zLmF1dGhvcl9pZCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT50YWtlKDEpCiAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPmFkZENvbHVtbignYXR0YWNobWVudCcsIGZ1bmN0aW9uICgkdmFsdWVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRhdHRhY2htZW50ID0gJyc7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdXRoKCktPnVzZXIoKS0+aGFzUm9sZSgnRW1wbG95ZWUnKSB8fCBhdXRoKCktPnVzZXIoKS0+aGFzUm9sZSgnRGVwYXJ0bWVudC1IZWFkJykgfHwgYXV0aCgpLT51c2VyKCktPmhhc1JvbGUoJ1B1cmNoYXNlLURlcGFydG1lbnQnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlbXB0eSgkdmFsdWVzLT5hdHRhY2htZW50KSAmJiBmaWxlX2V4aXN0cyhwdWJsaWNfcGF0aCgkdmFsdWVzLT5hdHRhY2htZW50KSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYXR0YWNobWVudCAuPSAnPGEgaHJlZj0iJyAuIHVybCgkdmFsdWVzLT5hdHRhY2htZW50KSAuICciIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0iYnRuIGJ0bi14cyBidG4tcHJpbWFyeSI+PGkgY2xhc3M9ImxhcyBsYS1wYXBlcmNsaXAiPjwvaT5BdHRhY2htZW50PC9hPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkYXR0YWNobWVudDsKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIC0+YWRkQ29sdW1uKCdhc3NpZ25lZF9wZXJzb24nLCBmdW5jdGlvbiAoJHZhbHVlcykgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHZhbHVlcy0+YXNzaWduZWRQZXJzb24tPm5hbWUgPz8gJyc7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPmZpbHRlckNvbHVtbignYXNzaWduZWRfcGVyc29uJywgZnVuY3Rpb24gKCRxdWVyeSwgJGtleXdvcmQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHF1ZXJ5LT53aGVyZUhhcygnYXNzaWduZWRQZXJzb24nLCBmdW5jdGlvbiAoJHEpIHVzZSAoJGtleXdvcmQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRxLT53aGVyZSgnbmFtZScsICdMSUtFJywgJyUnIC4gJGtleXdvcmQgLiAnJScpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIC0+b3JkZXJDb2x1bW4oJ2Fzc2lnbmVkX3BlcnNvbicsIGZ1bmN0aW9uICgkcXVlcnksICRvcmRlcikgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGxlYXNlU29ydE1lKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHF1ZXJ5LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJG9yZGVyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgVXNlcjo6c2VsZWN0KCd1c2Vycy5uYW1lJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPndoZXJlQ29sdW1uKCd1c2Vycy5pZCcsICdyZXF1aXNpdGlvbnMuYXNzaWduZWRfdXNlcl9pZCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT50YWtlKDEpCiAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPmFkZENvbHVtbignYWN0aW9ucycsIGZ1bmN0aW9uICgkdmFsdWVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRhY3Rpb25zID0gJyc7CiAgICAgICAgICAgICAgICAgICAgICAgICRhY3Rpb25zID0gJzxkaXYgY2xhc3M9ImJ0bi1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBkcm9wZG93bi10b2dnbGUiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0ic3RhdHVzTmFtZScgLiAkdmFsdWVzLT5pZCAuICciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB3aWR0aD0iMTYiIGhlaWdodD0iMTYiIGZpbGw9ImN1cnJlbnRDb2xvciIgY2xhc3M9ImJpIGJpLXRocmVlLWRvdHMtdmVydGljYWwiIHZpZXdCb3g9IjAgMCAxNiAxNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9Ik05LjUgMTNhMS41IDEuNSAwIDEgMS0zIDAgMS41IDEuNSAwIDAgMSAzIDB6bTAtNWExLjUgMS41IDAgMSAxLTMgMCAxLjUgMS41IDAgMCAxIDMgMHptMC01YTEuNSAxLjUgMCAxIDEtMyAwIDEuNSAxLjUgMCAwIDEgMyAweiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51Ij4nOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVtcHR5KCR2YWx1ZXMtPmFzc2lnbmVkX3VzZXJfaWQpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYWN0aW9ucyAuPSAnPGxpPjxhIGNsYXNzPSJhc3NpZ25QZXJzb24iIG9uY2xpY2s9ImFzc2lnblBlcnNvbigkKHRoaXMpKSIgZGF0YS1pZD0iJyAuICR2YWx1ZXMtPmlkIC4gJyIgdGl0bGU9IkFzc2lnbiBQZXJzb24iPkFzc2lnbiBQZXJzb248L2E+PC9saT4nOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAkYWN0aW9ucyAuPSAnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgY2xhc3M9ImNvbnZlcnRUb1JmcCIgb25jbGljaz0iY29udmVydFRvUmZwKCQodGhpcykpIiBkYXRhLWlkPSInIC4gJHZhbHVlcy0+aWQgLiAnIiB0aXRsZT0iUHJlcGFyZSB0byBSRlAiPlByZXBhcmUgVG8gQ1M8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSB0YXJnZXQ9Il9fYmxhbmsiIGhyZWY9IicgLiByb3V0ZSgncG1zLnJmcC5zZW5kLnRvLnB1cmNoYXNlJywgJHZhbHVlcy0+aWQpIC4gJyIgdGl0bGU9IkRpcmVjdCBQdXJjaGFzZSI+RGlyZWN0IFB1cmNoYXNlPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgY2xhc3M9InJlamVjdEl0ZW0iIG9uY2xpY2s9InJlamVjdEl0ZW0oJCh0aGlzKSkiIGRhdGEtc3JjPSInIC4gcm91dGUoJ3Btcy5yZnAucmVxdWlzaXRpb25zLmRlc3Ryb3knLCAkdmFsdWVzLT5pZCkgLiAnIiBkYXRhLWlkPSInIC4gJHZhbHVlcy0+aWQgLiAnIiB0aXRsZT0iUmVqZWN0Ij5SZWplY3Q8L2E+PC9saT4nOwoKICAgICAgICAgICAgICAgICAgICAgICAgJGFjdGlvbnMgLj0gJzxsaT48YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIHRpdGxlPSJUcmFjayBQcm9ncmVzcyIKICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0cmFja2luZ1JlcXVpc3Rpb25TdGF0dXMiIG9uY2xpY2s9InRyYWNrUmVxdWlzaXRpb25Qcm9ncmVzcygkKHRoaXMpKSIgZGF0YS1pZD0iJyAuICR2YWx1ZXMtPmlkIC4gJyI+PGkgY2xhc3M9IiI+PC9pPlRyYWNrIFByb2dyZXNzPC9hPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nOwoKCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkYWN0aW9uczsKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIC0+cmF3Q29sdW1ucyhbJ3JlZmVyZW5jZV9ubycsICdhdHRhY2htZW50JywgJ2FjdGlvbnMnXSkKICAgICAgICAgICAgICAgICAgICAtPm1ha2UodHJ1ZSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRkYXRhID0gWwogICAgICAgICAgICAgICAgJ3RpdGxlJyA9PiAkdGl0bGUsCiAgICAgICAgICAgICAgICAndXNlckxpc3QnID0+ICR1c2VyTGlzdCwKICAgICAgICAgICAgICAgICdkZXBhcnRtZW50cycgPT4gJGRlcGFydG1lbnRzLAogICAgICAgICAgICAgICAgJ2Zyb20nID0+ICRmcm9tLAogICAgICAgICAgICAgICAgJ3RvJyA9PiAkdG8sCiAgICAgICAgICAgICAgICAnY2F0ZWdvcnlfaWQnID0+ICRjYXRlZ29yeV9pZCwKICAgICAgICAgICAgICAgICdyZXF1aXNpdGlvbl9ieScgPT4gJHJlcXVpc2l0aW9uX2J5LAogICAgICAgICAgICAgICAgJ2RlcGFydG1lbnRfaWQnID0+ICRkZXBhcnRtZW50X2lkLAogICAgICAgICAgICAgICAgJ2NhdGVnb3JpZXMnID0+ICRjYXRlZ29yaWVzLAogICAgICAgICAgICAgICAgJ2hlYWRlckNvbHVtbnMnID0+ICR0aGlzLT5yZXFIZWFkZXJDb2x1bW5zKCksCiAgICAgICAgICAgIF07CgogICAgICAgICAgICByZXR1cm4gdmlldygncG1zLmJhY2tlbmQucGFnZXMucmZwLmRlZnQtcmVxdWlzaXRpb24taW5kZXgnLCAkZGF0YSk7CiAgICAgICAgfSBjYXRjaCAoXFRocm93YWJsZSAkdGgpIHsKICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5iYWNrV2l0aEVycm9yKCR0aC0+Z2V0TWVzc2FnZSgpKTsKICAgICAgICB9CiAgICB9CgoKICAgIC8vIFJlamVjdCBwcm9jZXNzCiAgICBwdWJsaWMgZnVuY3Rpb24gcmVxdWlzaXRpb25EZXN0cm95KFJlcXVlc3QgJHJlcXVlc3QsICRpZCkKICAgIHsKICAgICAgICAkcmVxdWVzdC0+dmFsaWRhdGUoWwogICAgICAgICAgICAnbWVzc2FnZScgPT4gJ3JlcXVpcmVkfHN0cmluZ3xtYXg6MTAwMCcsCiAgICAgICAgICAgICdyZXF1aXNpdGlvbl9pZCcgPT4gJ3JlcXVpcmVkfGludGVnZXInCiAgICAgICAgXSk7CgogICAgICAgIHRyeSB7CiAgICAgICAgICAgIERCOjpiZWdpblRyYW5zYWN0aW9uKCk7CgogICAgICAgICAgICAvLyAxLiBVcGRhdGUgdGhlIHJlcXVpc2l0aW9uIHN0YXR1cyB0byAicmVqZWN0ZWQiCiAgICAgICAgICAgICRyZXF1aXNpdGlvbiA9IFJlcXVpc2l0aW9uOjpmaW5kT3JGYWlsKCRpZCk7CiAgICAgICAgICAgICRyZXF1aXNpdGlvbi0+ZGVsZXRlKCk7CgogICAgICAgICAgICAvLyAyLiBTdG9yZSByZWplY3Rpb24gbm90ZSBpbiBSZXF1aXNpdGlvbk5vdExvZwogICAgICAgICAgICBSZXF1aXNpdGlvbk5vdGVMb2dzOjpjcmVhdGUoWwogICAgICAgICAgICAgICAgJ3JlcXVpc2l0aW9uX2lkJyA9PiAkcmVxdWVzdC0+cmVxdWlzaXRpb25faWQsCiAgICAgICAgICAgICAgICAndHlwZScgPT4gJ3B1cmNoYXNlJywKICAgICAgICAgICAgICAgICdub3RlcycgPT4gJHJlcXVlc3QtPm1lc3NhZ2UsCiAgICAgICAgICAgICAgICAnY3JlYXRlZF9ieScgPT4gYXV0aCgpLT5pZCgpLAogICAgICAgICAgICBdKTsKCiAgICAgICAgICAgIERCOjpjb21taXQoKTsKCiAgICAgICAgICAgIHJldHVybiByZXNwb25zZSgpLT5qc29uKFsKICAgICAgICAgICAgICAgICdyZXN1bHQnID0+ICdzdWNjZXNzJywKICAgICAgICAgICAgICAgICdtZXNzYWdlJyA9PiAnUmVxdWlzaXRpb24gaGFzIGJlZW4gcmVqZWN0ZWQgc3VjY2Vzc2Z1bGx5LicKICAgICAgICAgICAgXSk7CiAgICAgICAgfSBjYXRjaCAoXEV4Y2VwdGlvbiAkZSkgewogICAgICAgICAgICBEQjo6cm9sbEJhY2soKTsKICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlKCktPmpzb24oWwogICAgICAgICAgICAgICAgJ3Jlc3VsdCcgPT4gJ2Vycm9yJywKICAgICAgICAgICAgICAgICdtZXNzYWdlJyA9PiAnRmFpbGVkIHRvIHJlamVjdCByZXF1aXNpdGlvbi4gJyAuICRlLT5nZXRNZXNzYWdlKCkKICAgICAgICAgICAgXSk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogQ29udmVydCB0byByZXF1ZXN0IGZvciBwcm9wb3NhbC4KICAgICAqCiAgICAgKiBAcmV0dXJuIFxJbGx1bWluYXRlXEh0dHBcSnNvblJlc3BvbnNlCiAgICAgKi8KCiAgICBwdWJsaWMgZnVuY3Rpb24gY29udmVydFRvUmZwKFJlcXVlc3QgJHJlcXVlc3QpCiAgICB7CiAgICAgICAgREI6OmJlZ2luVHJhbnNhY3Rpb24oKTsKICAgICAgICB0cnkgewogICAgICAgICAgICAkcmVxdWlzaXRpb24gPSBSZXF1aXNpdGlvbjo6d2hlcmUoZnVuY3Rpb24gKCRxdWVyeSkgdXNlICgkcmVxdWVzdCkgewogICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoWwogICAgICAgICAgICAgICAgICAgICdpZCcgPT4gJHJlcXVlc3QtPnJlcXVpc2l0aW9uX2lkLAogICAgICAgICAgICAgICAgICAgICdzdGF0dXMnID0+IDEsCiAgICAgICAgICAgICAgICAgICAgJ2FwcHJvdmVkX2lkJyA9PiAxLAogICAgICAgICAgICAgICAgICAgICdpc19zZW5kX3RvX3JmcCcgPT4gJ3llcycsCiAgICAgICAgICAgICAgICAgICAgJ2RlbGl2ZXJ5X3N0YXR1cycgPT4gJ3Byb2Nlc3NpbmcnCiAgICAgICAgICAgICAgICBdKS0+b3JXaGVyZSgncmVxdWVzdF9zdGF0dXMnLCAncmZwJyk7CiAgICAgICAgICAgIH0pLT5maXJzdCgpOwoKICAgICAgICAgICAgaWYgKGlzc2V0KCRyZXF1aXNpdGlvbi0+aWQpKSB7CiAgICAgICAgICAgICAgICAvLyBJZiB1c2VyX2lkIGlzIHByZXNlbnQsIGFzc2lnbgogICAgICAgICAgICAgICAgaWYgKCRyZXF1ZXN0LT5maWxsZWQoJ3VzZXJfaWQnKSAmJiAkcmVxdWVzdC0+dXNlcl9pZCA+IDApIHsKICAgICAgICAgICAgICAgICAgICAkcmVxdWlzaXRpb24tPmFzc2lnbmVkX3VzZXJfaWQgPSAkcmVxdWVzdC0+dXNlcl9pZDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoJHJlcXVpc2l0aW9uLT5yZXF1ZXN0X3N0YXR1cyA9PSAncmZwJykgewogICAgICAgICAgICAgICAgICAgICRyZXF1aXNpdGlvbi0+cmVxdWVzdF9zdGF0dXMgPSAnc2VuZF9yZnAnOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkcmVxdWlzaXRpb24tPmRlbGl2ZXJ5X3N0YXR1cyA9ICdyZnAnOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICRyZXF1aXNpdGlvbi0+c2F2ZSgpOwogICAgICAgICAgICAgICAgREI6OmNvbW1pdCgpOwoKICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZSgpLT5qc29uKFsKICAgICAgICAgICAgICAgICAgICAnc3VjY2VzcycgPT4gdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAnbWVzc2FnZScgPT4gIlJlcXVpc2l0aW9uIGhhcyBiZWVuIHNlbnQgdG8gQ1Mgc3VjY2Vzc2Z1bGx5LiIKICAgICAgICAgICAgICAgIF0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlKCktPmpzb24oWwogICAgICAgICAgICAgICAgICAgICdzdWNjZXNzJyA9PiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAnbWVzc2FnZScgPT4gIlJlcXVpc2l0aW9uIE5vdCBGb3VuZCEiCiAgICAgICAgICAgICAgICBdKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFxUaHJvd2FibGUgJHRoKSB7CiAgICAgICAgICAgIERCOjpyb2xsYmFjaygpOwogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UoKS0+anNvbihbCiAgICAgICAgICAgICAgICAnc3VjY2VzcycgPT4gZmFsc2UsCiAgICAgICAgICAgICAgICAnbWVzc2FnZScgPT4gJHRoLT5nZXRNZXNzYWdlKCkKICAgICAgICAgICAgXSk7CiAgICAgICAgfQogICAgfQoKCiAgICAvKioKICAgICAqIEFzc2lnbiBSRlAgZm9yIEVtcGxveWVlLgogICAgICoKICAgICAqIEByZXR1cm4gXElsbHVtaW5hdGVcSHR0cFxKc29uUmVzcG9uc2UKICAgICAqLwoKICAgIHB1YmxpYyBmdW5jdGlvbiBhc3NpZ25QZXJzb24oUmVxdWVzdCAkcmVxdWVzdCkKICAgIHsKICAgICAgICBpZiAoJHJlcXVlc3QtPnVzZXJfaWQgPD0gMCkgewogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UoKS0+anNvbihbCiAgICAgICAgICAgICAgICAnc3VjY2VzcycgPT4gZmFsc2UsCiAgICAgICAgICAgICAgICAnbWVzc2FnZScgPT4gIlBsZWFzZSBhc3NpZ24gYSBwZXJzb24hIgogICAgICAgICAgICBdKTsKICAgICAgICB9CgogICAgICAgIERCOjpiZWdpblRyYW5zYWN0aW9uKCk7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJHJlcXVpc2l0aW9uID0gUmVxdWlzaXRpb246OndoZXJlKFsKICAgICAgICAgICAgICAgIFsnaWQnLCAnPScsICRyZXF1ZXN0LT5yZXF1aXNpdGlvbl9pZF0sCiAgICAgICAgICAgICAgICBbJ3N0YXR1cycsICc9JywgMV0sCiAgICAgICAgICAgICAgICBbJ2FwcHJvdmVkX2lkJywgJz0nLCAxXSwKICAgICAgICAgICAgICAgIFsnaXNfc2VuZF90b19yZnAnLCAnPScsICd5ZXMnXSwKICAgICAgICAgICAgICAgIFsnZGVsaXZlcnlfc3RhdHVzJywgJz0nLCAncHJvY2Vzc2luZyddLAogICAgICAgICAgICBdKS0+b3JXaGVyZSgncmVxdWVzdF9zdGF0dXMnLCAncmZwJyktPmZpcnN0KCk7CgogICAgICAgICAgICBpZiAoJHJlcXVpc2l0aW9uKSB7CiAgICAgICAgICAgICAgICAvLyBPbmx5IGFzc2lnbiB0aGUgcGVyc29uLCBubyBzdGF0dXMgY2hhbmdlcwogICAgICAgICAgICAgICAgJHJlcXVpc2l0aW9uLT5hc3NpZ25lZF91c2VyX2lkID0gJHJlcXVlc3QtPnVzZXJfaWQ7CiAgICAgICAgICAgICAgICAkcmVxdWlzaXRpb24tPnNhdmUoKTsKCiAgICAgICAgICAgICAgICBEQjo6Y29tbWl0KCk7CgogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlKCktPmpzb24oWwogICAgICAgICAgICAgICAgICAgICdzdWNjZXNzJyA9PiB0cnVlLAogICAgICAgICAgICAgICAgICAgICdtZXNzYWdlJyA9PiAiUmVxdWlzaXRpb24gaGFzIGJlZW4gYXNzaWduZWQgdG8gIiAuICRyZXF1aXNpdGlvbi0+YXNzaWduZWRVc2VyLT5uYW1lIC4gIiBzdWNjZXNzZnVsbHkuIgogICAgICAgICAgICAgICAgXSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UoKS0+anNvbihbCiAgICAgICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnID0+IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICdtZXNzYWdlJyA9PiAiUmVxdWlzaXRpb24gbm90IGZvdW5kISIKICAgICAgICAgICAgICAgIF0pOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoXFRocm93YWJsZSAkdGgpIHsKICAgICAgICAgICAgREI6OnJvbGxiYWNrKCk7CiAgICAgICAgICAgIHJldHVybiByZXNwb25zZSgpLT5qc29uKFsKICAgICAgICAgICAgICAgICdzdWNjZXNzJyA9PiBmYWxzZSwKICAgICAgICAgICAgICAgICdtZXNzYWdlJyA9PiAkdGgtPmdldE1lc3NhZ2UoKQogICAgICAgICAgICBdKTsKICAgICAgICB9CiAgICB9CgoKICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRSZXF1ZXN0UHJvcG9zYWxDb21iaW5lSW5mbyhSZXF1ZXN0ICRyZXF1ZXN0KQogICAgewogICAgICAgICRwcm9kdWN0cyA9IChpc3NldCgkcmVxdWVzdC0+cHJvZHVjdHMpID8gJHJlcXVlc3QtPnByb2R1Y3RzIDogW10pOwogICAgICAgICRzdXBwbGllcnMgPSBbXTsKICAgICAgICBpZiAoY291bnQoJHByb2R1Y3RzKSA+IDApIHsKICAgICAgICAgICAgJHN1cHBsaWVycyA9IFN1cHBsaWVyczo6d2hlcmUoJ3N0YXR1cycsICdBY3RpdmUnKQogICAgICAgICAgICAgICAgLT53aGVyZUhhcygncHJvZHVjdHMnLCBmdW5jdGlvbiAoJHF1ZXJ5KSB1c2UgKCRwcm9kdWN0cykgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPmRpc3RpbmN0KCktPndoZXJlSW4oJ3Byb2R1Y3RfaWQnLCAkcHJvZHVjdHMpOwogICAgICAgICAgICAgICAgfSwgJz0nLCBjb3VudCgkcHJvZHVjdHMpKQogICAgICAgICAgICAgICAgLT5nZXQoKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiByZXNwb25zZSgpLT5qc29uKFsKICAgICAgICAgICAgJ3JlZmVyZW5jZV9ubycgPT4gdW5pcXVlQ29kZSgxNSwgKCdDUy0nIC4gZGF0ZSgneScsIHN0cnRvdGltZShkYXRlKCdZLW0tZCcpKSkgLiAnLUdSUC0nKSwgJ3JlcXVlc3RfcHJvcG9zYWxzJywgJ2lkJyksCiAgICAgICAgICAgICdzdXBwbGllcnMnID0+ICRzdXBwbGllcnMsCiAgICAgICAgXSk7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIGNyZWF0ZSgpCiAgICB7CiAgICAgICAgJHRpdGxlID0gJ0NyZWF0ZSBSRlAnOwogICAgICAgIHRyeSB7CgogICAgICAgICAgICAkcmVxdWlzaXRpb25JZHMgPSBnZXRNZXJnZWRSZXF1aXNpc2lvbklEKFsKICAgICAgICAgICAgICAgICdpc19wb19nZW5lcmF0ZScgPT4gJ25vJywKICAgICAgICAgICAgICAgICdpc19zZW5kX3RvX3JmcCcgPT4gJ3llcycsCiAgICAgICAgICAgICAgICAnZGVsaXZlcnlfc3RhdHVzJyA9PiAncmZwJywKICAgICAgICAgICAgICAgICdhcHByb3ZlZF9pZCcgPT4gMSwKICAgICAgICAgICAgICAgICdzdGF0dXMnID0+IDEsCiAgICAgICAgICAgIF0sIFsKICAgICAgICAgICAgICAgICdpc19wb19nZW5lcmF0ZScgPT4gJ25vJywKICAgICAgICAgICAgICAgICdpc19zZW5kX3RvX3JmcCcgPT4gJ3llcycsCiAgICAgICAgICAgICAgICAnZGVsaXZlcnlfc3RhdHVzJyA9PiAncGFydGlhbC1kZWxpdmVyZWQnLAogICAgICAgICAgICAgICAgJ2FwcHJvdmVkX2lkJyA9PiAxLAogICAgICAgICAgICAgICAgJ3N0YXR1cycgPT4gMSwKICAgICAgICAgICAgICAgICdyZXF1ZXN0X3N0YXR1cycgPT4gJ3NlbmRfcmZwJywKICAgICAgICAgICAgXSk7CgogICAgICAgICAgICAkcHJvZHVjdHMgPSBQcm9kdWN0Ojp3aGVyZSgnc3RhdHVzJywgJ2FwcHJvdmVkJykKICAgICAgICAgICAgICAgIC0+d2l0aChbCiAgICAgICAgICAgICAgICAgICAgJ3N1cHBsaWVycycsCiAgICAgICAgICAgICAgICAgICAgJ3Byb2R1Y3RVbml0JywKICAgICAgICAgICAgICAgICAgICAnY2F0ZWdvcnkuY2F0ZWdvcnknLAogICAgICAgICAgICAgICAgICAgICdhdHRyaWJ1dGVzLmF0dHJpYnV0ZU9wdGlvbi5hdHRyaWJ1dGUnLAogICAgICAgICAgICAgICAgICAgICdyZXF1aXNpdGlvbkl0ZW0ucmVxdWlzaXRpb24nCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgLT53aGVyZUhhcygncmVxdWlzaXRpb25JdGVtJywgZnVuY3Rpb24gKCRxdWVyeSkgdXNlICgkcmVxdWlzaXRpb25JZHMpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgnaXNfc2VuZCcsICdubycpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+d2hlcmVIYXMoJ3JlcXVpc2l0aW9uJywgZnVuY3Rpb24gKCRxdWVyeSkgdXNlICgkcmVxdWlzaXRpb25JZHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlSW4oJ2lkJywgJHJlcXVpc2l0aW9uSWRzKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLT53aGVuKCFhdXRoKCktPnVzZXIoKS0+aGFzQW55Um9sZShbJ1B1cmNoYXNlLURlcGFydG1lbnQnLCAnQXVkaXQnLCAnQmlsbGluZycsICdNYW5hZ2VtZW50JywgJ0FjY291bnRzJ10pLCBmdW5jdGlvbiAoJHF1ZXJ5KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmVIYXMoJ3JlcXVpc2l0aW9uSXRlbS5yZXF1aXNpdGlvbicsIGZ1bmN0aW9uICgkcXVlcnkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoJ2Fzc2lnbmVkX3VzZXJfaWQnLCBhdXRoKCktPnVzZXIoKS0+aWQpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC0+Z2V0KCk7CgogICAgICAgICAgICByZXR1cm4gdmlldygncG1zLmJhY2tlbmQucGFnZXMucmZwLmNyZWF0ZScsIGNvbXBhY3QoJ3RpdGxlJywgJ3Byb2R1Y3RzJywgJ3JlcXVpc2l0aW9uSWRzJykpOwogICAgICAgIH0gY2F0Y2ggKFxUaHJvd2FibGUgJHRoKSB7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+YmFja1dpdGhFcnJvcigkdGgtPmdldE1lc3NhZ2UoKSk7CiAgICAgICAgfQogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRSZXF1ZXN0UHJvcG9zYWxTZXBhcmF0ZUluZm8oUmVxdWVzdCAkcmVxdWVzdCkKICAgIHsKCiAgICAgICAgJHJlcXVpc2l0aW9uSXRlbXMgPSBSZXF1aXNpdGlvbkl0ZW06OndpdGgoWwogICAgICAgICAgICAncmVxdWlzaXRpb24nCiAgICAgICAgXSkKICAgICAgICAgICAgLT53aGVyZSgnaXNfc2VuZCcsICdubycpCiAgICAgICAgICAgIC0+d2hlcmVJbignaWQnLCAoaXNzZXQoJHJlcXVlc3QtPml0ZW1zKSA/ICRyZXF1ZXN0LT5pdGVtcyA6IFtdKSkKICAgICAgICAgICAgLT5nZXQoKTsKCiAgICAgICAgJHByb2R1Y3RzID0gYXJyYXlfdW5pcXVlKCRyZXF1aXNpdGlvbkl0ZW1zLT5wbHVjaygncHJvZHVjdF9pZCcpLT50b0FycmF5KCkpOwogICAgICAgICRzdXBwbGllcnMgPSBbXTsKICAgICAgICBpZiAoY291bnQoJHByb2R1Y3RzKSA+IDApIHsKICAgICAgICAgICAgaWYgKCRyZXF1ZXN0LT5hbHJlYWR5UXVvdGF0aW9uID09PSAndHJ1ZScpIHsKICAgICAgICAgICAgICAgICRzdXBwbGllcnMgPSBTdXBwbGllcnM6OndoZXJlKCdzdGF0dXMnLCAnQWN0aXZlJykKICAgICAgICAgICAgICAgICAgICAtPmdldCgpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJHN1cHBsaWVycyA9IFN1cHBsaWVyczo6d2hlcmUoJ3N0YXR1cycsICdBY3RpdmUnKQogICAgICAgICAgICAgICAgICAgIC0+d2hlcmVIYXMoJ3Byb2R1Y3RzJywgZnVuY3Rpb24gKCRxdWVyeSkgdXNlICgkcHJvZHVjdHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+ZGlzdGluY3QoKS0+d2hlcmVJbigncHJvZHVjdF9pZCcsICRwcm9kdWN0cyk7CiAgICAgICAgICAgICAgICAgICAgfSwgJz0nLCBjb3VudCgkcHJvZHVjdHMpKQogICAgICAgICAgICAgICAgICAgIC0+Z2V0KCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICRjbHVlID0gJ0dSUCc7CiAgICAgICAgJHVuaXRzID0gXEFwcFxNb2RlbHNcSHJcVW5pdDo6d2hlcmVJbignaHJfdW5pdF9pZCcsICRyZXF1aXNpdGlvbkl0ZW1zLT5wbHVjaygncmVxdWlzaXRpb24uaHJfdW5pdF9pZCcpLT50b0FycmF5KCkpLT5nZXQoKTsKICAgICAgICBpZiAoJHVuaXRzLT5jb3VudCgpID09IDEpIHsKICAgICAgICAgICAgJGNsdWUgPSAkdW5pdHNbMF0tPmhyX3VuaXRfc2hvcnRfbmFtZTsKICAgICAgICB9CgogICAgICAgIHJldHVybiByZXNwb25zZSgpLT5qc29uKFsKICAgICAgICAgICAgJ3JlZmVyZW5jZV9ubycgPT4gdW5pcXVlQ29kZSgxNSwgKCdDUy0nIC4gZGF0ZSgneScsIHN0cnRvdGltZShkYXRlKCdZLW0tZCcpKSkgLiAnLScgLiAkY2x1ZSAuICctJyksICdyZXF1ZXN0X3Byb3Bvc2FscycsICdpZCcpLAogICAgICAgICAgICAnc3VwcGxpZXJzJyA9PiAkc3VwcGxpZXJzLAogICAgICAgIF0pOwogICAgfQoKICAgIC8qKgogICAgICogQ3JlYXRlIHNlcGFyYXRlIHByb3Bvc2FsLgogICAgICoKICAgICAqIEByZXR1cm4gXElsbHVtaW5hdGVcSHR0cFxSZXNwb25zZQogICAgICovCgogICAgcHVibGljIGZ1bmN0aW9uIGNyZWF0ZVNlcGFyYXRlKFJlcXVlc3QgJHJlcXVlc3QpCiAgICB7CiAgICAgICAgJHRpdGxlID0gJ0NyZWF0ZSBTZXBhcmF0ZSBDUyc7CiAgICAgICAgdHJ5IHsKCiAgICAgICAgICAgICRyZXF1aXNpdGlvbklkcyA9IGdldE1lcmdlZFJlcXVpc2lzaW9uSUQoWwogICAgICAgICAgICAgICAgJ2lzX3BvX2dlbmVyYXRlJyA9PiAnbm8nLAogICAgICAgICAgICAgICAgJ2lzX3NlbmRfdG9fcmZwJyA9PiAneWVzJywKICAgICAgICAgICAgICAgICdkZWxpdmVyeV9zdGF0dXMnID0+ICdyZnAnLAogICAgICAgICAgICAgICAgJ2FwcHJvdmVkX2lkJyA9PiAxLAogICAgICAgICAgICAgICAgJ3N0YXR1cycgPT4gMSwKICAgICAgICAgICAgXSwgWwogICAgICAgICAgICAgICAgJ2lzX3BvX2dlbmVyYXRlJyA9PiAnbm8nLAogICAgICAgICAgICAgICAgJ2lzX3NlbmRfdG9fcmZwJyA9PiAneWVzJywKICAgICAgICAgICAgICAgICdkZWxpdmVyeV9zdGF0dXMnID0+ICdwYXJ0aWFsLWRlbGl2ZXJlZCcsCiAgICAgICAgICAgICAgICAnYXBwcm92ZWRfaWQnID0+IDEsCiAgICAgICAgICAgICAgICAnc3RhdHVzJyA9PiAxLAogICAgICAgICAgICAgICAgJ3JlcXVlc3Rfc3RhdHVzJyA9PiAnc2VuZF9yZnAnLAogICAgICAgICAgICBdKTsKCiAgICAgICAgICAgICRyZXF1aXNpdGlvbnMgPSBSZXF1aXNpdGlvbjo6d2hlcmVJbignaWQnLCAkcmVxdWlzaXRpb25JZHMpCiAgICAgICAgICAgICAgICAtPndoZW4oIWF1dGgoKS0+dXNlcigpLT5oYXNBbnlSb2xlKFsnUHVyY2hhc2UtRGVwYXJ0bWVudCcsICdBdWRpdCcsICdCaWxsaW5nJywgJ01hbmFnZW1lbnQnLCAnQWNjb3VudHMnXSksIGZ1bmN0aW9uICgkcXVlcnkpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgnYXNzaWduZWRfdXNlcl9pZCcsIGF1dGgoKS0+dXNlcigpLT5pZCk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLT53aGVyZUluKCdocl91bml0X2lkJywgYXV0aCgpLT51c2VyKCktPnByaW9yaXRpZXMtPnBsdWNrKCdocl91bml0X2lkJyktPnRvQXJyYXkoKSkKICAgICAgICAgICAgICAgIC0+d2l0aChbCiAgICAgICAgICAgICAgICAgICAgJ3JlcXVpc2l0aW9uSXRlbXMnID0+IGZ1bmN0aW9uICgkcXVlcnkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoJ2lzX3NlbmQnLCAnbm8nKTsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICdyZXF1aXNpdGlvbkl0ZW1zLnByb2R1Y3QucHJvZHVjdFVuaXQnLAogICAgICAgICAgICAgICAgICAgICdyZXF1aXNpdGlvbkl0ZW1zLnByb2R1Y3QuY2F0ZWdvcnkuY2F0ZWdvcnknLAogICAgICAgICAgICAgICAgICAgICdyZXF1aXNpdGlvbkl0ZW1zLnByb2R1Y3QuYXR0cmlidXRlcy5hdHRyaWJ1dGVPcHRpb24uYXR0cmlidXRlJywKICAgICAgICAgICAgICAgICAgICAncmVsUmVxdWlzaXRpb25EZWxpdmVyeS5yZWxEZWxpdmVyeUl0ZW1zJwogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIC0+d2hlcmVIYXMoJ3JlcXVpc2l0aW9uSXRlbXMnLCBmdW5jdGlvbiAoJHF1ZXJ5KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoJ2lzX3NlbmQnLCAnbm8nKTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAtPm9yZGVyQnkoJ2lkJywgJ2Rlc2MnKQogICAgICAgICAgICAgICAgLT5nZXQoKTsKCiAgICAgICAgICAgIGlmIChyZXF1ZXN0KCktPmhhcygnZ2V0LXByb2R1Y3RzJykpIHsKICAgICAgICAgICAgICAgICRwcm9kdWN0cyA9IFByb2R1Y3Q6OndpdGgoWwogICAgICAgICAgICAgICAgICAgICdhdHRyaWJ1dGVzLmF0dHJpYnV0ZU9wdGlvbi5hdHRyaWJ1dGUnCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIC0+d2hlcmVIYXMoJ3JlcXVpc2l0aW9uSXRlbScsIGZ1bmN0aW9uICgkcXVlcnkpIHVzZSAoJHJlcXVpc2l0aW9ucykgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZUluKCdyZXF1aXNpdGlvbl9pZCcsICRyZXF1aXNpdGlvbnMtPnBsdWNrKCdpZCcpLT50b0FycmF5KCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPndoZXJlKCdpc19zZW5kJywgJ25vJyk7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPndoZW4ocmVxdWVzdCgpLT5nZXQoJ2RlcGFydG1lbnRfaWQnKSA+IDAsIGZ1bmN0aW9uICgkcXVlcnkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmVIYXMoJ3JlcXVpc2l0aW9uSXRlbS5yZXF1aXNpdGlvbi5yZWxVc2Vyc0xpc3QucHJpb3JpdGllcycsIGZ1bmN0aW9uICgkcXVlcnkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlKCdocl9kZXBhcnRtZW50X2lkJywgcmVxdWVzdCgpLT5nZXQoJ2RlcGFydG1lbnRfaWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLT5nZXQoKTsKCiAgICAgICAgICAgICAgICAkZGF0YSA9ICc8b3B0aW9uIHZhbHVlPSIiPkFsbCBQcm9kdWN0czwvb3B0aW9uPic7CiAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHByb2R1Y3RzWzBdKSkgewogICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRwcm9kdWN0cyBhcyAkcHJvZHVjdCkgewogICAgICAgICAgICAgICAgICAgICAgICAkZGF0YSAuPSAnPG9wdGlvbiB2YWx1ZT0iJyAuICRwcm9kdWN0LT5pZCAuICciICcgLiAocmVxdWVzdCgpLT5nZXQoJ3NlbGVjdGVkJykgPT0gJHByb2R1Y3QtPmlkID8gJ3NlbGVjdGVkJyA6ICcnKSAuICc+JyAuICRwcm9kdWN0LT5uYW1lIC4gJyAnIC4gZ2V0UHJvZHVjdEF0dHJpYnV0ZXNGYXN0ZXIoJHByb2R1Y3QpIC4gJzwvb3B0aW9uPic7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiAkZGF0YTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJGRlcGFydG1lbnRzID0gRGVwYXJ0bWVudDo6d2hlcmVIYXMoJ3VzZXJzJywgZnVuY3Rpb24gKCRxdWVyeSkgdXNlICgkcmVxdWlzaXRpb25zKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZUluKCd1c2VyX2lkJywgJHJlcXVpc2l0aW9ucy0+cGx1Y2soJ2F1dGhvcl9pZCcpLT50b0FycmF5KCkpOwogICAgICAgICAgICB9KS0+Z2V0KCk7CgogICAgICAgICAgICAkZmlsdGVyZWRSZXF1aXNpdGlvbnMgPSBSZXF1aXNpdGlvbjo6d2hlcmVJbignaWQnLCAkcmVxdWlzaXRpb25JZHMpCiAgICAgICAgICAgICAgICAtPndoZW4oIWF1dGgoKS0+dXNlcigpLT5oYXNBbnlSb2xlKFsnUHVyY2hhc2UtRGVwYXJ0bWVudCcsICdBdWRpdCcsICdCaWxsaW5nJywgJ01hbmFnZW1lbnQnLCAnQWNjb3VudHMnXSksIGZ1bmN0aW9uICgkcXVlcnkpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgnYXNzaWduZWRfdXNlcl9pZCcsIGF1dGgoKS0+dXNlcigpLT5pZCk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLT53aXRoKFsKICAgICAgICAgICAgICAgICAgICAncmVxdWlzaXRpb25JdGVtcycgPT4gZnVuY3Rpb24gKCRxdWVyeSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVuKHJlcXVlc3QoKS0+Z2V0KCdwcm9kdWN0X2lkJykgPiAwLCBmdW5jdGlvbiAoJHF1ZXJ5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgncHJvZHVjdF9pZCcsIHJlcXVlc3QoKS0+Z2V0KCdwcm9kdWN0X2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT53aGVyZSgnaXNfc2VuZCcsICdubycpOwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgJ3JlcXVpc2l0aW9uSXRlbXMucHJvZHVjdC5wcm9kdWN0VW5pdCcsCiAgICAgICAgICAgICAgICAgICAgJ3JlcXVpc2l0aW9uSXRlbXMucHJvZHVjdC5jYXRlZ29yeS5jYXRlZ29yeScsCiAgICAgICAgICAgICAgICAgICAgJ3JlcXVpc2l0aW9uSXRlbXMucHJvZHVjdC5hdHRyaWJ1dGVzLmF0dHJpYnV0ZU9wdGlvbi5hdHRyaWJ1dGUnLAogICAgICAgICAgICAgICAgICAgICdyZWxSZXF1aXNpdGlvbkRlbGl2ZXJ5LnJlbERlbGl2ZXJ5SXRlbXMnLAogICAgICAgICAgICAgICAgICAgICdyZXF1aXNpdGlvbkl0ZW1zLmF0dHJpYnV0ZXMuYXR0cmlidXRlT3B0aW9uLmF0dHJpYnV0ZScKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAtPndoZW4ocmVxdWVzdCgpLT5nZXQoJ2RlcGFydG1lbnRfaWQnKSA+IDAsIGZ1bmN0aW9uICgkcXVlcnkpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZUhhcygncmVxdWlzaXRpb25JdGVtcy5yZXF1aXNpdGlvbi5yZWxVc2Vyc0xpc3QucHJpb3JpdGllcycsIGZ1bmN0aW9uICgkcXVlcnkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoJ2hyX2RlcGFydG1lbnRfaWQnLCByZXF1ZXN0KCktPmdldCgnZGVwYXJ0bWVudF9pZCcpKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAtPndoZXJlSGFzKCdyZXF1aXNpdGlvbkl0ZW1zJywgZnVuY3Rpb24gKCRxdWVyeSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlKCdpc19zZW5kJywgJ25vJyk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLT53aGVyZUluKCdocl91bml0X2lkJywgYXV0aCgpLT51c2VyKCktPnByaW9yaXRpZXMtPnBsdWNrKCdocl91bml0X2lkJyktPnRvQXJyYXkoKSkKICAgICAgICAgICAgICAgIC0+b3JkZXJCeSgnaWQnLCAnZGVzYycpCiAgICAgICAgICAgICAgICAtPmdldCgpOwoKCiAgICAgICAgICAgIHJldHVybiB2aWV3KCdwbXMuYmFja2VuZC5wYWdlcy5yZnAuY3JlYXRlLXNlcGFyYXRlJywgY29tcGFjdCgndGl0bGUnLCAnZGVwYXJ0bWVudHMnLCAncmVxdWlzaXRpb25zJywgJ2ZpbHRlcmVkUmVxdWlzaXRpb25zJykpOwogICAgICAgIH0gY2F0Y2ggKFxUaHJvd2FibGUgJHRoKSB7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+YmFja1dpdGhFcnJvcigkdGgtPmdldE1lc3NhZ2UoKSk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogU2hvdyB0aGUgZm9ybSBmb3IgY3JlYXRpbmcgYSBuZXcgcmVzb3VyY2UuCiAgICAgKgogICAgICogQHJldHVybiBcSWxsdW1pbmF0ZVxIdHRwXFJlc3BvbnNlCiAgICAgKi8KCiAgICBwdWJsaWMgZnVuY3Rpb24gcmVxdWlzaXRpb25EZXRhaWxCeVByb2R1Y3RJZCgkcHJvZHVjdF9pZCkKICAgIHsKICAgICAgICAkdGl0bGUgPSAnUmVxdWlzaXRpb24gZGV0YWlscyBieSBwcm9kdWN0Lic7CiAgICAgICAgJHByb2R1Y3QgPSBQcm9kdWN0OjpmaW5kT3JGYWlsKCRwcm9kdWN0X2lkKTsKCiAgICAgICAgJHJlcXVpc2l0aW9uSWRzID0gZ2V0TWVyZ2VkUmVxdWlzaXNpb25JRChbCiAgICAgICAgICAgICdpc19wb19nZW5lcmF0ZScgPT4gJ25vJywKICAgICAgICAgICAgJ2lzX3NlbmRfdG9fcmZwJyA9PiAneWVzJywKICAgICAgICAgICAgJ2RlbGl2ZXJ5X3N0YXR1cycgPT4gJ3JmcCcsCiAgICAgICAgICAgICdhcHByb3ZlZF9pZCcgPT4gMSwKICAgICAgICAgICAgJ3N0YXR1cycgPT4gMSwKICAgICAgICBdLCBbCiAgICAgICAgICAgICdpc19wb19nZW5lcmF0ZScgPT4gJ25vJywKICAgICAgICAgICAgJ2lzX3NlbmRfdG9fcmZwJyA9PiAneWVzJywKICAgICAgICAgICAgJ2RlbGl2ZXJ5X3N0YXR1cycgPT4gJ3BhcnRpYWwtZGVsaXZlcmVkJywKICAgICAgICAgICAgJ2FwcHJvdmVkX2lkJyA9PiAxLAogICAgICAgICAgICAnc3RhdHVzJyA9PiAxLAogICAgICAgICAgICAncmVxdWVzdF9zdGF0dXMnID0+ICdzZW5kX3JmcCcsCiAgICAgICAgXSk7CgogICAgICAgIHRyeSB7CiAgICAgICAgICAgICRpdGVtcyA9IFJlcXVpc2l0aW9uSXRlbTo6d2hlcmUoWydwcm9kdWN0X2lkJyA9PiAkcHJvZHVjdF9pZCwgJ2lzX3NlbmQnID0+ICdubyddKQogICAgICAgICAgICAgICAgLT53aGVyZUhhcygncmVxdWlzaXRpb24nLCBmdW5jdGlvbiAoJHF1ZXJ5KSB1c2UgKCRyZXF1aXNpdGlvbklkcykgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlKCdzdGF0dXMnLCAxKS0+d2hlcmVJbignaWQnLCAkcmVxdWlzaXRpb25JZHMpOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC0+Z2V0KCk7CgogICAgICAgICAgICByZXR1cm4gdmlldygncG1zLmJhY2tlbmQucGFnZXMucHJvcG9zYWwuX3Byb2R1Y3Qtd2lzZS1yZXF1aXNpdGlvbicsIGNvbXBhY3QoJ3RpdGxlJywgJ3Byb2R1Y3QnLCAnaXRlbXMnLCAncmVxdWlzaXRpb25JZHMnKSk7CiAgICAgICAgfSBjYXRjaCAoXFRocm93YWJsZSAkdGgpIHsKICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5iYWNrV2l0aEVycm9yKCR0aC0+Z2V0TWVzc2FnZSgpKTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBTdG9yZSBhIG5ld2x5IGNyZWF0ZWQgcmVzb3VyY2UgaW4gc3RvcmFnZS4KICAgICAqCiAgICAgKiBAcGFyYW0gXElsbHVtaW5hdGVcSHR0cFxSZXF1ZXN0ICRyZXF1ZXN0CiAgICAgKiBAcmV0dXJuIFxJbGx1bWluYXRlXEh0dHBcUmVzcG9uc2UKICAgICAqLwoKICAgIHB1YmxpYyBmdW5jdGlvbiBzdG9yZShSZXF1ZXN0c1xQbXNcUmVxdWVzdFByb3Bvc2FsUmVxdWVzdCAkcmVxdWVzdCkKICAgIHsKICAgICAgICAkcHJvcG9zYWxUeXBlID0gJHJlcXVlc3QtPmhhcygndHlwZScpID8gJ29ubGluZScgOiAnbWFudWFsJzsKICAgICAgICBEQjo6YmVnaW5UcmFuc2FjdGlvbigpOwogICAgICAgIHRyeSB7CgogICAgICAgICAgICAvL0NoZWNrIGZvciBBcHByb3ByaWF0ZSBTdXBwbGllcnMKICAgICAgICAgICAgJHN1cHBsaWVycyA9IFN1cHBsaWVyczo6d2l0aChbCiAgICAgICAgICAgICAgICAncHJvZHVjdHMnCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAtPndoZXJlSW4oJ2lkJywgJHJlcXVlc3QtPnN1cHBsaWVyX2lkKQogICAgICAgICAgICAgICAgLT5nZXQoKTsKCiAgICAgICAgICAgICRwcm9kdWN0cyA9IFByb2R1Y3Q6OndpdGgoWwogICAgICAgICAgICAgICAgJ2F0dHJpYnV0ZXMuYXR0cmlidXRlT3B0aW9uLmF0dHJpYnV0ZScKICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIC0+d2hlcmVJbignaWQnLCAkcmVxdWVzdC0+cHJvZHVjdF9pZCkKICAgICAgICAgICAgICAgIC0+Z2V0KCk7CgogICAgICAgICAgICAkZXJyb3JfY291bnQgPSAwOwogICAgICAgICAgICAkbWVzc2FnZXMgPSAnPHVsIGNsYXNzPSJwbC0wIHRleHQtd2hpdGUiPic7CiAgICAgICAgICAgICRhcnJheSA9IFtdOwogICAgICAgICAgICBpZiAoJHN1cHBsaWVycy0+Y291bnQoKSA+IDApIHsKICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRzdXBwbGllcnMgYXMgJGtleSA9PiAkc3VwcGxpZXIpIHsKICAgICAgICAgICAgICAgICAgICAkYXJyYXlbJHN1cHBsaWVyLT5pZF0gPSAwOwogICAgICAgICAgICAgICAgICAgICRzdXBwbGllcl9tZXNzYWdlcyA9ICcnOwogICAgICAgICAgICAgICAgICAgIGlmICgkcHJvZHVjdHMtPmNvdW50KCkgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRwcm9kdWN0cyBhcyAka2V5ID0+ICRwcm9kdWN0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHN1cHBsaWVyLT5wcm9kdWN0cy0+d2hlcmUoJ2lkJywgJHByb2R1Y3QtPmlkKS0+Y291bnQoKSA9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGVycm9yX2NvdW50Kys7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGFycmF5WyRzdXBwbGllci0+aWRdKys7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN1cHBsaWVyX21lc3NhZ2VzIC49ICc8c3Ryb25nPicgLiAkcHJvZHVjdC0+bmFtZSAuICcgJyAuIGdldFByb2R1Y3RBdHRyaWJ1dGVzRmFzdGVyKCRwcm9kdWN0KSAuICc8L3N0cm9uZz4sICc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGlmICgkYXJyYXlbJHN1cHBsaWVyLT5pZF0gPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRtZXNzYWdlcyAuPSAnPGxpIGNsYXNzPSJ0ZXh0LXdoaXRlIj48c3Ryb25nPicgLiAkc3VwcGxpZXItPm5hbWUgLiAnICgnIC4gJHN1cHBsaWVyLT5jb2RlIC4gJyk8L3N0cm9uZz4gZG9lcyBub3Qgc3VwcGx5IC0gJyAuICRzdXBwbGllcl9tZXNzYWdlcyAuICc8L2xpPic7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgICRtZXNzYWdlcyAuPSAnPC91bD4nOwoKICAgICAgICAgICAgaWYgKCRlcnJvcl9jb3VudCA+IDApIHsKICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZSgpLT5qc29uKFsKICAgICAgICAgICAgICAgICAgICAnc3VjY2VzcycgPT4gZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgJ21lc3NhZ2UnID0+ICRtZXNzYWdlcwogICAgICAgICAgICAgICAgXSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy9DaGVjayBmb3IgQXBwcm9wcmlhdGUgU3VwcGxpZXJzCgogICAgICAgICAgICAkcmVxdWVzdFByb3Bvc2FsID0gUmVxdWVzdFByb3Bvc2FsOjpjcmVhdGUoWwogICAgICAgICAgICAgICAgJ3R5cGUnID0+ICRwcm9wb3NhbFR5cGUsCiAgICAgICAgICAgICAgICAncmVmZXJlbmNlX25vJyA9PiAkcmVxdWVzdC0+cmVmZXJlbmNlX25vLAogICAgICAgICAgICAgICAgJ3JlcXVlc3RfZGF0ZScgPT4gZGF0ZSgnWS1tLWQnLCBzdHJ0b3RpbWUoJHJlcXVlc3QtPnJlcXVlc3RfZGF0ZSkpLAogICAgICAgICAgICBdKTsKICAgICAgICAgICAgLy9kZCgkcmVxdWVzdFByb3Bvc2FsKTsKCiAgICAgICAgICAgIGZvcmVhY2ggKCRyZXF1ZXN0LT5zdXBwbGllcl9pZCBhcyAka2V5ID0+ICRzdXBwbGllcl9pZCkgewogICAgICAgICAgICAgICAgaWYgKGlzc2V0KCRhcnJheVskc3VwcGxpZXJfaWRdKSAmJiAkYXJyYXlbJHN1cHBsaWVyX2lkXSA9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgJHJlcXVlc3RQcm9wb3NhbERlZmluZVtdID0gWwogICAgICAgICAgICAgICAgICAgICAgICAncmVxdWVzdF9wcm9wb3NhbF9pZCcgPT4gJHJlcXVlc3RQcm9wb3NhbC0+aWQsCiAgICAgICAgICAgICAgICAgICAgICAgICdzdXBwbGllcl9pZCcgPT4gJHN1cHBsaWVyX2lkLAogICAgICAgICAgICAgICAgICAgIF07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZvcmVhY2ggKCRyZXF1ZXN0LT5wcm9kdWN0X2lkIGFzICRpID0+ICRwcm9kdWN0X2lkKSB7CiAgICAgICAgICAgICAgICAkcmVxdWVzdFByb3Bvc2FsRGV0YWlsc1tdID0gWwogICAgICAgICAgICAgICAgICAgICdyZXF1ZXN0X3Byb3Bvc2FsX2lkJyA9PiAkcmVxdWVzdFByb3Bvc2FsLT5pZCwKICAgICAgICAgICAgICAgICAgICAncHJvZHVjdF9pZCcgPT4gJHByb2R1Y3RfaWQsCiAgICAgICAgICAgICAgICAgICAgJ3JlcXVlc3RfcXR5JyA9PiAkcmVxdWVzdC0+cmVxdWVzdF9xdHlbJHByb2R1Y3RfaWRdLAogICAgICAgICAgICAgICAgICAgICdxdHknID0+ICRyZXF1ZXN0LT5xdHlbJHByb2R1Y3RfaWRdLAogICAgICAgICAgICAgICAgICAgICdjcmVhdGVkX2J5JyA9PiBcQXV0aDo6dXNlcigpLT5pZCwKICAgICAgICAgICAgICAgICAgICAnY3JlYXRlZF9hdCcgPT4gZGF0ZSgnWS1tLWQgaDppJyksCiAgICAgICAgICAgICAgICBdOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvL0ZvciB1cGRhdGUgY29sdW1uIChJc19TZW5kKSBvbiByZXF1aXNpdGlvbiBpdGVtcyB0YWJsZQogICAgICAgICAgICAkcmVxdWlzaXRpb25JZHMgPSBnZXRNZXJnZWRSZXF1aXNpc2lvbklEKFsKICAgICAgICAgICAgICAgICdpc19wb19nZW5lcmF0ZScgPT4gJ25vJywKICAgICAgICAgICAgICAgICdpc19zZW5kX3RvX3JmcCcgPT4gJ3llcycsCiAgICAgICAgICAgICAgICAnZGVsaXZlcnlfc3RhdHVzJyA9PiAncmZwJywKICAgICAgICAgICAgICAgICdhcHByb3ZlZF9pZCcgPT4gMSwKICAgICAgICAgICAgICAgICdzdGF0dXMnID0+IDEsCiAgICAgICAgICAgIF0sIFsKICAgICAgICAgICAgICAgICdpc19wb19nZW5lcmF0ZScgPT4gJ25vJywKICAgICAgICAgICAgICAgICdpc19zZW5kX3RvX3JmcCcgPT4gJ3llcycsCiAgICAgICAgICAgICAgICAnZGVsaXZlcnlfc3RhdHVzJyA9PiAncGFydGlhbC1kZWxpdmVyZWQnLAogICAgICAgICAgICAgICAgJ2FwcHJvdmVkX2lkJyA9PiAxLAogICAgICAgICAgICAgICAgJ3N0YXR1cycgPT4gMSwKICAgICAgICAgICAgICAgICdyZXF1ZXN0X3N0YXR1cycgPT4gJ3NlbmRfcmZwJywKICAgICAgICAgICAgXSk7CgogICAgICAgICAgICAkcmVxdWlzaXRpb25JZEFycmF5ID0gYXJyYXlfdmFsdWVzKGFycmF5X3VuaXF1ZShSZXF1aXNpdGlvbkl0ZW06OndoZXJlKFsnaXNfc2VuZCcgPT4gJ25vJ10pCiAgICAgICAgICAgICAgICAtPndoZXJlSW4oJ3Byb2R1Y3RfaWQnLCAkcmVxdWVzdC0+cHJvZHVjdF9pZCkKICAgICAgICAgICAgICAgIC0+d2hlcmVIYXMoJ3JlcXVpc2l0aW9uJywgZnVuY3Rpb24gKCRxdWVyeSkgdXNlICgkcmVxdWlzaXRpb25JZHMpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgnc3RhdHVzJywgMSktPndoZXJlSW4oJ2lkJywgJHJlcXVpc2l0aW9uSWRzKTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAtPnBsdWNrKCdyZXF1aXNpdGlvbl9pZCcpLT50b0FycmF5KCkpKTsKCiAgICAgICAgICAgIFJlcXVpc2l0aW9uSXRlbTo6d2hlcmVJbigncmVxdWlzaXRpb25faWQnLCAkcmVxdWlzaXRpb25JZEFycmF5KS0+d2hlcmVJbigncHJvZHVjdF9pZCcsICRyZXF1ZXN0LT5wcm9kdWN0X2lkKS0+d2hlcmUoJ2lzX3NlbmQnLCAnbm8nKQogICAgICAgICAgICAgICAgLT51cGRhdGUoWydpc19zZW5kJyA9PiAneWVzJ10pOwoKICAgICAgICAgICAgaWYgKGlzc2V0KCRyZXF1aXNpdGlvbklkQXJyYXlbMF0pKSB7CiAgICAgICAgICAgICAgICBmb3JlYWNoICgkcmVxdWlzaXRpb25JZEFycmF5IGFzICRrZXkgPT4gJHJlcXVpc2l0aW9uX2lkKSB7CiAgICAgICAgICAgICAgICAgICAgUmVxdWVzdFByb3Bvc2FsUmVxdWlzaXRpb25zOjpjcmVhdGUoWwogICAgICAgICAgICAgICAgICAgICAgICAncmVxdWlzaXRpb25faWQnID0+ICRyZXF1aXNpdGlvbl9pZCwKICAgICAgICAgICAgICAgICAgICAgICAgJ3JlcXVlc3RfcHJvcG9zYWxfaWQnID0+ICRyZXF1ZXN0UHJvcG9zYWwtPmlkLAogICAgICAgICAgICAgICAgICAgIF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAvL1JlcXVlc3QgcHJvcG9zYWwgZGVmaW5lIHRvIHN1cHBsaWVyCiAgICAgICAgICAgIFJlcXVlc3RQcm9wb3NhbERlZmluZVN1cHBsaWVyOjppbnNlcnQoJHJlcXVlc3RQcm9wb3NhbERlZmluZSk7CgogICAgICAgICAgICAvL1JlcXVlc3QgcHJvcG9zYWwgZGV0YWlscyBpbnNlcnQKICAgICAgICAgICAgUmVxdWVzdFByb3Bvc2FsRGV0YWlsczo6aW5zZXJ0KCRyZXF1ZXN0UHJvcG9zYWxEZXRhaWxzKTsKCiAgICAgICAgICAgIC8vUmVxdWVzdCBQcm9wb3NhbCBUcmFja2luZwogICAgICAgICAgICBSZXF1ZXN0UHJvcG9zYWxUcmFja2luZzo6U3RvcmVSZXF1ZXN0UHJvcG9zYWxUcmFja2luZygkcmVxdWVzdFByb3Bvc2FsLT5pZCwgJ1JGUCcpOwoKICAgICAgICAgICAgLy9TZW5kIG1haWwgdG8gc3VwcGxpZXIKICAgICAgICAgICAgLy8kdGhpcy0+bWFpbFNlbmRUb1N1cHBsaWVycygkcmVxdWVzdFByb3Bvc2FsLT5pZCwkcmVxdWVzdC0+c3VwcGxpZXJfaWQsJHByb3Bvc2FsVHlwZSk7CgogICAgICAgICAgICBEQjo6Y29tbWl0KCk7CiAgICAgICAgICAgIHNlc3Npb24oKS0+Zmxhc2goJ2FsZXJ0LXR5cGUnLCAnc3VjY2VzcycpOwogICAgICAgICAgICBzZXNzaW9uKCktPmZsYXNoKCdtZXNzYWdlJywgJ1JlcXVlc3QgRm9yIFByb3Bvc2FsIFN1Y2Nlc3NmdWxseSBDcmVhdGVkJyk7CiAgICAgICAgICAgIHJldHVybiByZXNwb25zZSgpLT5qc29uKFsKICAgICAgICAgICAgICAgICdzdWNjZXNzJyA9PiB0cnVlLAogICAgICAgICAgICBdKTsKICAgICAgICB9IGNhdGNoIChcVGhyb3dhYmxlICR0aCkgewogICAgICAgICAgICBEQjo6cm9sbGJhY2soKTsKICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlKCktPmpzb24oWwogICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnID0+IGZhbHNlLAogICAgICAgICAgICAgICAgJ21lc3NhZ2UnID0+ICR0aC0+Z2V0TWVzc2FnZSgpCiAgICAgICAgICAgIF0pOwogICAgICAgIH0KICAgIH0KCiAgICBwdWJsaWMgZnVuY3Rpb24gc3RvcmVTZXBhcmF0ZShSZXF1ZXN0ICRyZXF1ZXN0KQogICAgewogICAgICAgIC8vZGQoJHJlcXVlc3QtPmFsbCgpKTsKICAgICAgICAkdGhpcy0+dmFsaWRhdGUoJHJlcXVlc3QsIFsKICAgICAgICAgICAgJ3JlcXVlc3RfZGF0ZScgPT4gWydyZXF1aXJlZCcsICdkYXRlJ10sCiAgICAgICAgICAgICdyZWZlcmVuY2Vfbm8nID0+IFsncmVxdWlyZWQnLCAnbWF4OjE1JywgJ3VuaXF1ZTpyZXF1ZXN0X3Byb3Bvc2FscyddLAogICAgICAgICAgICAnc3VwcGxpZXJfaWQnID0+IFsncmVxdWlyZWQnXSwKICAgICAgICAgICAgInN1cHBsaWVyX2lkLioiID0+ICJleGlzdHM6c3VwcGxpZXJzLGlkIiwKICAgICAgICAgICAgInJlcXVpc2l0aW9uX2l0ZW1faWQiID0+ICJyZXF1aXJlZHxtaW46MSIsCiAgICAgICAgXSk7CgogICAgICAgICRwcm9wb3NhbFR5cGUgPSAkcmVxdWVzdC0+aGFzKCd0eXBlJykgPyAnb25saW5lJyA6ICdtYW51YWwnOwoKICAgICAgICAvL2RkKCRyZXF1ZXN0LT5hbGwoKSk7CgogICAgICAgIERCOjpiZWdpblRyYW5zYWN0aW9uKCk7CiAgICAgICAgdHJ5IHsKCiAgICAgICAgICAgIC8vQ2hlY2sgZm9yIEFwcHJvcHJpYXRlIFN1cHBsaWVycwogICAgICAgICAgICAkc3VwcGxpZXJzID0gU3VwcGxpZXJzOjp3aXRoKFsKICAgICAgICAgICAgICAgICdwcm9kdWN0cycKICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIC0+d2hlcmVJbignaWQnLCAkcmVxdWVzdC0+c3VwcGxpZXJfaWQpCiAgICAgICAgICAgICAgICAtPmdldCgpOwoKICAgICAgICAgICAgJHJlcXVpc2l0aW9uSXRlbXMgPSBSZXF1aXNpdGlvbkl0ZW06OndpdGgoWwogICAgICAgICAgICAgICAgJ3Byb2R1Y3QuYXR0cmlidXRlcy5hdHRyaWJ1dGVPcHRpb24uYXR0cmlidXRlJwogICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgLT53aGVyZUluKCdpZCcsICRyZXF1ZXN0LT5yZXF1aXNpdGlvbl9pdGVtX2lkKQogICAgICAgICAgICAgICAgLT5nZXQoKTsKCiAgICAgICAgICAgIGlmICghJHJlcXVlc3QtPmFscmVhZHlfcXVvdGF0aW9uKSB7CiAgICAgICAgICAgICAgICAkZXJyb3JfY291bnQgPSAwOwogICAgICAgICAgICAgICAgJG1lc3NhZ2VzID0gJzx1bCBjbGFzcz0icGwtMCB0ZXh0LXdoaXRlIj4nOwogICAgICAgICAgICAgICAgJGFycmF5ID0gW107CiAgICAgICAgICAgICAgICBpZiAoJHN1cHBsaWVycy0+Y291bnQoKSA+IDApIHsKICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkc3VwcGxpZXJzIGFzICRrZXkgPT4gJHN1cHBsaWVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRhcnJheVskc3VwcGxpZXItPmlkXSA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICRzdXBwbGllcl9tZXNzYWdlcyA9ICcnOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHJlcXVpc2l0aW9uSXRlbXMtPmNvdW50KCkgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkcmVxdWlzaXRpb25JdGVtcyBhcyAka2V5ID0+ICRyZXF1aXNpdGlvbkl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHN1cHBsaWVyLT5wcm9kdWN0cy0+d2hlcmUoJ2lkJywgJHJlcXVpc2l0aW9uSXRlbS0+cHJvZHVjdF9pZCktPmNvdW50KCkgPT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZXJyb3JfY291bnQrKzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGFycmF5WyRzdXBwbGllci0+aWRdKys7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdXBwbGllcl9tZXNzYWdlcyAuPSAnPHN0cm9uZz4nIC4gJHJlcXVpc2l0aW9uSXRlbS0+cHJvZHVjdC0+bmFtZSAuICcgJyAuIGdldFByb2R1Y3RBdHRyaWJ1dGVzRmFzdGVyKCRyZXF1aXNpdGlvbkl0ZW0tPnByb2R1Y3QpIC4gJzwvc3Ryb25nPiwgJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkYXJyYXlbJHN1cHBsaWVyLT5pZF0gPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbWVzc2FnZXMgLj0gJzxsaSBjbGFzcz0idGV4dC13aGl0ZSI+PHN0cm9uZz4nIC4gJHN1cHBsaWVyLT5uYW1lIC4gJyAoJyAuICRzdXBwbGllci0+Y29kZSAuICcpPC9zdHJvbmc+IGRvZXMgbm90IHN1cHBseSAtICcgLiAkc3VwcGxpZXJfbWVzc2FnZXMgLiAnPC9saT4nOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJG1lc3NhZ2VzIC49ICc8L3VsPic7CgogICAgICAgICAgICAgICAgaWYgKCRlcnJvcl9jb3VudCA+IDApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UoKS0+anNvbihbCiAgICAgICAgICAgICAgICAgICAgICAgICdzdWNjZXNzJyA9PiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgJ21lc3NhZ2UnID0+ICRtZXNzYWdlcwogICAgICAgICAgICAgICAgICAgIF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy9DaGVjayBmb3IgQXBwcm9wcmlhdGUgU3VwcGxpZXJzCiAgICAgICAgICAgIH0KCgogICAgICAgICAgICAkcmVxdWVzdFByb3Bvc2FsID0gUmVxdWVzdFByb3Bvc2FsOjpjcmVhdGUoWwogICAgICAgICAgICAgICAgJ3R5cGUnID0+ICRwcm9wb3NhbFR5cGUsCiAgICAgICAgICAgICAgICAncmVmZXJlbmNlX25vJyA9PiAkcmVxdWVzdC0+cmVmZXJlbmNlX25vLAogICAgICAgICAgICAgICAgJ3Byb2plY3RfbmFtZScgPT4gJHJlcXVlc3QtPnByb2plY3RfbmFtZSwKICAgICAgICAgICAgICAgICdyZW1hcmtzJyA9PiAkcmVxdWVzdC0+cmVtYXJrcywKICAgICAgICAgICAgICAgICdyZXF1ZXN0X2RhdGUnID0+IGRhdGUoJ1ktbS1kJywgc3RydG90aW1lKCRyZXF1ZXN0LT5yZXF1ZXN0X2RhdGUpKSwKICAgICAgICAgICAgXSk7CgoKICAgICAgICAgICAgZm9yZWFjaCAoJHJlcXVlc3QtPnN1cHBsaWVyX2lkIGFzICRrZXkgPT4gJHN1cHBsaWVyX2lkKSB7CiAgICAgICAgICAgICAgICBpZiAoISRyZXF1ZXN0LT5hbHJlYWR5X3F1b3RhdGlvbikgewogICAgICAgICAgICAgICAgICAgIGlmIChpc3NldCgkYXJyYXlbJHN1cHBsaWVyX2lkXSkgJiYgJGFycmF5WyRzdXBwbGllcl9pZF0gPT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdFByb3Bvc2FsRGVmaW5lW10gPSBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmVxdWVzdF9wcm9wb3NhbF9pZCcgPT4gJHJlcXVlc3RQcm9wb3NhbC0+aWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3VwcGxpZXJfaWQnID0+ICRzdXBwbGllcl9pZCwKICAgICAgICAgICAgICAgICAgICAgICAgXTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICRyZXF1ZXN0UHJvcG9zYWxEZWZpbmVbXSA9IFsKICAgICAgICAgICAgICAgICAgICAgICAgJ3JlcXVlc3RfcHJvcG9zYWxfaWQnID0+ICRyZXF1ZXN0UHJvcG9zYWwtPmlkLAogICAgICAgICAgICAgICAgICAgICAgICAnc3VwcGxpZXJfaWQnID0+ICRzdXBwbGllcl9pZCwKICAgICAgICAgICAgICAgICAgICBdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAkcXR5ID0gW107CiAgICAgICAgICAgIGlmIChpc19hcnJheSgkcmVxdWVzdC0+cXR5KSAmJiBjb3VudCgkcmVxdWVzdC0+cXR5KSA+IDApIHsKICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRyZXF1ZXN0LT5xdHkgYXMgJGNvbWJpbmVkID0+ICR2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgIGlmIChpbl9hcnJheShleHBsb2RlKCcmJywgJGNvbWJpbmVkKVsxXSwgJHJlcXVlc3QtPnJlcXVpc2l0aW9uX2l0ZW1faWQpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNzZXQoJHF0eVtleHBsb2RlKCcmJywgJGNvbWJpbmVkKVsxXV0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcXR5W2V4cGxvZGUoJyYnLCAkY29tYmluZWQpWzFdXSA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgJHF0eVtleHBsb2RlKCcmJywgJGNvbWJpbmVkKVsxXV0gKz0gY29sbGVjdCgkdmFsdWUpLT5zdW0oKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRyZXF1ZXN0X3F0eSA9IFtdOwogICAgICAgICAgICBpZiAoaXNfYXJyYXkoJHJlcXVlc3QtPnJlcXVlc3RfcXR5KSAmJiBjb3VudCgkcmVxdWVzdC0+cmVxdWVzdF9xdHkpID4gMCkgewogICAgICAgICAgICAgICAgZm9yZWFjaCAoJHJlcXVlc3QtPnJlcXVlc3RfcXR5IGFzICRjb21iaW5lZCA9PiAkdmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoaW5fYXJyYXkoZXhwbG9kZSgnJicsICRjb21iaW5lZClbMV0sICRyZXF1ZXN0LT5yZXF1aXNpdGlvbl9pdGVtX2lkKSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzc2V0KCRyZXF1ZXN0X3F0eVtleHBsb2RlKCcmJywgJGNvbWJpbmVkKVsxXV0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9xdHlbZXhwbG9kZSgnJicsICRjb21iaW5lZClbMV1dID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9xdHlbZXhwbG9kZSgnJicsICRjb21iaW5lZClbMV1dICs9IGNvbGxlY3QoJHZhbHVlKS0+c3VtKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoaXNfYXJyYXkoJHJlcXVlc3QtPnF0eSkgJiYgY291bnQoJHJlcXVlc3QtPnF0eSkgPiAwKSB7CiAgICAgICAgICAgICAgICBmb3JlYWNoICgkcmVxdWVzdC0+cXR5IGFzICRjb21iaW5lZCA9PiAkdmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoaW5fYXJyYXkoZXhwbG9kZSgnJicsICRjb21iaW5lZClbMV0sICRyZXF1ZXN0LT5yZXF1aXNpdGlvbl9pdGVtX2lkKSkgewogICAgICAgICAgICAgICAgICAgICAgICAkdGhpc19yZXF1aXNpdGlvbl9pdGVtID0gJHJlcXVpc2l0aW9uSXRlbXMtPndoZXJlKCdpZCcsIGV4cGxvZGUoJyYnLCAkY29tYmluZWQpWzFdKS0+Zmlyc3QoKTsKICAgICAgICAgICAgICAgICAgICAgICAgJHJlcXVlc3RQcm9wb3NhbERldGFpbHNbXSA9IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1aWQnID0+ICR0aGlzX3JlcXVpc2l0aW9uX2l0ZW0tPnVpZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyZXF1ZXN0X3Byb3Bvc2FsX2lkJyA9PiAkcmVxdWVzdFByb3Bvc2FsLT5pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwcm9kdWN0X2lkJyA9PiAkdGhpc19yZXF1aXNpdGlvbl9pdGVtLT5wcm9kdWN0X2lkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3JlcXVlc3RfcXR5JyA9PiAkcmVxdWVzdF9xdHlbJHRoaXNfcmVxdWlzaXRpb25faXRlbS0+aWRdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3F0eScgPT4gJHF0eVskdGhpc19yZXF1aXNpdGlvbl9pdGVtLT5pZF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY3JlYXRlZF9ieScgPT4gYXV0aCgpLT51c2VyKCktPmlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NyZWF0ZWRfYXQnID0+IGRhdGUoJ1ktbS1kIEg6aTpzJyksCiAgICAgICAgICAgICAgICAgICAgICAgIF07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAkcmVxdWlzaXRpb25JZEFycmF5ID0gYXJyYXlfdmFsdWVzKGFycmF5X3VuaXF1ZShSZXF1aXNpdGlvbkl0ZW06OndoZXJlKFsnaXNfc2VuZCcgPT4gJ25vJ10pCiAgICAgICAgICAgICAgICAtPndoZXJlSW4oJ2lkJywgJHJlcXVlc3QtPnJlcXVpc2l0aW9uX2l0ZW1faWQpCiAgICAgICAgICAgICAgICAtPnBsdWNrKCdyZXF1aXNpdGlvbl9pZCcpLT50b0FycmF5KCkpKTsKCiAgICAgICAgICAgIC8qVXBkYXRlIHJlcXVpc2l0aW9uIGl0ZW1zIHN0YXR1cyBpc1NlbmQ9IHllcyovCgogICAgICAgICAgICBSZXF1aXNpdGlvbkl0ZW06OndoZXJlSW4oJ2lkJywgJHJlcXVlc3QtPnJlcXVpc2l0aW9uX2l0ZW1faWQpCiAgICAgICAgICAgICAgICAtPndoZXJlKCdpc19zZW5kJywgJ25vJykKICAgICAgICAgICAgICAgIC0+dXBkYXRlKFsKICAgICAgICAgICAgICAgICAgICAnaXNfc2VuZCcgPT4gJ3llcycKICAgICAgICAgICAgICAgIF0pOwoKICAgICAgICAgICAgaWYgKGlzc2V0KCRyZXF1aXNpdGlvbklkQXJyYXlbMF0pKSB7CiAgICAgICAgICAgICAgICBmb3JlYWNoICgkcmVxdWlzaXRpb25JZEFycmF5IGFzICRrZXkgPT4gJHJlcXVpc2l0aW9uX2lkKSB7CiAgICAgICAgICAgICAgICAgICAgJHByb3Bvc2FsUmVxdWlzaXRpb24gPSBSZXF1ZXN0UHJvcG9zYWxSZXF1aXNpdGlvbnM6OmNyZWF0ZShbCiAgICAgICAgICAgICAgICAgICAgICAgICdyZXF1aXNpdGlvbl9pZCcgPT4gJHJlcXVpc2l0aW9uX2lkLAogICAgICAgICAgICAgICAgICAgICAgICAncmVxdWVzdF9wcm9wb3NhbF9pZCcgPT4gJHJlcXVlc3RQcm9wb3NhbC0+aWQsCiAgICAgICAgICAgICAgICAgICAgXSk7CgogICAgICAgICAgICAgICAgICAgICRyZXF1aXNpdGlvbklkID0gJHByb3Bvc2FsUmVxdWlzaXRpb24tPnJlcXVpc2l0aW9uX2lkOwogICAgICAgICAgICAgICAgICAgIGlmICgkcmVxdWlzaXRpb25JZCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXF1aXNpdGlvblRyYWNraW5nSGlzdG9yeSgkcmVxdWlzaXRpb25JZCwgJ3Byb3Bvc2FsX3NlbmRfdG9fc3VwcGxpZXInLCAnUHJvcG9zYWwgU2VuZCB0byBTdXBwbGllcicpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vSW5zZXJ0IHJlcXVlc3Qgc3VwcGxpZXIKICAgICAgICAgICAgUmVxdWVzdFByb3Bvc2FsRGVmaW5lU3VwcGxpZXI6Omluc2VydCgkcmVxdWVzdFByb3Bvc2FsRGVmaW5lKTsKICAgICAgICAgICAgLy9JbnNlcnQgcHJvcG9zYWwgZGV0YWlscwogICAgICAgICAgICBSZXF1ZXN0UHJvcG9zYWxEZXRhaWxzOjppbnNlcnQoJHJlcXVlc3RQcm9wb3NhbERldGFpbHMpOwogICAgICAgICAgICAvL1JlcXVlc3QgUHJvcG9zYWwgVHJhY2tpbmcKICAgICAgICAgICAgUmVxdWVzdFByb3Bvc2FsVHJhY2tpbmc6OlN0b3JlUmVxdWVzdFByb3Bvc2FsVHJhY2tpbmcoJHJlcXVlc3RQcm9wb3NhbC0+aWQsICdSRlAnKTsKICAgICAgICAgICAgLy9NYWlsIHNlbmQgdG8gc3VwcGxpZXIKCiAgICAgICAgICAgICR0aGlzLT5tYWlsU2VuZFRvU3VwcGxpZXJzKCRyZXF1ZXN0UHJvcG9zYWwtPmlkLCAkcmVxdWVzdC0+c3VwcGxpZXJfaWQsICRwcm9wb3NhbFR5cGUpOwoKICAgICAgICAgICAgLy9EQiBDb21taXQKICAgICAgICAgICAgREI6OmNvbW1pdCgpOwoKICAgICAgICAgICAgc2Vzc2lvbigpLT5mbGFzaCgnYWxlcnQtdHlwZScsICdzdWNjZXNzJyk7CiAgICAgICAgICAgIHNlc3Npb24oKS0+Zmxhc2goJ21lc3NhZ2UnLCAnUmVxdWVzdCBGb3IgUHJvcG9zYWwgU3VjY2Vzc2Z1bGx5IENyZWF0ZWQnKTsKICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlKCktPmpzb24oWwogICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnID0+IHRydWUsCiAgICAgICAgICAgIF0pOwogICAgICAgIH0gY2F0Y2ggKFxUaHJvd2FibGUgJHRoKSB7CiAgICAgICAgICAgIERCOjpyb2xsYmFjaygpOwogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UoKS0+anNvbihbCiAgICAgICAgICAgICAgICAnc3VjY2VzcycgPT4gZmFsc2UsCiAgICAgICAgICAgICAgICAnbWVzc2FnZScgPT4gJHRoLT5nZXRNZXNzYWdlKCkKICAgICAgICAgICAgXSk7CiAgICAgICAgfQogICAgfQoKCiAgICBwdWJsaWMgZnVuY3Rpb24gbWFpbFNlbmRUb1N1cHBsaWVycygkcmVxdWVzdFByb3Bvc2FsSWQsICRzdXBwbGllcklkcywgJHByb3Bvc2FsVHlwZSA9IG51bGwpCiAgICB7CgogICAgICAgICRzdXBwbGllcnMgPSBTdXBwbGllcnM6OndoZXJlKCdzdGF0dXMnLCAnQWN0aXZlJyktPndoZXJlSW4oJ2lkJywgJHN1cHBsaWVySWRzKS0+Z2V0KCk7CgogICAgICAgIGZvcmVhY2ggKCRzdXBwbGllcnMgYXMgJHN1cHBsaWVyKSB7CgogICAgICAgICAgICAkcmVxdWVzdFByb3Bvc2FsID0gUmVxdWVzdFByb3Bvc2FsOjp3aXRoKFsKICAgICAgICAgICAgICAgICdkZWZpbmVUb1N1cHBsaWVyJywKICAgICAgICAgICAgICAgICdyZXF1ZXN0UHJvcG9zYWxEZXRhaWxzJywKICAgICAgICAgICAgICAgICdyZXF1ZXN0UHJvcG9zYWxEZXRhaWxzLnByb2R1Y3QuYXR0cmlidXRlcy5hdHRyaWJ1dGVPcHRpb24uYXR0cmlidXRlJywKICAgICAgICAgICAgICAgICdyZXF1ZXN0UHJvcG9zYWxSZXF1aXNpdGlvbi5yZWxSZXF1aXNpdGlvbi5Vbml0JywKICAgICAgICAgICAgICAgICdjcmVhdGVkQnkuZW1wbG95ZWUuZGVzaWduYXRpb24nCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAtPndoZXJlSGFzKCdkZWZpbmVUb1N1cHBsaWVyJywgZnVuY3Rpb24gKCRxdWVyeSkgdXNlICgkc3VwcGxpZXIpIHsKICAgICAgICAgICAgICAgICAgICAkcXVlcnktPndoZXJlKCdyZXF1ZXN0X3Byb3Bvc2FsX2RlZmluZV9zdXBwbGllcnMuc3VwcGxpZXJfaWQnLCAkc3VwcGxpZXItPmlkKTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAtPmZpbmQoJHJlcXVlc3RQcm9wb3NhbElkKTsKCiAgICAgICAgICAgIFxMb2c6OmluZm8oJ1JGUCBNYWlsIERhdGEnLCBbJ3JlcXVlc3RQcm9wb3NhbCcgPT4gJHJlcXVlc3RQcm9wb3NhbCwgJ3N1cHBsaWVyJyA9PiAkc3VwcGxpZXJdKTsKCiAgICAgICAgICAgIHRyeSB7CgogICAgICAgICAgICAgICAgJHN1cHBsaWVyRW1haWwgPSAkc3VwcGxpZXIgPyAkc3VwcGxpZXItPmVtYWlsIDogbnVsbDsKICAgICAgICAgICAgICAgIGlmIChpc01haWxDb25maWd1cmVkKCRzdXBwbGllcikpIHsKICAgICAgICAgICAgICAgICAgICAkZGF0YVsiZW1haWwiXSA9ICRzdXBwbGllckVtYWlsOwogICAgICAgICAgICAgICAgICAgICRkYXRhWyJ0aXRsZSJdID0gIlJlcXVlc3QgRm9yIFByb3Bvc2FsIEVtYWlsIjsKICAgICAgICAgICAgICAgICAgICAkZGF0YVsicmVmZXJlbmNlX25vIl0gPSAkcmVxdWVzdFByb3Bvc2FsLT5yZWZlcmVuY2Vfbm87CiAgICAgICAgICAgICAgICAgICAgJGRhdGFbInJlcXVlc3RQcm9wb3NhbCJdID0gJHJlcXVlc3RQcm9wb3NhbDsKICAgICAgICAgICAgICAgICAgICAkZGF0YVsic3VwcGxpZXIiXSA9ICRzdXBwbGllcjsKICAgICAgICAgICAgICAgICAgICAkZGF0YVsicHJvcG9zYWxUeXBlIl0gPSAkcHJvcG9zYWxUeXBlOwogICAgICAgICAgICAgICAgICAgICRkYXRhWyJjdXJyZW50X3VybCJdID0gXFVSTDo6dG8oJy8nKTsKICAgICAgICAgICAgICAgICAgICAkZGF0YVsibWFpbF9ib2R5Il0gPSAncG1zLmJhY2tlbmQubWFpbC5yZXF1ZXN0LXByb3Bvc2FsLW1haWwnOwogICAgICAgICAgICAgICAgICAgICRkYXRhWyd1bml0X25hbWUnXSA9IGlzc2V0KCRyZXF1ZXN0UHJvcG9zYWwtPnJlcXVlc3RQcm9wb3NhbFJlcXVpc2l0aW9uLT5maXJzdCgpLT5yZWxSZXF1aXNpdGlvbi0+VW5pdC0+aHJfdW5pdF9uYW1lKSA/ICRyZXF1ZXN0UHJvcG9zYWwtPnJlcXVlc3RQcm9wb3NhbFJlcXVpc2l0aW9uLT5maXJzdCgpLT5yZWxSZXF1aXNpdGlvbi0+VW5pdC0+aHJfdW5pdF9uYW1lIDogJyc7CgogICAgICAgICAgICAgICAgICAgICR2aWV3ID0gJ3Btcy5iYWNrZW5kLm1haWwucmZwX21haWxfYm9keSc7CiAgICAgICAgICAgICAgICAgICAgc2VuZEVtYWlsKCR2aWV3LCAkZGF0YSwgJGRhdGFbJ3RpdGxlJ10sICRkYXRhWyJlbWFpbCJdLCBbXSwgW10sIFtdKTsKCiAgICAgICAgICAgICAgICAgICAgXExvZzo6aW5mbygiUkZQIE1haWwgc2VudCB0byB7JHN1cHBsaWVyLT5uYW1lfSAoeyRzdXBwbGllckVtYWlsfSkgZm9yIFJGUDogeyRyZXF1ZXN0UHJvcG9zYWwtPnJlZmVyZW5jZV9ub30iKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIH0gY2F0Y2ggKFxFeGNlcHRpb24gJGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZSgpLT5qc29uKFsKICAgICAgICAgICAgICAgICAgICAnc3VjY2VzcycgPT4gZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgJ21lc3NhZ2UnID0+ICJGYWlsZWQgdG8gc2VuZCBtYWlsIHRvIHskc3VwcGxpZXItPm5hbWV9LiBFcnJvcjogIiAuICRlLT5nZXRNZXNzYWdlKCkKICAgICAgICAgICAgICAgIF0sIDUwMCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBEaXNwbGF5IHRoZSBzcGVjaWZpZWQgcmVzb3VyY2UuCiAgICAgKgogICAgICogQHBhcmFtIFxBcHBcTW9kZWxzXFJlcXVlc3RQcm9wb3NhbCAkcmVxdWVzdFByb3Bvc2FsCiAgICAgKiBAcmV0dXJuIFxJbGx1bWluYXRlXEh0dHBcUmVzcG9uc2UKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIHNob3coJGlkKQogICAgewogICAgICAgIGlmIChyZXF1ZXN0KCktPmhhcygncHJldmlldycpKSB7CiAgICAgICAgICAgICRxdW90YXRpb25zID0gUXVvdGF0aW9uczo6d2l0aCgKICAgICAgICAgICAgICAgICdyZWxQdXJjaGFzZU9yZGVyJwogICAgICAgICAgICApLT53aGVyZSgncmVxdWVzdF9wcm9wb3NhbF9pZCcsICRpZCktPmdldCgpOwogICAgICAgICAgICAkc3lzdGVtQ3VycmVuY3kgPSBzeXN0ZW1DdXJyZW5jeSgpOwoKICAgICAgICAgICAgJHF1b3RhdGlvbkluZm8gPSBbXTsKICAgICAgICAgICAgaWYgKGlzc2V0KCRxdW90YXRpb25zWzBdKSkgewogICAgICAgICAgICAgICAgZm9yZWFjaCAoJHF1b3RhdGlvbnMgYXMgJHF1b3RhdGlvbikgewogICAgICAgICAgICAgICAgICAgICRpdGVtcyA9IFtdOwogICAgICAgICAgICAgICAgICAgICRxX3N0ID0gMDsKICAgICAgICAgICAgICAgICAgICAkcV9lc3QgPSAwOwogICAgICAgICAgICAgICAgICAgICRxX2QgPSAwOwogICAgICAgICAgICAgICAgICAgICRxX2VkID0gMDsKICAgICAgICAgICAgICAgICAgICAkcV92ID0gMDsKICAgICAgICAgICAgICAgICAgICAkcV92X2V4ID0gMDsKICAgICAgICAgICAgICAgICAgICAkcV9ldiA9IDA7CiAgICAgICAgICAgICAgICAgICAgJHFfZXZfZXggPSAwOwogICAgICAgICAgICAgICAgICAgICR0aGlzRXhjaGFuZ2VSYXRlID0gZXhjaGFuZ2VSYXRlKCRxdW90YXRpb24tPmV4Y2hhbmdlUmF0ZSwgJHN5c3RlbUN1cnJlbmN5LT5pZCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGlzc2V0KCRxdW90YXRpb24tPnJlbFF1b3RhdGlvbkl0ZW1zWzBdKSkgewogICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkcXVvdGF0aW9uLT5yZWxRdW90YXRpb25JdGVtcyBhcyAkaXRlbSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0ID0gJGl0ZW0tPnF0eSAqICRpdGVtLT51bml0X3ByaWNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGVzdCA9ICRzdCAqICR0aGlzRXhjaGFuZ2VSYXRlOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRkID0gJHN0ID4gMCAmJiAkaXRlbS0+ZGlzY291bnQgPiAwID8gJHN0ICogKCRpdGVtLT5kaXNjb3VudCAvIDEwMCkgOiAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGVkID0gJGQgKiAkdGhpc0V4Y2hhbmdlUmF0ZTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYWZ0ZXIgPSAkc3QgLSAkZDsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdiA9ICRpdGVtLT52YXQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZXYgPSAkdiAqICR0aGlzRXhjaGFuZ2VSYXRlOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRxX3N0ICs9ICRzdDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRxX2VzdCArPSAkZXN0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHFfZCArPSAkZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRxX2VkICs9ICRlZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRxX3YgKz0gJHY7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcV92X2V4ICs9ICgkaXRlbS0+dmF0X3R5cGUgPT0gJ2V4Y2x1c2l2ZScgPyAkdiA6IDApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHFfZXYgKz0gJGV2OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHFfZXZfZXggKz0gKCRpdGVtLT52YXRfdHlwZSA9PSAnZXhjbHVzaXZlJyA/ICRldiA6IDApOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpdGVtc1skaXRlbS0+dWlkXSA9IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncXR5JyA9PiAkaXRlbS0+cXR5LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1bml0X3ByaWNlJyA9PiAkaXRlbS0+dW5pdF9wcmljZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3ViX3RvdGFsJyA9PiAkc3QsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V4Y2hhbmdlX3N1Yl90b3RhbCcgPT4gJGVzdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXBwcm92ZWRfcXR5JyA9PiAkaXRlbS0+YXBwcm92ZWRfcXR5LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgXTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgJHF1b3RhdGlvbkluZm9bJHF1b3RhdGlvbi0+aWRdID0gWwogICAgICAgICAgICAgICAgICAgICAgICAnaXRlbXMnID0+ICRpdGVtcywKICAgICAgICAgICAgICAgICAgICAgICAgJ3N1Yl90b3RhbCcgPT4gJHFfc3QsCiAgICAgICAgICAgICAgICAgICAgICAgICdleGNoYW5nZV9zdWJfdG90YWwnID0+ICRxX2VzdCwKICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc2NvdW50JyA9PiAkcV9kLAogICAgICAgICAgICAgICAgICAgICAgICAnZXhjaGFuZ2VfZGlzY291bnQnID0+ICRxX2VkLAogICAgICAgICAgICAgICAgICAgICAgICAndmF0JyA9PiAkcV92LAogICAgICAgICAgICAgICAgICAgICAgICAnZXhjaGFuZ2VfdmF0JyA9PiAkcV9ldiwKICAgICAgICAgICAgICAgICAgICAgICAgJ2dyb3NzJyA9PiAkcV9zdCAtICRxX2QgKyAkcV92X2V4LAogICAgICAgICAgICAgICAgICAgICAgICAnZXhjaGFuZ2VfZ3Jvc3MnID0+ICRxX2VzdCAtICRxX2VkICsgJHFfZXZfZXgsCiAgICAgICAgICAgICAgICAgICAgXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdmlldygncG1zLmJhY2tlbmQucGFnZXMucXVvdGF0aW9uLnByZXZpZXcnLCBbCiAgICAgICAgICAgICAgICAncXVvdGF0aW9ucycgPT4gJHF1b3RhdGlvbnMsCiAgICAgICAgICAgICAgICAnc3lzdGVtQ3VycmVuY3knID0+ICRzeXN0ZW1DdXJyZW5jeSwKICAgICAgICAgICAgICAgICdxdW90YXRpb25JbmZvJyA9PiAkcXVvdGF0aW9uSW5mbywKICAgICAgICAgICAgICAgICdyZXF1aXNpdGlvbkl0ZW1zJyA9PiBSZXF1aXNpdGlvbkl0ZW06OndpdGgoWwogICAgICAgICAgICAgICAgICAgICdhdHRyaWJ1dGVzLmF0dHJpYnV0ZU9wdGlvbi5hdHRyaWJ1dGUnCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIC0+d2hlcmVIYXMoJ3JlcXVpc2l0aW9uLnJlcXVlc3RQcm9wb3NhbFJlcXVpc2l0aW9uJywgZnVuY3Rpb24gKCRxdWVyeSkgdXNlICgkaWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoJ3JlcXVlc3RfcHJvcG9zYWxfaWQnLCAkaWQpOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLT5nZXQoKSwKICAgICAgICAgICAgXSk7CiAgICAgICAgfQoKICAgICAgICAkdGl0bGUgPSAnQ1MgRGV0YWlscyc7CiAgICAgICAgJHJlcXVlc3RQcm9wb3NhbCA9IFJlcXVlc3RQcm9wb3NhbDo6d2l0aChbCiAgICAgICAgICAgICdkZWZpbmVUb1N1cHBsaWVyLnN1cHBsaWVyJywKICAgICAgICAgICAgJ3JlcXVlc3RQcm9wb3NhbERldGFpbHMucHJvZHVjdC5jYXRlZ29yeS5jYXRlZ29yeScsCiAgICAgICAgICAgICdyZXF1ZXN0UHJvcG9zYWxEZXRhaWxzLnByb2R1Y3QucHJvZHVjdFVuaXQnLAogICAgICAgICAgICAncmVxdWVzdFByb3Bvc2FsRGV0YWlscy5wcm9kdWN0LmF0dHJpYnV0ZXMuYXR0cmlidXRlT3B0aW9uLmF0dHJpYnV0ZScsCiAgICAgICAgICAgICdjcmVhdGVkQnknCiAgICAgICAgXSktPmZpbmRPckZhaWwoJGlkKTsKICAgICAgICAkcmVxdWlzaXRpb25JdGVtcyA9IFJlcXVpc2l0aW9uSXRlbTo6d2l0aChbCiAgICAgICAgICAgICdhdHRyaWJ1dGVzLmF0dHJpYnV0ZU9wdGlvbi5hdHRyaWJ1dGUnCiAgICAgICAgXSkKICAgICAgICAgICAgLT53aGVyZUhhcygncmVxdWlzaXRpb24ucmVxdWVzdFByb3Bvc2FsUmVxdWlzaXRpb24nLCBmdW5jdGlvbiAoJHF1ZXJ5KSB1c2UgKCRyZXF1ZXN0UHJvcG9zYWwpIHsKICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlKCdyZXF1ZXN0X3Byb3Bvc2FsX2lkJywgJHJlcXVlc3RQcm9wb3NhbC0+aWQpOwogICAgICAgICAgICB9KQogICAgICAgICAgICAtPmdldCgpOwogICAgICAgIHJldHVybiB2aWV3KCdwbXMuYmFja2VuZC5wYWdlcy5yZnAucmVxdWVzdC1wcm9wb3NhbC1kZXRhaWxzJywgY29tcGFjdCgndGl0bGUnLCAncmVxdWVzdFByb3Bvc2FsJywgJ3JlcXVpc2l0aW9uSXRlbXMnKSk7CiAgICB9CgoKCiAgICAvLyBwdWJsaWMgZnVuY3Rpb24gY3NQb0hpc3RvcnlQcmV2aWV3KCRpZCkKICAgIC8vIHsKICAgIC8vICAgICBpZiAocmVxdWVzdCgpLT5oYXMoJ3ByZXZpZXcnKSkgewogICAgLy8gICAgICAgICAvLyBMb2FkIHlvdXIgUE8gSGlzdG9yeS1yZWxhdGVkIGRhdGEKICAgIC8vICAgICAgICAgJHF1b3RhdGlvbnMgPSBRdW90YXRpb25zOjp3aGVyZSgncmVxdWVzdF9wcm9wb3NhbF9pZCcsICRpZCktPmdldCgpOwogICAgLy8gICAgICAgICAkc3lzdGVtQ3VycmVuY3kgPSBzeXN0ZW1DdXJyZW5jeSgpOwoKICAgIC8vICAgICAgICAgJHF1b3RhdGlvbkluZm8gPSBbXTsKICAgIC8vICAgICAgICAgaWYgKGlzc2V0KCRxdW90YXRpb25zWzBdKSkgewogICAgLy8gICAgICAgICAgICAgZm9yZWFjaCAoJHF1b3RhdGlvbnMgYXMgJHF1b3RhdGlvbikgewogICAgLy8gICAgICAgICAgICAgICAgICRpdGVtcyA9IFtdOwogICAgLy8gICAgICAgICAgICAgICAgICRxX3N0ID0gJHFfZXN0ID0gJHFfZCA9ICRxX2VkID0gJHFfdiA9ICRxX3ZfZXggPSAkcV9ldiA9ICRxX2V2X2V4ID0gMDsKICAgIC8vICAgICAgICAgICAgICAgICAkdGhpc0V4Y2hhbmdlUmF0ZSA9IGV4Y2hhbmdlUmF0ZSgkcXVvdGF0aW9uLT5leGNoYW5nZVJhdGUsICRzeXN0ZW1DdXJyZW5jeS0+aWQpOwoKICAgIC8vICAgICAgICAgICAgICAgICBmb3JlYWNoICgkcXVvdGF0aW9uLT5yZWxRdW90YXRpb25JdGVtcyBhcyAkaXRlbSkgewogICAgLy8gICAgICAgICAgICAgICAgICAgICAkc3QgPSAkaXRlbS0+cXR5ICogJGl0ZW0tPnVuaXRfcHJpY2U7CiAgICAvLyAgICAgICAgICAgICAgICAgICAgICRlc3QgPSAkc3QgKiAkdGhpc0V4Y2hhbmdlUmF0ZTsKCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICRkID0gJHN0ID4gMCAmJiAkaXRlbS0+ZGlzY291bnQgPiAwID8gJHN0ICogKCRpdGVtLT5kaXNjb3VudCAvIDEwMCkgOiAwOwogICAgLy8gICAgICAgICAgICAgICAgICAgICAkZWQgPSAkZCAqICR0aGlzRXhjaGFuZ2VSYXRlOwoKICAgIC8vICAgICAgICAgICAgICAgICAgICAgJHYgPSAkaXRlbS0+dmF0OwogICAgLy8gICAgICAgICAgICAgICAgICAgICAkZXYgPSAkdiAqICR0aGlzRXhjaGFuZ2VSYXRlOwoKICAgIC8vICAgICAgICAgICAgICAgICAgICAgJHFfc3QgKz0gJHN0OwogICAgLy8gICAgICAgICAgICAgICAgICAgICAkcV9lc3QgKz0gJGVzdDsKICAgIC8vICAgICAgICAgICAgICAgICAgICAgJHFfZCArPSAkZDsKICAgIC8vICAgICAgICAgICAgICAgICAgICAgJHFfZWQgKz0gJGVkOwogICAgLy8gICAgICAgICAgICAgICAgICAgICAkcV92ICs9ICR2OwogICAgLy8gICAgICAgICAgICAgICAgICAgICAkcV92X2V4ICs9ICgkaXRlbS0+dmF0X3R5cGUgPT0gJ2V4Y2x1c2l2ZScgPyAkdiA6IDApOwogICAgLy8gICAgICAgICAgICAgICAgICAgICAkcV9ldiArPSAkZXY7CiAgICAvLyAgICAgICAgICAgICAgICAgICAgICRxX2V2X2V4ICs9ICgkaXRlbS0+dmF0X3R5cGUgPT0gJ2V4Y2x1c2l2ZScgPyAkZXYgOiAwKTsKCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICRpdGVtc1skaXRlbS0+dWlkXSA9IFsKICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICdxdHknID0+ICRpdGVtLT5xdHksCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAndW5pdF9wcmljZScgPT4gJGl0ZW0tPnVuaXRfcHJpY2UsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAnc3ViX3RvdGFsJyA9PiAkc3QsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAnZXhjaGFuZ2Vfc3ViX3RvdGFsJyA9PiAkZXN0LAogICAgLy8gICAgICAgICAgICAgICAgICAgICBdOwogICAgLy8gICAgICAgICAgICAgICAgIH0KCiAgICAvLyAgICAgICAgICAgICAgICAgJHF1b3RhdGlvbkluZm9bJHF1b3RhdGlvbi0+aWRdID0gWwogICAgLy8gICAgICAgICAgICAgICAgICAgICAnaXRlbXMnID0+ICRpdGVtcywKICAgIC8vICAgICAgICAgICAgICAgICAgICAgJ3N1Yl90b3RhbCcgPT4gJHFfc3QsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICdleGNoYW5nZV9zdWJfdG90YWwnID0+ICRxX2VzdCwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgJ2Rpc2NvdW50JyA9PiAkcV9kLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAnZXhjaGFuZ2VfZGlzY291bnQnID0+ICRxX2VkLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAndmF0JyA9PiAkcV92LAogICAgLy8gICAgICAgICAgICAgICAgICAgICAnZXhjaGFuZ2VfdmF0JyA9PiAkcV9ldiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgJ2dyb3NzJyA9PiAkcV9zdCAtICRxX2QgKyAkcV92X2V4LAogICAgLy8gICAgICAgICAgICAgICAgICAgICAnZXhjaGFuZ2VfZ3Jvc3MnID0+ICRxX2VzdCAtICRxX2VkICsgJHFfZXZfZXgsCiAgICAvLyAgICAgICAgICAgICAgICAgXTsKICAgIC8vICAgICAgICAgICAgIH0KICAgIC8vICAgICAgICAgfQoKICAgIC8vICAgICAgICAgcmV0dXJuIHZpZXcoJ3Btcy5iYWNrZW5kLnBhZ2VzLnF1b3RhdGlvbi5jcy1wby1oaXN0b3J5LXByZXZpZXcnLCBbCiAgICAvLyAgICAgICAgICAgICAncXVvdGF0aW9ucycgPT4gJHF1b3RhdGlvbnMsCiAgICAvLyAgICAgICAgICAgICAncmVxdWVzdElkJyA9PiAkaWQsCiAgICAvLyAgICAgICAgICAgICAnc3lzdGVtQ3VycmVuY3knID0+ICRzeXN0ZW1DdXJyZW5jeSwKICAgIC8vICAgICAgICAgICAgICdxdW90YXRpb25JbmZvJyA9PiAkcXVvdGF0aW9uSW5mbywKICAgIC8vICAgICAgICAgICAgICdyZXF1aXNpdGlvbkl0ZW1zJyA9PiBSZXF1aXNpdGlvbkl0ZW06OndpdGgoWwogICAgLy8gICAgICAgICAgICAgICAgICdhdHRyaWJ1dGVzLmF0dHJpYnV0ZU9wdGlvbi5hdHRyaWJ1dGUnCiAgICAvLyAgICAgICAgICAgICBdKQogICAgLy8gICAgICAgICAgICAgICAgIC0+d2hlcmVIYXMoJ3JlcXVpc2l0aW9uLnJlcXVlc3RQcm9wb3NhbFJlcXVpc2l0aW9uJywgZnVuY3Rpb24gKCRxdWVyeSkgdXNlICgkaWQpIHsKICAgIC8vICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoJ3JlcXVlc3RfcHJvcG9zYWxfaWQnLCAkaWQpOwogICAgLy8gICAgICAgICAgICAgICAgIH0pCiAgICAvLyAgICAgICAgICAgICAgICAgLT5nZXQoKSwKICAgIC8vICAgICAgICAgXSk7CiAgICAvLyAgICAgfQoKICAgIC8vICAgICByZXR1cm4gYWJvcnQoNDA0KTsgLy8gb3B0aW9uYWw6IGZvciByZXF1ZXN0cyB3aXRob3V0ID9wcmV2aWV3CiAgICAvLyB9CgogICAgcHVibGljIGZ1bmN0aW9uIGNzUG9IaXN0b3J5UHJldmlldygkaWQpCiAgICB7CiAgICAgICAgaWYgKHJlcXVlc3QoKS0+aGFzKCdnZXQtcHJvZHVjdC1sb2dzJykpIHsKICAgICAgICAgICAgJGFwcHJvdmFscyA9IFJlcXVlc3RQcm9wb3NhbEFwcHJvdmFsOjp3aXRoKFsKICAgICAgICAgICAgICAgICd1c2VyJwogICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgLT53aGVyZSgncmVxdWVzdF9wcm9wb3NhbF9pZCcsIHJlcXVlc3QoKS0+Z2V0KCdyZXF1ZXN0X3Byb3Bvc2FsX2lkJykpCiAgICAgICAgICAgICAgICAtPndoZXJlSW4oJ3Jlc3BvbnNlJywgWydhcHByb3ZlZCcsICdkZW5pZWQnXSkKICAgICAgICAgICAgICAgIC0+Z2V0KCk7CiAgICAgICAgICAgIHJldHVybiB2aWV3KCdwbXMuYmFja2VuZC5wYWdlcy5xdW90YXRpb24ubG9ncycsIFsKICAgICAgICAgICAgICAgICdhcHByb3ZhbHMnID0+ICRhcHByb3ZhbHMsCiAgICAgICAgICAgICAgICAnc3VwcGxpZXJzJyA9PiBTdXBwbGllcnM6OndoZXJlSGFzKCdyZWxRdW90YXRpb25zJywgZnVuY3Rpb24gKCRxdWVyeSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlKCdyZXF1ZXN0X3Byb3Bvc2FsX2lkJywgcmVxdWVzdCgpLT5nZXQoJ3JlcXVlc3RfcHJvcG9zYWxfaWQnKSk7CiAgICAgICAgICAgICAgICB9KS0+Z2V0KCksCiAgICAgICAgICAgICAgICAndWlkJyA9PiByZXF1ZXN0KCktPmdldCgndWlkJykKICAgICAgICAgICAgXSk7CiAgICAgICAgfQoKICAgICAgICB0cnkgewogICAgICAgICAgICAkcXVvdGF0aW9ucyA9IFF1b3RhdGlvbnM6OndpdGgoWwogICAgICAgICAgICAgICAgJ3JlbFJlcXVlc3RQcm9wb3NhbC5jcmVhdGVkQnknLAogICAgICAgICAgICAgICAgJ3JlbFN1cHBsaWVycy5TdXBwbGllclJhdGluZ3MnLAogICAgICAgICAgICAgICAgJ2V4Y2hhbmdlUmF0ZS5jdXJyZW5jeScsCiAgICAgICAgICAgICAgICAncmVsUXVvdGF0aW9uSXRlbXMucmVsUHJvZHVjdC5wcm9kdWN0VW5pdCcsCiAgICAgICAgICAgICAgICAncmVsUXVvdGF0aW9uSXRlbXMucmVsUHJvZHVjdC5jYXRlZ29yeS5jYXRlZ29yeScsCiAgICAgICAgICAgICAgICAncmVsUXVvdGF0aW9uSXRlbXMucmVsUHJvZHVjdC5hdHRyaWJ1dGVzLmF0dHJpYnV0ZU9wdGlvbi5hdHRyaWJ1dGUnLAogICAgICAgICAgICAgICAgJ3JlbFJlcXVlc3RQcm9wb3NhbC5hcHByb3ZhbHMudXNlcicsCiAgICAgICAgICAgICAgICAncmVsVXNlcnNMaXN0LmVtcGxveWVlLmRlcGFydG1lbnQnCiAgICAgICAgICAgIF0pLT53aGVyZShbCiAgICAgICAgICAgICAgICAnc3RhdHVzJyA9PiAnYWN0aXZlJywKICAgICAgICAgICAgICAgICdyZXF1ZXN0X3Byb3Bvc2FsX2lkJyA9PiAkaWQKICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIC0+d2hlcmVOb3RJbignaXNfYXBwcm92ZWQnLCBbJ3BlbmRpbmcnXSkKICAgICAgICAgICAgICAgIC0+b3JkZXJieSgnZ3Jvc3NfcHJpY2UnLCAnYXNjJykKICAgICAgICAgICAgICAgIC0+Z2V0KCk7CgogICAgICAgICAgICAkcmVxdWlzaXRpb25JdGVtcyA9IFJlcXVpc2l0aW9uSXRlbTo6d2l0aChbCiAgICAgICAgICAgICAgICAnYXR0cmlidXRlcy5hdHRyaWJ1dGVPcHRpb24uYXR0cmlidXRlJywKICAgICAgICAgICAgICAgICdyZXF1aXNpdGlvbicKICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIC0+d2hlcmVIYXMoJ3JlcXVpc2l0aW9uLnJlcXVlc3RQcm9wb3NhbFJlcXVpc2l0aW9uJywgZnVuY3Rpb24gKCRxdWVyeSkgdXNlICgkaWQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgncmVxdWVzdF9wcm9wb3NhbF9pZCcsICRpZCk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLT5nZXQoKTsKICAgICAgICAgICAgLy9kZCgkcXVvdGF0aW9ucyk7CiAgICAgICAgICAgICRzeXN0ZW1DdXJyZW5jeSA9IHN5c3RlbUN1cnJlbmN5KCk7CgogICAgICAgICAgICAkcXVvdGF0aW9uSW5mbyA9IFtdOwogICAgICAgICAgICBpZiAoaXNzZXQoJHF1b3RhdGlvbnNbMF0pKSB7CiAgICAgICAgICAgICAgICBmb3JlYWNoICgkcXVvdGF0aW9ucyBhcyAkcXVvdGF0aW9uKSB7CiAgICAgICAgICAgICAgICAgICAgJGl0ZW1zID0gW107CiAgICAgICAgICAgICAgICAgICAgJHFfc3QgPSAwOwogICAgICAgICAgICAgICAgICAgICRxX2VzdCA9IDA7CiAgICAgICAgICAgICAgICAgICAgJHFfZCA9IDA7CiAgICAgICAgICAgICAgICAgICAgJHFfZWQgPSAwOwogICAgICAgICAgICAgICAgICAgICRxX3YgPSAwOwogICAgICAgICAgICAgICAgICAgICRxX3ZfZXggPSAwOwogICAgICAgICAgICAgICAgICAgICRxX2V2ID0gMDsKICAgICAgICAgICAgICAgICAgICAkcV9ldl9leCA9IDA7CiAgICAgICAgICAgICAgICAgICAgJHRoaXNFeGNoYW5nZVJhdGUgPSBleGNoYW5nZVJhdGUoJHF1b3RhdGlvbi0+ZXhjaGFuZ2VSYXRlLCAkc3lzdGVtQ3VycmVuY3ktPmlkKTsKICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHF1b3RhdGlvbi0+cmVsUXVvdGF0aW9uSXRlbXNbMF0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRxdW90YXRpb24tPnJlbFF1b3RhdGlvbkl0ZW1zIGFzICRpdGVtKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGl0ZW0tPmFwcHJvdmVkX3F0eSA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdXNlZFF0eSA9ICRpdGVtLT5hcHByb3ZlZF9xdHk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1c2VkUXR5ID0gJGl0ZW0tPnF0eTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3QgPSAkdXNlZFF0eSAqICRpdGVtLT51bml0X3ByaWNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGVzdCA9ICRzdCAqICR0aGlzRXhjaGFuZ2VSYXRlOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRkID0gJHN0ID4gMCAmJiAkaXRlbS0+ZGlzY291bnQgPiAwID8gJHN0ICogKCRpdGVtLT5kaXNjb3VudCAvIDEwMCkgOiAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGVkID0gJGQgKiAkdGhpc0V4Y2hhbmdlUmF0ZTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYWZ0ZXIgPSAkc3QgLSAkZDsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdiA9ICRpdGVtLT52YXQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZXYgPSAkdiAqICR0aGlzRXhjaGFuZ2VSYXRlOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRxX3N0ICs9ICRzdDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRxX2VzdCArPSAkZXN0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHFfZCArPSAkZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRxX2VkICs9ICRlZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRxX3YgKz0gJHY7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcV92X2V4ICs9ICgkaXRlbS0+dmF0X3R5cGUgPT0gJ2V4Y2x1c2l2ZScgPyAkdiA6IDApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHFfZXYgKz0gJGV2OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHFfZXZfZXggKz0gKCRpdGVtLT52YXRfdHlwZSA9PSAnZXhjbHVzaXZlJyA/ICRldiA6IDApOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpdGVtc1skaXRlbS0+dWlkXSA9IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXBwcm92ZWRfcXR5JyA9PiAkaXRlbS0+YXBwcm92ZWRfcXR5LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1bml0X3ByaWNlJyA9PiAkaXRlbS0+dW5pdF9wcmljZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3ViX3RvdGFsJyA9PiAkc3QsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V4Y2hhbmdlX3N1Yl90b3RhbCcgPT4gJGVzdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICRxdW90YXRpb25JbmZvWyRxdW90YXRpb24tPmlkXSA9IFsKICAgICAgICAgICAgICAgICAgICAgICAgJ2l0ZW1zJyA9PiAkaXRlbXMsCiAgICAgICAgICAgICAgICAgICAgICAgICdzdWJfdG90YWwnID0+ICRxX3N0LAogICAgICAgICAgICAgICAgICAgICAgICAnZXhjaGFuZ2Vfc3ViX3RvdGFsJyA9PiAkcV9lc3QsCiAgICAgICAgICAgICAgICAgICAgICAgICdkaXNjb3VudCcgPT4gJHFfZCwKICAgICAgICAgICAgICAgICAgICAgICAgJ2V4Y2hhbmdlX2Rpc2NvdW50JyA9PiAkcV9lZCwKICAgICAgICAgICAgICAgICAgICAgICAgJ3ZhdCcgPT4gJHFfdiwKICAgICAgICAgICAgICAgICAgICAgICAgJ2V4Y2hhbmdlX3ZhdCcgPT4gJHFfZXYsCiAgICAgICAgICAgICAgICAgICAgICAgICdncm9zcycgPT4gJHFfc3QgLSAkcV9kICsgJHFfdl9leCwKICAgICAgICAgICAgICAgICAgICAgICAgJ2V4Y2hhbmdlX2dyb3NzJyA9PiAkcV9lc3QgLSAkcV9lZCArICRxX2V2X2V4LAogICAgICAgICAgICAgICAgICAgIF07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICR0aXRsZSA9ICJDUyBWaWV3IjsKICAgICAgICAgICAgJHB1cmNoYXNlT3JkZXJJZCA9ICRpZDsKCgogICAgICAgICAgICByZXR1cm4gdmlldygncG1zLmJhY2tlbmQucGFnZXMucXVvdGF0aW9uLmNzLXBvLWhpc3RvcnktcHJldmlldycsIGNvbXBhY3QoJ3F1b3RhdGlvbnMnLCAnc3lzdGVtQ3VycmVuY3knLCAndGl0bGUnLCAncHVyY2hhc2VPcmRlcklkJywgJ3F1b3RhdGlvbkluZm8nLCAncmVxdWlzaXRpb25JdGVtcycpKTsKICAgICAgICB9IGNhdGNoIChcVGhyb3dhYmxlICR0aCkgewogICAgICAgICAgICByZXR1cm4gJHRoLT5nZXRNZXNzYWdlKCk7CiAgICAgICAgfQogICAgfQoKCiAgICAvKioKICAgICAqIFNob3cgdGhlIGZvcm0gZm9yIGNyZWF0aW5nIGEgbmV3IHJlc291cmNlLgogICAgICoKICAgICAqIEByZXR1cm4gXElsbHVtaW5hdGVcSHR0cFxKc29uUmVzcG9uc2UKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIHNlbmRUb1B1cmNoYXNlKCRyZXFfaWQpCiAgICB7CiAgICAgICAgaWYgKHJlcXVlc3QoKS0+aGFzKCdnZXQtc3VwcGxpZXItaW5mbycpKSB7CiAgICAgICAgICAgICRzdXBwbGllciA9IFN1cHBsaWVyczo6d2l0aChbCiAgICAgICAgICAgICAgICAncmVsUGF5bWVudFRlcm1zJwogICAgICAgICAgICBdKS0+ZmluZChyZXF1ZXN0KCktPmdldCgnc3VwcGxpZXJfaWQnKSk7CiAgICAgICAgICAgICRjdXJyZW5jaWVzID0gQ3VycmVuY3lUeXBlOjp3aXRoKFsKICAgICAgICAgICAgICAgICdjdXJyZW5jaWVzJyA9PiBmdW5jdGlvbiAoJHF1ZXJ5KSB1c2UgKCRzdXBwbGllcikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlSW4oJ2lkJywgaXNzZXQoJHN1cHBsaWVyLT5pZCkgPyAkc3VwcGxpZXItPmN1cnJlbmNpZXMtPnBsdWNrKCdpZCcpLT50b0FycmF5KCkgOiBbXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0pLT5nZXQoKTsKCiAgICAgICAgICAgIHJldHVybiByZXNwb25zZSgpLT5qc29uKFsKICAgICAgICAgICAgICAgICdjdXJyZW5jaWVzJyA9PiAkY3VycmVuY2llcywKICAgICAgICAgICAgXSk7CiAgICAgICAgfQoKICAgICAgICAkcmVxID0gUmVxdWlzaXRpb246OmZpbmQoJHJlcV9pZCk7CgogICAgICAgIGlmICgkcmVxLT5hc3NpZ25lZF91c2VyX2lkID09IG51bGwpIHsKICAgICAgICAgICAgJHJlcS0+YXNzaWduZWRfdXNlcl9pZCA9IGF1dGgoKS0+dXNlcigpLT5pZDsKICAgICAgICAgICAgJHJlcS0+c2F2ZSgpOwogICAgICAgIH0KCgogICAgICAgICR0aXRsZSA9ICdFc3RpbWF0ZSBQcmVwYXJhdGlvbic7CiAgICAgICAgJHByZWZpeCA9ICdDUy0nIC4gZGF0ZSgneScsIHN0cnRvdGltZShkYXRlKCdZLW0tZCcpKSkgLiAnLScgLiAkcmVxLT5yZWxVc2Vyc0xpc3QtPmVtcGxveWVlLT51bml0LT5ocl91bml0X3Nob3J0X25hbWUgLiAnLSc7CiAgICAgICAgJHJlZk5vID0gdW5pcXVlQ29kZSgxNCwgJHByZWZpeCwgJ3JlcXVlc3RfcHJvcG9zYWxzJywgJ2lkJyk7CgogICAgICAgIHRyeSB7CgogICAgICAgICAgICAkcmVxdWlzaXRpb25JZHMgPSBnZXRNZXJnZWRSZXF1aXNpc2lvbklEKFsKICAgICAgICAgICAgICAgICdpc19wb19nZW5lcmF0ZScgPT4gJ25vJywKICAgICAgICAgICAgICAgICdpc19zZW5kX3RvX3JmcCcgPT4gJ3llcycsCiAgICAgICAgICAgICAgICAnZGVsaXZlcnlfc3RhdHVzJyA9PiAncHJvY2Vzc2luZycsCiAgICAgICAgICAgICAgICAnYXBwcm92ZWRfaWQnID0+IDEsCiAgICAgICAgICAgICAgICAnc3RhdHVzJyA9PiAxLAogICAgICAgICAgICBdLCBbCiAgICAgICAgICAgICAgICAnaXNfcG9fZ2VuZXJhdGUnID0+ICdubycsCiAgICAgICAgICAgICAgICAnaXNfc2VuZF90b19yZnAnID0+ICd5ZXMnLAogICAgICAgICAgICAgICAgJ2RlbGl2ZXJ5X3N0YXR1cycgPT4gJ3BhcnRpYWwtZGVsaXZlcmVkJywKICAgICAgICAgICAgICAgICdhcHByb3ZlZF9pZCcgPT4gMSwKICAgICAgICAgICAgICAgICdzdGF0dXMnID0+IDEsCiAgICAgICAgICAgICAgICAncmVxdWVzdF9zdGF0dXMnID0+ICdyZnAnLAogICAgICAgICAgICBdKTsKCiAgICAgICAgICAgICRyZXF1aXNpdGlvbiA9IFJlcXVpc2l0aW9uSXRlbTo6d2l0aChbCiAgICAgICAgICAgICAgICAncmVxdWlzaXRpb24nLAogICAgICAgICAgICAgICAgJ3Byb2R1Y3QucHJvZHVjdFVuaXQnLAogICAgICAgICAgICAgICAgJ3Byb2R1Y3QuYXR0cmlidXRlcy5hdHRyaWJ1dGVPcHRpb24uYXR0cmlidXRlJwogICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgLT53aGVyZUhhcygncmVxdWlzaXRpb24nLCBmdW5jdGlvbiAoJHF1ZXJ5KSB1c2UgKCRyZXF1aXNpdGlvbklkcykgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlSW4oJ2lkJywgJHJlcXVpc2l0aW9uSWRzKTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAtPndoZXJlKCdpc19zZW5kJywgJ25vJykKICAgICAgICAgICAgICAgIC0+d2hlcmUoJ3BvX2dlbmVyYXRlJywgJ25vJykKICAgICAgICAgICAgICAgIC0+d2hlcmUoJ3JlcXVpc2l0aW9uX2lkJywgJHJlcV9pZCkKICAgICAgICAgICAgICAgIC0+Z2V0KCk7CgogICAgICAgICAgICAkZ2V0UHJvZHVjdElkcyA9IFtdOwogICAgICAgICAgICBmb3JlYWNoICgkcmVxdWlzaXRpb24gYXMgJGRhdGEpIHsKICAgICAgICAgICAgICAgIGFycmF5X3B1c2goJGdldFByb2R1Y3RJZHMsICRkYXRhLT5wcm9kdWN0X2lkKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJHNlbGVjdFN1cHBsaWVySWRzID0gREI6OnRhYmxlKCdwcm9kdWN0c19zdXBwbGllcicpCiAgICAgICAgICAgICAgICAtPndoZXJlSW4oJ3Byb2R1Y3RfaWQnLCAkZ2V0UHJvZHVjdElkcykKICAgICAgICAgICAgICAgIC0+Z3JvdXBCeSgnc3VwcGxpZXJfaWQnKQogICAgICAgICAgICAgICAgLT5nZXQoWydzdXBwbGllcl9pZCddKTsKCiAgICAgICAgICAgICRnZXRTdXBwbGllcklkcyA9IFtdOwogICAgICAgICAgICBmb3JlYWNoICgkc2VsZWN0U3VwcGxpZXJJZHMgYXMgJGRhdGEpIHsKICAgICAgICAgICAgICAgIGFycmF5X3B1c2goJGdldFN1cHBsaWVySWRzLCAkZGF0YS0+c3VwcGxpZXJfaWQpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkc3VwcGxpZXJzID0gU3VwcGxpZXJzOjp3aGVyZSgnc3RhdHVzJywgJ0FjdGl2ZScpLT5nZXQoKTsKICAgICAgICAgICAgJGN1cnJlbmN5VHlwZXMgPSBDdXJyZW5jeVR5cGU6OndpdGgoWydjdXJyZW5jaWVzJ10pLT5nZXQoKTsKICAgICAgICAgICAgJHBheW1lbnRUZXJtcyA9IFBheW1lbnRUZXJtOjphbGwoKTsKCiAgICAgICAgICAgICR1c2VycyA9IFVzZXI6OnJvbGUoWydQdXJjaGFzZS1EZXBhcnRtZW50JywgJ1B1cmNoYXNlLUVtcGxveWVlJ10pCiAgICAgICAgICAgICAgICAtPndoZXJlSGFzKCdwcmlvcml0aWVzJywgZnVuY3Rpb24gKCRxdWVyeSkgdXNlICgkcmVxKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoJ2hyX3VuaXRfaWQnLCAkcmVxLT5ocl91bml0X2lkKTsKICAgICAgICAgICAgICAgIH0pLT5nZXQoKTsKCiAgICAgICAgICAgICRhcHByb3ZlcnMgPSBVc2VyOjpyb2xlKFsKICAgICAgICAgICAgICAgICdNYW5hZ2VtZW50JywKICAgICAgICAgICAgICAgICdEZXBhcnRtZW50LUhlYWQnCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAtPndoZXJlSGFzKCdwcmlvcml0aWVzJywgZnVuY3Rpb24gKCRxdWVyeSkgdXNlICgkcmVxKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoJ2hyX3VuaXRfaWQnLCAkcmVxLT5ocl91bml0X2lkKTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAtPmdldCgpOwoKICAgICAgICAgICAgaWYgKCRyZXF1aXNpdGlvbi0+Y291bnQoKSA+IDApIHsKICAgICAgICAgICAgICAgIHJldHVybiB2aWV3KCdwbXMuYmFja2VuZC5wYWdlcy5zdG9yZS5zdG9yZS1pbnZlbnRvcnktcHVyY2hhc2UnLCBjb21wYWN0KAogICAgICAgICAgICAgICAgICAgICd0aXRsZScsCiAgICAgICAgICAgICAgICAgICAgJ3JlcXVpc2l0aW9uJywKICAgICAgICAgICAgICAgICAgICAncmVxX2lkJywKICAgICAgICAgICAgICAgICAgICAncmVmTm8nLAogICAgICAgICAgICAgICAgICAgICdyZXF1aXNpdGlvbklkcycsCiAgICAgICAgICAgICAgICAgICAgJ2N1cnJlbmN5VHlwZXMnLAogICAgICAgICAgICAgICAgICAgICdzdXBwbGllcnMnLAogICAgICAgICAgICAgICAgICAgICdwYXltZW50VGVybXMnLAogICAgICAgICAgICAgICAgICAgICd1c2VycycsCiAgICAgICAgICAgICAgICAgICAgJ3JlcScsCiAgICAgICAgICAgICAgICAgICAgJ2FwcHJvdmVycycsCiAgICAgICAgICAgICAgICApKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiAkdGhpcy0+YmFja1dpdGhFcnJvcignQWxyZWFkeSBwdXJjaGFzZSB0aGlzIHJlcXVpc2l0aW9uLicpOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoXFRocm93YWJsZSAkdGgpIHsKCiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+YmFja1dpdGhFcnJvcigkdGgtPmdldE1lc3NhZ2UoKSk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogU2hvdyB0aGUgZm9ybSBmb3IgY3JlYXRpbmcgYSBuZXcgcmVzb3VyY2UuCiAgICAgKgogICAgICogQHJldHVybiBcSWxsdW1pbmF0ZVxIdHRwXFJlc3BvbnNlCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBzZW5kVG9QdXJjaGFzZVN1Ym1pdChSZXF1ZXN0ICRyZXF1ZXN0KQogICAgewoKICAgICAgICAkdGhpcy0+dmFsaWRhdGUoJHJlcXVlc3QsIFsKICAgICAgICAgICAgJ3JlcXVlc3RfZGF0ZScgPT4gWydyZXF1aXJlZCcsICdkYXRlJ10sCiAgICAgICAgICAgICdyZWZlcmVuY2Vfbm8nID0+IFsncmVxdWlyZWQnLCAnbWF4OjE1JywgJ3VuaXF1ZTpyZXF1ZXN0X3Byb3Bvc2FscyddLAogICAgICAgICAgICAnc3VwcGxpZXJfaWQnID0+ICdyZXF1aXJlZHxleGlzdHM6c3VwcGxpZXJzLGlkJywKICAgICAgICAgICAgJ2N1cnJlbmN5X2lkJyA9PiBbJ3JlcXVpcmVkJ10sCiAgICAgICAgICAgICJwcm9kdWN0X2lkIiA9PiAicmVxdWlyZWR8bWluOjEiLAogICAgICAgICAgICAiYXNzaWduZWRfdXNlcl9pZCIgPT4gInJlcXVpcmVkIiwKICAgICAgICAgICAgInZhbGlkYXRpb25fZGF5cyIgPT4gInJlcXVpcmVkIiwKICAgICAgICAgICAgJ3N1cHBsaWVyX3F1b3RhdGlvbl9kYXRlJyA9PiAncmVxdWlyZWR8ZGF0ZScsCiAgICAgICAgICAgICdzdXBwbGllcl9xdW90YXRpb25fcmVmX25vJyA9PiAncmVxdWlyZWR8bWF4OjEwMCcsCiAgICAgICAgICAgICdwYXltZW50X3Rlcm1faWQnID0+ICdyZXF1aXJlZCcsCiAgICAgICAgICAgICdwYXltZW50X3BlcmNlbnRhZ2VzJyA9PiAncmVxdWlyZWQnLAogICAgICAgICAgICAncGF5bWVudF9wZXJjZW50YWdlcy4qJyA9PiAncmVxdWlyZWQnLAogICAgICAgICAgICAvLyAncGF5bWVudF9kdXJhdGlvbnMnID0+ICdyZXF1aXJlZCcsCiAgICAgICAgICAgIC8vICdwYXltZW50X2R1cmF0aW9ucy4qJyA9PiAncmVxdWlyZWQnLAogICAgICAgICAgICAncGF5bWVudF90eXBlcycgPT4gJ3JlcXVpcmVkJywKICAgICAgICAgICAgJ3BheW1lbnRfdHlwZXMuKicgPT4gJ3JlcXVpcmVkJywKICAgICAgICAgICAgJ3BheW1lbnRfbW9kZXMnID0+ICdyZXF1aXJlZCcsCiAgICAgICAgICAgICdwYXltZW50X21vZGVzLionID0+ICdyZXF1aXJlZCcsCiAgICAgICAgICAgICdub3RlJyA9PiAnbnVsbGFibGV8c3RyaW5nfG1heDoxMDAwJywKICAgICAgICBdKTsKCiAgICAgICAgaWYgKCFpc3NldCgkcmVxdWVzdC0+YXBwcm92ZXJzWzBdKSkgewogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UoKS0+anNvbihbCiAgICAgICAgICAgICAgICAnc3VjY2VzcycgPT4gZmFsc2UsCiAgICAgICAgICAgICAgICAnbWVzc2FnZScgPT4gIlBsZWFzZSBjaG9vc2UgYXQgbGVhc3Qgb25lIEFwcHJvdmVycy4iLAogICAgICAgICAgICBdKTsKICAgICAgICB9CgogICAgICAgIC8vIFRyYW5zYWN0aW9uIFN0YXJ0IEhlcmUKICAgICAgICBEQjo6YmVnaW5UcmFuc2FjdGlvbigpOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIC8vdXBkYXRlIHJlcXVpc2l0aW9uIGlkCiAgICAgICAgICAgICRyZXF1aXNpdGlvbiA9IFJlcXVpc2l0aW9uOjp3aGVyZShbCiAgICAgICAgICAgICAgICAnaWQnID0+ICRyZXF1ZXN0LT5yZXF1aXNpdGlvbl9pZCwKICAgICAgICAgICAgICAgICdzdGF0dXMnID0+IDEsCiAgICAgICAgICAgICAgICAnYXBwcm92ZWRfaWQnID0+IDEsCiAgICAgICAgICAgICAgICAnaXNfc2VuZF90b19yZnAnID0+ICd5ZXMnLAogICAgICAgICAgICAgICAgJ2RlbGl2ZXJ5X3N0YXR1cycgPT4gJ3Byb2Nlc3NpbmcnCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAtPnVwZGF0ZShbCiAgICAgICAgICAgICAgICAgICAgJ2RlbGl2ZXJ5X3N0YXR1cycgPT4gJ3JmcCcsCiAgICAgICAgICAgICAgICAgICAgJ3VwZGF0ZWRfYnknID0+IGF1dGgoKS0+dXNlcigpLT5pZCwKICAgICAgICAgICAgICAgICAgICAndXBkYXRlZF9hdCcgPT4gZGF0ZSgnWS1tLWQgSDppOnMnKQogICAgICAgICAgICAgICAgXSk7CgogICAgICAgICAgICAkcmVxdWlzaXRpb24gPSBSZXF1aXNpdGlvbjo6ZmluZCgkcmVxdWVzdC0+cmVxdWlzaXRpb25faWQpOwogICAgICAgICAgICAkcmVxdWlzaXRpb24tPmFzc2lnbmVkX3VzZXJfaWQgPSAkcmVxdWVzdC0+YXNzaWduZWRfdXNlcl9pZDsKICAgICAgICAgICAgJHJlcXVpc2l0aW9uLT5zYXZlKCk7CgogICAgICAgICAgICAkcmVxdWVzdFByb3Bvc2FsID0gUmVxdWVzdFByb3Bvc2FsOjpjcmVhdGUoWwogICAgICAgICAgICAgICAgJ3R5cGUnID0+ICdkaXJlY3QtcHVyY2hhc2UnLAogICAgICAgICAgICAgICAgJ3JlZmVyZW5jZV9ubycgPT4gJHJlcXVlc3QtPnJlZmVyZW5jZV9ubywKICAgICAgICAgICAgICAgICdyZXF1ZXN0X2RhdGUnID0+IGRhdGUoJ1ktbS1kJywgc3RydG90aW1lKCRyZXF1ZXN0LT5yZXF1ZXN0X2RhdGUpKSwKICAgICAgICAgICAgXSk7CgogICAgICAgICAgICBpZiAoaXNzZXQoJHJlcXVlc3QtPmFwcHJvdmVyc1swXSkpIHsKICAgICAgICAgICAgICAgICRwcmlvcml0eSA9IDA7CiAgICAgICAgICAgICAgICBmb3JlYWNoICgkcmVxdWVzdC0+YXBwcm92ZXJzIGFzICRrZXkgPT4gJHVzZXJfaWQpIHsKICAgICAgICAgICAgICAgICAgICAkYXBwcm92YWwgPSBSZXF1ZXN0UHJvcG9zYWxBcHByb3ZhbDo6d2hlcmUoWwogICAgICAgICAgICAgICAgICAgICAgICAncmVxdWVzdF9wcm9wb3NhbF9pZCcgPT4gJHJlcXVlc3RQcm9wb3NhbC0+aWQsCiAgICAgICAgICAgICAgICAgICAgICAgICd1c2VyX2lkJyA9PiAkdXNlcl9pZCwKICAgICAgICAgICAgICAgICAgICBdKS0+Zmlyc3QoKTsKICAgICAgICAgICAgICAgICAgICBpZiAoIWlzc2V0KCRhcHByb3ZhbCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHByaW9yaXR5Kys7CiAgICAgICAgICAgICAgICAgICAgICAgIFJlcXVlc3RQcm9wb3NhbEFwcHJvdmFsOjpjcmVhdGUoWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3JlcXVlc3RfcHJvcG9zYWxfaWQnID0+ICRyZXF1ZXN0UHJvcG9zYWwtPmlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VzZXJfaWQnID0+ICR1c2VyX2lkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3ByaW9yaXR5JyA9PiAkcHJpb3JpdHksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmVzcG9uc2UnID0+ICdwZW5kaW5nJywKICAgICAgICAgICAgICAgICAgICAgICAgXSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAvL0dlbmVyYXRlIFF1b3RhdGlvbgogICAgICAgICAgICAkcHJlZml4ID0gJ0VTVC0nIC4gZGF0ZSgneScsIHN0cnRvdGltZShkYXRlKCdZLW0tZCcpKSkgLiAnLScgLiAkcmVxdWlzaXRpb24tPnVuaXQtPmhyX3VuaXRfc2hvcnRfbmFtZSAuICctJzsKICAgICAgICAgICAgJHJlZk5vID0gdW5pcXVlQ29kZSgxNSwgJHByZWZpeCwgJ3F1b3RhdGlvbnMnLCAnaWQnKTsKCiAgICAgICAgICAgICRxdW90YXRpb25GaWxlUGF0aCA9IG51bGw7CiAgICAgICAgICAgIGlmICgkcmVxdWVzdC0+aGFzRmlsZSgncXVvdGF0aW9uX2ZpbGUnKSkgewogICAgICAgICAgICAgICAgJHF1b3RhdGlvbkZpbGVQYXRoID0gJHRoaXMtPmZpbGVVcGxvYWQoJHJlcXVlc3QtPmZpbGUoJ3F1b3RhdGlvbl9maWxlJyksICd1cGxvYWQvcXVvdGF0aW9uL3BkZi1maWxlJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICR0ZWNobmljYWxGaWxlUGF0aCA9IG51bGw7CiAgICAgICAgICAgIGlmICgkcmVxdWVzdC0+aGFzRmlsZSgndGVjaG5pY2FsX3NwZWNpZmljYXRpb25fZmlsZScpKSB7CiAgICAgICAgICAgICAgICAkdGVjaG5pY2FsRmlsZVBhdGggPSAkdGhpcy0+ZmlsZVVwbG9hZCgkcmVxdWVzdC0+ZmlsZSgndGVjaG5pY2FsX3NwZWNpZmljYXRpb25fZmlsZScpLCAndXBsb2FkL3F1b3RhdGlvbi90ZWNobmljYWwtZmlsZScpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkc2wgPSAwOwogICAgICAgICAgICAkc3VwcGxpZXJfcGF5bWVudF90ZXJtc19pZCA9IDA7CiAgICAgICAgICAgIGlmIChpc3NldCgkcmVxdWVzdC0+cGF5bWVudF9wZXJjZW50YWdlc1swXSkpIHsKICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRyZXF1ZXN0LT5wYXltZW50X3BlcmNlbnRhZ2VzIGFzICRrZXkgPT4gJHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgJHN1cHBsaWVyUGF5bWVudFRlcm0gPSBTdXBwbGllclBheW1lbnRUZXJtOjpjcmVhdGUoWwogICAgICAgICAgICAgICAgICAgICAgICAnc3VwcGxpZXJfaWQnID0+ICRyZXF1ZXN0LT5zdXBwbGllcl9pZCwKICAgICAgICAgICAgICAgICAgICAgICAgJ3BheW1lbnRfdGVybV9pZCcgPT4gJHJlcXVlc3QtPnBheW1lbnRfdGVybV9pZCwKICAgICAgICAgICAgICAgICAgICAgICAgJ3BheW1lbnRfcGVyY2VudCcgPT4gJHJlcXVlc3QtPnBheW1lbnRfcGVyY2VudGFnZXNbJGtleV0sCiAgICAgICAgICAgICAgICAgICAgICAgICdkYXlfZHVyYXRpb24nID0+IDEsCiAgICAgICAgICAgICAgICAgICAgICAgIC8vICdkYXlfZHVyYXRpb24nID0+ICRyZXF1ZXN0LT5wYXltZW50X2R1cmF0aW9uc1ska2V5XSwKICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnID0+ICRyZXF1ZXN0LT5wYXltZW50X3R5cGVzWyRrZXldLAogICAgICAgICAgICAgICAgICAgICAgICAncGF5bWVudF9tb2RlJyA9PiAkcmVxdWVzdC0+cGF5bWVudF9tb2Rlc1ska2V5XSwKICAgICAgICAgICAgICAgICAgICAgICAgJ3BhcmVudF9pZCcgPT4gaXNzZXQoJHBhcmVudC0+aWQpID8gJHBhcmVudC0+aWQgOiAwLAogICAgICAgICAgICAgICAgICAgICAgICAnc291cmNlJyA9PiAnY3MnLAogICAgICAgICAgICAgICAgICAgIF0pOwoKICAgICAgICAgICAgICAgICAgICAkc2wrKzsKCiAgICAgICAgICAgICAgICAgICAgaWYgKCRzbCA9PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRwYXJlbnQgPSAkc3VwcGxpZXJQYXltZW50VGVybTsKICAgICAgICAgICAgICAgICAgICAgICAgJHN1cHBsaWVyX3BheW1lbnRfdGVybXNfaWQgPSAkc3VwcGxpZXJQYXltZW50VGVybS0+aWQ7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAkcXVvdGF0aW9uID0gUXVvdGF0aW9uczo6Y3JlYXRlKFsKICAgICAgICAgICAgICAgICdzdXBwbGllcl9pZCcgPT4gJHJlcXVlc3QtPnN1cHBsaWVyX2lkLAogICAgICAgICAgICAgICAgJ3JlcXVlc3RfcHJvcG9zYWxfaWQnID0+ICRyZXF1ZXN0UHJvcG9zYWwtPmlkLAogICAgICAgICAgICAgICAgJ3JlZmVyZW5jZV9ubycgPT4gJHJlZk5vLAogICAgICAgICAgICAgICAgJ3N1cHBsaWVyX3F1b3RhdGlvbl9kYXRlJyA9PiBkYXRlKCdZLW0tZCcsIHN0cnRvdGltZSgkcmVxdWVzdC0+c3VwcGxpZXJfcXVvdGF0aW9uX2RhdGUpKSwKICAgICAgICAgICAgICAgICdzdXBwbGllcl9xdW90YXRpb25fcmVmX25vJyA9PiAkcmVxdWVzdC0+c3VwcGxpZXJfcXVvdGF0aW9uX3JlZl9ubywKICAgICAgICAgICAgICAgICdxdW90YXRpb25fZGF0ZScgPT4gZGF0ZSgnWS1tLWQnLCBzdHJ0b3RpbWUoJHJlcXVlc3QtPnJlcXVlc3RfZGF0ZSkpLAogICAgICAgICAgICAgICAgJ3RvdGFsX3ByaWNlJyA9PiAkcmVxdWVzdC0+c3VtX29mX3N1YnRvdGFsLAogICAgICAgICAgICAgICAgJ2Rpc2NvdW50JyA9PiAkcmVxdWVzdC0+ZGlzY291bnQgPT0gbnVsbCA/IDAgOiAkcmVxdWVzdC0+ZGlzY291bnQsCiAgICAgICAgICAgICAgICAndmF0JyA9PiBjb2xsZWN0KCRyZXF1ZXN0LT5zdWJfdG90YWxfdmF0X3ByaWNlKS0+c3VtKCksCiAgICAgICAgICAgICAgICAnZ3Jvc3NfcHJpY2UnID0+ICRyZXF1ZXN0LT5ncm9zc19wcmljZSwKICAgICAgICAgICAgICAgICd2YWxpZGF0aW9uX2RheXMnID0+ICRyZXF1ZXN0LT52YWxpZGF0aW9uX2RheXMsCiAgICAgICAgICAgICAgICAnc3RhdHVzJyA9PiAnYWN0aXZlJywKICAgICAgICAgICAgICAgICd0eXBlJyA9PiAnZGlyZWN0LXB1cmNoYXNlJywKICAgICAgICAgICAgICAgICdkZWxpdmVyeV9kYXRlJyA9PiBpc3NldCgkcmVxdWVzdC0+ZGVsaXZlcnlfZGF0ZSkgPyAkcmVxdWVzdC0+ZGVsaXZlcnlfZGF0ZSA6IGRhdGUoJ1ktbS1kJyksCiAgICAgICAgICAgICAgICAnaXNfYXBwcm92ZWQnID0+IChhdXRoKCktPnVzZXIoKS0+aGFzUm9sZSgnUHVyY2hhc2UtRW1wbG95ZWUnKSA/ICdwcmUtcHJvY2Vzc2luZycgOiAncHJvY2Vzc2luZycpLAogICAgICAgICAgICAgICAgJ3N1cHBsaWVyX3BheW1lbnRfdGVybXNfaWQnID0+ICRzdXBwbGllcl9wYXltZW50X3Rlcm1zX2lkLAogICAgICAgICAgICAgICAgJ3F1b3RhdGlvbl9maWxlJyA9PiAkcXVvdGF0aW9uRmlsZVBhdGgsCiAgICAgICAgICAgICAgICAndGVjaG5pY2FsX3NwZWNpZmljYXRpb25fZmlsZScgPT4gJHRlY2huaWNhbEZpbGVQYXRoLAogICAgICAgICAgICAgICAgJ2V4Y2hhbmdlX3JhdGVfaWQnID0+IGdldEV4Y2hhbmdlUmF0ZXMoJHJlcXVlc3QtPmN1cnJlbmN5X2lkKVsncmF0ZSddLT5pZCwKICAgICAgICAgICAgICAgICdub3RlJyA9PiAkcmVxdWVzdC0+bm90ZSwKICAgICAgICAgICAgXSk7CgogICAgICAgICAgICBmb3JlYWNoICgkcmVxdWVzdC0+cHJvZHVjdF9pZCBhcyAkaSA9PiAkdWlkKSB7CiAgICAgICAgICAgICAgICAkcmVxdWlzaXRpb25JdGVtID0gJHJlcXVpc2l0aW9uLT5pdGVtcy0+d2hlcmUoJ3VpZCcsICR1aWQpLT5maXJzdCgpOwogICAgICAgICAgICAgICAgJGl0ZW1UZWNobmljYWxGaWxlUGF0aCA9IG51bGw7CiAgICAgICAgICAgICAgICBpZiAoJHJlcXVlc3QtPmhhc0ZpbGUoJ2l0ZW1fdGVjaG5pY2FsX3NwZWNpZmljYXRpb25fZmlsZS4nIC4gJHVpZCkpIHsKICAgICAgICAgICAgICAgICAgICAkaXRlbVRlY2huaWNhbEZpbGVQYXRoID0gJHRoaXMtPmZpbGVVcGxvYWQoJHJlcXVlc3QtPmZpbGUoJ2l0ZW1fdGVjaG5pY2FsX3NwZWNpZmljYXRpb25fZmlsZS4nIC4gJHVpZCksICd1cGxvYWQvcXVvdGF0aW9uL2l0ZW0tdGVjaG5pY2FsLWZpbGUnKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAkcXVvdGF0aW9uSXRlbXNJbnB1dFtdID0gWwogICAgICAgICAgICAgICAgICAgICdxdW90YXRpb25faWQnID0+ICRxdW90YXRpb24tPmlkLAogICAgICAgICAgICAgICAgICAgICd1aWQnID0+ICR1aWQsCiAgICAgICAgICAgICAgICAgICAgJ3Byb2R1Y3RfaWQnID0+ICRyZXF1aXNpdGlvbkl0ZW0tPnByb2R1Y3RfaWQsCiAgICAgICAgICAgICAgICAgICAgJ2Rlc2NyaXB0aW9uJyA9PiAkcmVxdWVzdC0+cHJvZHVjdF9kZXNjcmlwdGlvblskdWlkXSwKICAgICAgICAgICAgICAgICAgICAndW5pdF9wcmljZScgPT4gJHJlcXVlc3QtPnVuaXRfcHJpY2VbJHVpZF0sCiAgICAgICAgICAgICAgICAgICAgJ3F0eScgPT4gJHJlcXVlc3QtPnF0eVskdWlkXSwKICAgICAgICAgICAgICAgICAgICAnc3ViX3RvdGFsX3ByaWNlJyA9PiAkcmVxdWVzdC0+c3ViX3RvdGFsX3ByaWNlWyR1aWRdLAogICAgICAgICAgICAgICAgICAgICdkaXNjb3VudCcgPT4gJHJlcXVlc3QtPml0ZW1fZGlzY291bnRfcGVyY2VudFskdWlkXSA9PSBudWxsID8gMCA6ICRyZXF1ZXN0LT5pdGVtX2Rpc2NvdW50X3BlcmNlbnRbJHVpZF0sCiAgICAgICAgICAgICAgICAgICAgJ2Rpc2NvdW50X2Ftb3VudCcgPT4gaXNzZXQoJHJlcXVlc3QtPml0ZW1fZGlzY291bnRfYW1vdW50WyR1aWRdKSA/ICRyZXF1ZXN0LT5pdGVtX2Rpc2NvdW50X2Ftb3VudFskdWlkXSA6IDAsCiAgICAgICAgICAgICAgICAgICAgJ3ZhdF90eXBlJyA9PiAkcmVxdWVzdC0+cHJvZHVjdF92YXRfdHlwZVskdWlkXSwKICAgICAgICAgICAgICAgICAgICAndmF0X3BlcmNlbnRhZ2UnID0+ICRyZXF1ZXN0LT5wcm9kdWN0X3ZhdFskdWlkXSwKICAgICAgICAgICAgICAgICAgICAndmF0JyA9PiAkcmVxdWVzdC0+c3ViX3RvdGFsX3ZhdF9wcmljZVskdWlkXSwKICAgICAgICAgICAgICAgICAgICAndG90YWxfcHJpY2UnID0+ICgkcmVxdWVzdC0+c3ViX3RvdGFsX3ByaWNlWyR1aWRdIC0gKGlzc2V0KCRyZXF1ZXN0LT5pdGVtX2Rpc2NvdW50X2Ftb3VudFskdWlkXSkgPyAkcmVxdWVzdC0+aXRlbV9kaXNjb3VudF9hbW91bnRbJHVpZF0gOiAwKSkgKyAoJHJlcXVlc3QtPnByb2R1Y3RfdmF0X3R5cGVbJHVpZF0gPT0gJ2V4Y2x1c2l2ZScgPyAkcmVxdWVzdC0+c3ViX3RvdGFsX3ZhdF9wcmljZVskdWlkXSA6IDApLAogICAgICAgICAgICAgICAgICAgICdjcmVhdGVkX2F0JyA9PiBkYXRlKCdZLW0tZCBIOmk6cycpLAogICAgICAgICAgICAgICAgICAgICd0ZWNobmljYWxfc3BlY2lmaWNhdGlvbl9maWxlJyA9PiAkaXRlbVRlY2huaWNhbEZpbGVQYXRoLAogICAgICAgICAgICAgICAgXTsKCiAgICAgICAgICAgICAgICAkcmVxdWVzdFByb3Bvc2FsRGV0YWlsc0lucHV0W10gPSBbCiAgICAgICAgICAgICAgICAgICAgJ3JlcXVlc3RfcHJvcG9zYWxfaWQnID0+ICRyZXF1ZXN0UHJvcG9zYWwtPmlkLAogICAgICAgICAgICAgICAgICAgICd1aWQnID0+ICR1aWQsCiAgICAgICAgICAgICAgICAgICAgJ3Byb2R1Y3RfaWQnID0+ICRyZXF1aXNpdGlvbkl0ZW0tPnByb2R1Y3RfaWQsCiAgICAgICAgICAgICAgICAgICAgJ3JlcXVlc3RfcXR5JyA9PiAkcmVxdWVzdC0+cmVxdWVzdF9xdHlbJHVpZF0sCiAgICAgICAgICAgICAgICAgICAgJ3F0eScgPT4gJHJlcXVlc3QtPnF0eVskdWlkXSwKICAgICAgICAgICAgICAgICAgICAnY3JlYXRlZF9ieScgPT4gYXV0aCgpLT51c2VyKCktPmlkLAogICAgICAgICAgICAgICAgICAgICdjcmVhdGVkX2F0JyA9PiBkYXRlKCdZLW0tZCBIOmk6cycpLAogICAgICAgICAgICAgICAgXTsKCiAgICAgICAgICAgICAgICBSZXF1aXNpdGlvbkl0ZW06OndoZXJlKFsKICAgICAgICAgICAgICAgICAgICAncmVxdWlzaXRpb25faWQnID0+ICRyZXF1ZXN0LT5yZXF1aXNpdGlvbl9pZCwKICAgICAgICAgICAgICAgICAgICAncHJvZHVjdF9pZCcgPT4gJHJlcXVpc2l0aW9uSXRlbS0+cHJvZHVjdF9pZCwKICAgICAgICAgICAgICAgICAgICAndWlkJyA9PiAkdWlkLAogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAtPnVwZGF0ZShbCiAgICAgICAgICAgICAgICAgICAgICAgICdwdXJjaGFzZV9xdHknID0+ICRyZXF1ZXN0LT5xdHlbJHVpZF0KICAgICAgICAgICAgICAgICAgICBdKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy9Gb3IgdXBkYXRlIGNvbHVtbiAoSXNfU2VuZCkgb24gcmVxdWlzaXRpb24gaXRlbXMgdGFibGUKICAgICAgICAgICAgUmVxdWlzaXRpb25JdGVtOjp3aGVyZSgncmVxdWlzaXRpb25faWQnLCAkcmVxdWVzdC0+cmVxdWlzaXRpb25faWQpCiAgICAgICAgICAgICAgICAtPndoZXJlSW4oJ3VpZCcsICRyZXF1ZXN0LT5wcm9kdWN0X2lkKQogICAgICAgICAgICAgICAgLT53aGVyZSgnaXNfc2VuZCcsICdubycpCiAgICAgICAgICAgICAgICAtPnVwZGF0ZShbCiAgICAgICAgICAgICAgICAgICAgJ2lzX3NlbmQnID0+ICd5ZXMnCiAgICAgICAgICAgICAgICBdKTsKCiAgICAgICAgICAgIFJlcXVlc3RQcm9wb3NhbFJlcXVpc2l0aW9uczo6Y3JlYXRlKFsKICAgICAgICAgICAgICAgICdyZXF1aXNpdGlvbl9pZCcgPT4gJHJlcXVlc3QtPnJlcXVpc2l0aW9uX2lkLAogICAgICAgICAgICAgICAgJ3JlcXVlc3RfcHJvcG9zYWxfaWQnID0+ICRyZXF1ZXN0UHJvcG9zYWwtPmlkLAogICAgICAgICAgICBdKTsKCiAgICAgICAgICAgIFJlcXVlc3RQcm9wb3NhbERlZmluZVN1cHBsaWVyOjppbnNlcnQoWwogICAgICAgICAgICAgICAgJ3JlcXVlc3RfcHJvcG9zYWxfaWQnID0+ICRyZXF1ZXN0UHJvcG9zYWwtPmlkLAogICAgICAgICAgICAgICAgJ3N1cHBsaWVyX2lkJyA9PiAkcmVxdWVzdC0+c3VwcGxpZXJfaWQsCiAgICAgICAgICAgIF0pOwogICAgICAgICAgICAvL0FkZCByZXF1ZXN0IHByb3Bvc2FsIGRldGFpbHMgZGF0YQogICAgICAgICAgICBSZXF1ZXN0UHJvcG9zYWxEZXRhaWxzOjppbnNlcnQoJHJlcXVlc3RQcm9wb3NhbERldGFpbHNJbnB1dCk7CiAgICAgICAgICAgIC8vQWRkIHF1b3RhdGlvbiBpdGVtcyBkYXRhCiAgICAgICAgICAgIFF1b3RhdGlvbnNJdGVtczo6aW5zZXJ0KCRxdW90YXRpb25JdGVtc0lucHV0KTsKCiAgICAgICAgICAgIC8vTm90aWZpY2F0aW9uCiAgICAgICAgICAgIGlmIChhdXRoKCktPnVzZXIoKS0+aGFzUm9sZSgnUHVyY2hhc2UtRW1wbG95ZWUnKSkgewogICAgICAgICAgICAgICAgJG1lc3NhZ2UgPSAnPHNwYW4gY2xhc3M9Im5vdGlmaWNhdGlvbi1saW5rcyIgZGF0YS1zcmM9IicgLiByb3V0ZSgncG1zLnF1b3RhdGlvbi5xdW90YXRpb25zLmNzLnByb3Bvc2FsLmRldGFpbHMnLCAkcmVxdWVzdFByb3Bvc2FsLT5pZCkgLiAnIiBkYXRhLXR0aWxlPSJSZXF1ZXN0IFByb3Bvc2FsIERldGFpbHMiPlJlZmVyZW5jZSBObzonIC4gJHJlcXVlc3RQcm9wb3NhbC0+cmVmZXJlbmNlX25vIC4gJy5XYXR0aW5nIGZvciBwdXJjaGFzZSBhcHByb3ZhbC48L3NwYW4+JzsKCiAgICAgICAgICAgICAgICBDcmVhdGVPclVwZGF0ZU5vdGlmaWNhdGlvbigkbWVzc2FnZSwgJ3VucmVhZCcsICcnLCBnZXRNYW5hZ2VySW5mbygnUHVyY2hhc2UtRGVwYXJ0bWVudCcsIG51bGwsIHRydWUpLCAnc2VuZC10by1kZXBhcnRtZW50LWhlYWQnKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICRtZXNzYWdlID0gJzxzcGFuIGNsYXNzPSJub3RpZmljYXRpb24tbGlua3MiIGRhdGEtc3JjPSInIC4gcm91dGUoJ3Btcy5xdW90YXRpb24ucXVvdGF0aW9ucy5jcy5wcm9wb3NhbC5kZXRhaWxzJywgJHJlcXVlc3RQcm9wb3NhbC0+aWQpIC4gJyIgZGF0YS10aXRsZT0iUmVxdWVzdCBQcm9wb3NhbCBEZXRhaWxzIj5SZWZlcmVuY2UgTm86JyAuICRyZXF1ZXN0UHJvcG9zYWwtPnJlZmVyZW5jZV9ubyAuICcuV2F0dGluZyBmb3IgTWFuYWdlbWVudCBhcHByb3ZhbC48L3NwYW4+JzsKCiAgICAgICAgICAgICAgICBDcmVhdGVPclVwZGF0ZU5vdGlmaWNhdGlvbigkbWVzc2FnZSwgJ3VucmVhZCcsICcnLCBnZXRNYW5hZ2VySW5mbygnTWFuYWdlbWVudCcsIG51bGwsIHRydWUpLCAnc2VuZC10by1tYW5hZ2VyJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIERCOjpjb21taXQoKTsKCiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+cmVkaXJlY3RCYWNrV2l0aFN1Y2Nlc3MoJ1N1Y2Nlc3NmdWxseSBzZW5kIHRvIHB1cmNoYXNlIGRlcGFydG1lbnQhIScsICdwbXMuZXN0aW1hdGUuaW5kZXgnKTsKICAgICAgICB9IGNhdGNoIChcVGhyb3dhYmxlICR0aCkgewogICAgICAgICAgICBEQjo6cm9sbGJhY2soKTsKICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5iYWNrV2l0aEVycm9yKCR0aC0+Z2V0TWVzc2FnZSgpKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBiYWNrKCk7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIHJlZ2VuZXJhdGVUb1B1cmNoYXNlKCRxdW90YXRpb25faWQpCiAgICB7CiAgICAgICAgaWYgKFF1b3RhdGlvbnM6OndoZXJlKCdwYXJlbnRfcXVvdGF0aW9uX2lkJywgJHF1b3RhdGlvbl9pZCktPmV4aXN0cygpKSB7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+YmFja1dpdGhFcnJvcignVGhpcyBQTyBhbHJlYWR5IHJlZ2VuZXJhdGVkISEnKTsKICAgICAgICB9CgogICAgICAgIGlmIChyZXF1ZXN0KCktPmhhcygnZ2V0LXN1cHBsaWVyLWluZm8nKSkgewogICAgICAgICAgICAkc3VwcGxpZXIgPSBTdXBwbGllcnM6OndpdGgoWwogICAgICAgICAgICAgICAgJ3JlbFBheW1lbnRUZXJtcycKICAgICAgICAgICAgXSktPmZpbmQocmVxdWVzdCgpLT5nZXQoJ3N1cHBsaWVyX2lkJykpOwogICAgICAgICAgICAkY3VycmVuY2llcyA9IEN1cnJlbmN5VHlwZTo6d2l0aChbCiAgICAgICAgICAgICAgICAnY3VycmVuY2llcycgPT4gZnVuY3Rpb24gKCRxdWVyeSkgdXNlICgkc3VwcGxpZXIpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZUluKCdpZCcsIGlzc2V0KCRzdXBwbGllci0+aWQpID8gJHN1cHBsaWVyLT5jdXJyZW5jaWVzLT5wbHVjaygnaWQnKS0+dG9BcnJheSgpIDogW10pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdKS0+Z2V0KCk7CgogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UoKS0+anNvbihbCiAgICAgICAgICAgICAgICAnY3VycmVuY2llcycgPT4gJGN1cnJlbmNpZXMsCiAgICAgICAgICAgIF0pOwogICAgICAgIH0KCiAgICAgICAgJHRpdGxlID0gJ0NTIEdlbmVyYXRlJzsKCiAgICAgICAgJFF1b3RhdGlvbkRldGFpbHMgPSBRdW90YXRpb25zOjp3aXRoKFsKICAgICAgICAgICAgJ3JlbFJlcXVlc3RQcm9wb3NhbC5yZXF1ZXN0UHJvcG9zYWxSZXF1aXNpdGlvbicsCiAgICAgICAgICAgICdyZWxSZXF1ZXN0UHJvcG9zYWwucmVxdWVzdFByb3Bvc2FsUmVxdWlzaXRpb24ucmVsUmVxdWlzaXRpb24uVW5pdCcsCiAgICAgICAgXSktPndoZXJlKCdpZCcsICRxdW90YXRpb25faWQpLT53aGVyZSgnc3RhdHVzJywgJ2FjdGl2ZScpLT5maXJzdCgpOwoKCiAgICAgICAgJGZpcnN0UmVxdWlzaXRpb24gPSAkUXVvdGF0aW9uRGV0YWlscy0+cmVsUmVxdWVzdFByb3Bvc2FsLT5yZXF1ZXN0UHJvcG9zYWxSZXF1aXNpdGlvbi0+Zmlyc3QoKTsKCiAgICAgICAgJHJlcSA9IFJlcXVpc2l0aW9uOjpmaW5kKCRmaXJzdFJlcXVpc2l0aW9uLT5yZXF1aXNpdGlvbl9pZCk7CgogICAgICAgICRyZXF1ZXN0UHJvcG9zYWwgPSBSZXF1ZXN0UHJvcG9zYWw6OndoZXJlKCdpZCcsICRmaXJzdFJlcXVpc2l0aW9uLT5yZXF1ZXN0X3Byb3Bvc2FsX2lkKS0+Zmlyc3QoKTsKCiAgICAgICAgdHJ5IHsKCiAgICAgICAgICAgICRwcm9EZXRhaWxzID0gUXVvdGF0aW9uc0l0ZW1zOjp3aGVyZSgncXVvdGF0aW9uX2lkJywgJHF1b3RhdGlvbl9pZCkKICAgICAgICAgICAgICAgIC0+d2l0aChbCiAgICAgICAgICAgICAgICAgICAgJ3JlbFByb2R1Y3QnLAogICAgICAgICAgICAgICAgICAgICdyZWxQcm9kdWN0LnByb2R1Y3RVbml0JywKICAgICAgICAgICAgICAgICAgICAncmVsUHJvZHVjdC5hdHRyaWJ1dGVzLmF0dHJpYnV0ZU9wdGlvbi5hdHRyaWJ1dGUnCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgLT5nZXQoKTsKCgogICAgICAgICAgICAkZ2V0UHJvZHVjdElkcyA9ICRwcm9EZXRhaWxzLT5wbHVjaygncmVsUHJvZHVjdC5pZCcpLT51bmlxdWUoKS0+dG9BcnJheSgpOwoKICAgICAgICAgICAgJHNlbGVjdFN1cHBsaWVySWRzID0gREI6OnRhYmxlKCdwcm9kdWN0c19zdXBwbGllcicpCiAgICAgICAgICAgICAgICAtPndoZXJlSW4oJ3Byb2R1Y3RfaWQnLCAkZ2V0UHJvZHVjdElkcykKICAgICAgICAgICAgICAgIC0+Z3JvdXBCeSgnc3VwcGxpZXJfaWQnKQogICAgICAgICAgICAgICAgLT5wbHVjaygnc3VwcGxpZXJfaWQnKTsKCiAgICAgICAgICAgICRzdXBwbGllcnMgPSBTdXBwbGllcnM6OndoZXJlKCdzdGF0dXMnLCAnQWN0aXZlJykKICAgICAgICAgICAgICAgIC0+d2hlcmVJbignaWQnLCAkc2VsZWN0U3VwcGxpZXJJZHMpCiAgICAgICAgICAgICAgICAtPmdldCgpOwoKICAgICAgICAgICAgJGN1cnJlbmN5VHlwZXMgPSBDdXJyZW5jeVR5cGU6OndpdGgoWydjdXJyZW5jaWVzJ10pLT5nZXQoKTsKICAgICAgICAgICAgJHBheW1lbnRUZXJtcyA9IFBheW1lbnRUZXJtOjphbGwoKTsKCiAgICAgICAgICAgICR1c2VycyA9IFVzZXI6OnJvbGUoWydQdXJjaGFzZS1EZXBhcnRtZW50JywgJ1B1cmNoYXNlLUVtcGxveWVlJ10pCiAgICAgICAgICAgICAgICAtPndoZXJlSGFzKCdwcmlvcml0aWVzJywgZnVuY3Rpb24gKCRxdWVyeSkgdXNlICgkcmVxKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoJ2hyX3VuaXRfaWQnLCAkcmVxLT5ocl91bml0X2lkKTsKICAgICAgICAgICAgICAgIH0pLT5nZXQoKTsKCiAgICAgICAgICAgICRhcHByb3ZlcnMgPSBVc2VyOjpyb2xlKFsKICAgICAgICAgICAgICAgICdNYW5hZ2VtZW50JywKICAgICAgICAgICAgICAgICdEZXBhcnRtZW50LUhlYWQnCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAtPndoZXJlSGFzKCdwcmlvcml0aWVzJywgZnVuY3Rpb24gKCRxdWVyeSkgdXNlICgkcmVxKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoJ2hyX3VuaXRfaWQnLCAkcmVxLT5ocl91bml0X2lkKTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAtPmdldCgpOwoKICAgICAgICAgICAgaWYgKCRwcm9EZXRhaWxzLT5jb3VudCgpID4gMCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHZpZXcoJ3Btcy5iYWNrZW5kLnBhZ2VzLnN0b3JlLnJlZ2VuZXJhdGUtaW52ZW50b3J5LXB1cmNoYXNlJywgY29tcGFjdCgKICAgICAgICAgICAgICAgICAgICAndGl0bGUnLAogICAgICAgICAgICAgICAgICAgICdxdW90YXRpb25faWQnLAogICAgICAgICAgICAgICAgICAgICdwcm9EZXRhaWxzJywKICAgICAgICAgICAgICAgICAgICAnY3VycmVuY3lUeXBlcycsCiAgICAgICAgICAgICAgICAgICAgJ3N1cHBsaWVycycsCiAgICAgICAgICAgICAgICAgICAgJ3BheW1lbnRUZXJtcycsCiAgICAgICAgICAgICAgICAgICAgJ3VzZXJzJywKICAgICAgICAgICAgICAgICAgICAncmVxJywKICAgICAgICAgICAgICAgICAgICAnYXBwcm92ZXJzJywKICAgICAgICAgICAgICAgICAgICAncmVxdWVzdFByb3Bvc2FsJywKICAgICAgICAgICAgICAgICAgICAnUXVvdGF0aW9uRGV0YWlscycsCiAgICAgICAgICAgICAgICAgICAgJ2ZpcnN0UmVxdWlzaXRpb24nLAogICAgICAgICAgICAgICAgKSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJHRoaXMtPmJhY2tXaXRoRXJyb3IoJ0FscmVhZHkgcHVyY2hhc2UgdGhpcyByZXF1aXNpdGlvbi4nKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFxUaHJvd2FibGUgJHRoKSB7CgogICAgICAgICAgICByZXR1cm4gJHRoaXMtPmJhY2tXaXRoRXJyb3IoJHRoLT5nZXRNZXNzYWdlKCkpOwogICAgICAgIH0KICAgIH0KCgogICAgcHVibGljIGZ1bmN0aW9uIHJlZ2VuZXJhdGVUb1B1cmNoYXNlU3VibWl0KFJlcXVlc3QgJHJlcXVlc3QpCiAgICB7CiAgICAgICAgJG9sZFJlcXVlc3RQcm9wb3NhbCA9IFJlcXVlc3RQcm9wb3NhbDo6d2hlcmUoJ2lkJywgJHJlcXVlc3QtPm9sZF9yZXF1ZXN0UHJvcG9zYWwpLT5maXJzdCgpOwoKICAgICAgICAkY2x1ZSA9ICdHUlAnOwogICAgICAgICR1bml0cyA9IFxBcHBcTW9kZWxzXEhyXFVuaXQ6OndoZXJlSW4oJ2hyX3VuaXRfaWQnLCAkb2xkUmVxdWVzdFByb3Bvc2FsLT5yZXF1ZXN0UHJvcG9zYWxSZXF1aXNpdGlvbi0+cGx1Y2soJ3JlbFJlcXVpc2l0aW9uLmhyX3VuaXRfaWQnKSktPmdldCgpOwogICAgICAgIGlmICgkdW5pdHMtPmNvdW50KCkgPT0gMSkgewogICAgICAgICAgICAkY2x1ZSA9ICR1bml0c1swXS0+aHJfdW5pdF9zaG9ydF9uYW1lOwogICAgICAgIH0KCiAgICAgICAgJHF1b3RhdGlvblByZWZpeCA9ICdRRy0nIC4gZGF0ZSgneScsIHN0cnRvdGltZShkYXRlKCdZLW0tZCcpKSkgLiAnLScgLiAkY2x1ZSAuICctJzsKICAgICAgICAkcXVvdGF0aW9uUmVmTm8gPSB1bmlxdWVDb2RlKDE1LCAkcXVvdGF0aW9uUHJlZml4LCAncXVvdGF0aW9ucycsICdpZCcpOwoKICAgICAgICAkcmVxdWVzdC0+bWVyZ2UoWwogICAgICAgICAgICAncmVmZXJlbmNlX25vJyA9PiAkcXVvdGF0aW9uUmVmTm8KICAgICAgICBdKTsKCiAgICAgICAgJHRoaXMtPnZhbGlkYXRlKCRyZXF1ZXN0LCBbCiAgICAgICAgICAgICdyZXF1ZXN0X2RhdGUnID0+IFsncmVxdWlyZWQnLCAnZGF0ZSddLAogICAgICAgICAgICAncmVmZXJlbmNlX25vJyA9PiBbJ3JlcXVpcmVkJywgJ21heDoxNScsICd1bmlxdWU6cmVxdWVzdF9wcm9wb3NhbHMnXSwKICAgICAgICAgICAgJ3N1cHBsaWVyX2lkJyA9PiAncmVxdWlyZWR8ZXhpc3RzOnN1cHBsaWVycyxpZCcsCiAgICAgICAgICAgICdjdXJyZW5jeV9pZCcgPT4gWydyZXF1aXJlZCddLAogICAgICAgICAgICAicHJvZHVjdF9pZCIgPT4gInJlcXVpcmVkfG1pbjoxIiwKICAgICAgICAgICAgImFzc2lnbmVkX3VzZXJfaWQiID0+ICJyZXF1aXJlZCIsCiAgICAgICAgICAgICJ2YWxpZGF0aW9uX2RheXMiID0+ICJyZXF1aXJlZCIsCiAgICAgICAgICAgICdzdXBwbGllcl9xdW90YXRpb25fZGF0ZScgPT4gJ3JlcXVpcmVkfGRhdGUnLAogICAgICAgICAgICAnc3VwcGxpZXJfcXVvdGF0aW9uX3JlZl9ubycgPT4gJ3JlcXVpcmVkfG1heDoxMDAnLAogICAgICAgICAgICAncGF5bWVudF90ZXJtX2lkJyA9PiAncmVxdWlyZWQnLAogICAgICAgICAgICAncGF5bWVudF9wZXJjZW50YWdlcycgPT4gJ3JlcXVpcmVkJywKICAgICAgICAgICAgJ3BheW1lbnRfcGVyY2VudGFnZXMuKicgPT4gJ3JlcXVpcmVkJywKICAgICAgICAgICAgLy8gJ3BheW1lbnRfZHVyYXRpb25zJyA9PiAncmVxdWlyZWQnLAogICAgICAgICAgICAvLyAncGF5bWVudF9kdXJhdGlvbnMuKicgPT4gJ3JlcXVpcmVkJywKICAgICAgICAgICAgJ3BheW1lbnRfdHlwZXMnID0+ICdyZXF1aXJlZCcsCiAgICAgICAgICAgICdwYXltZW50X3R5cGVzLionID0+ICdyZXF1aXJlZCcsCiAgICAgICAgICAgICdwYXltZW50X21vZGVzJyA9PiAncmVxdWlyZWQnLAogICAgICAgICAgICAncGF5bWVudF9tb2Rlcy4qJyA9PiAncmVxdWlyZWQnLAogICAgICAgICAgICAnbm90ZScgPT4gJ251bGxhYmxlfHN0cmluZ3xtYXg6MTAwMCcsCiAgICAgICAgXSk7CgogICAgICAgIGlmICghaXNzZXQoJHJlcXVlc3QtPmFwcHJvdmVyc1swXSkpIHsKICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlKCktPmpzb24oWwogICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnID0+IGZhbHNlLAogICAgICAgICAgICAgICAgJ21lc3NhZ2UnID0+ICJQbGVhc2UgY2hvb3NlIGF0IGxlYXN0IG9uZSBBcHByb3ZlcnMuIiwKICAgICAgICAgICAgXSk7CiAgICAgICAgfQoKICAgICAgICAvLyBUcmFuc2FjdGlvbiBTdGFydCBIZXJlCiAgICAgICAgREI6OmJlZ2luVHJhbnNhY3Rpb24oKTsKICAgICAgICB0cnkgewoKCiAgICAgICAgICAgICRyZXF1aXNpdGlvbiA9IFJlcXVpc2l0aW9uOjpmaW5kKCRyZXF1ZXN0LT5vbGRfcmVxdWlzaXRpb24pOwoKICAgICAgICAgICAgJGNzX3ByZWZpeCA9ICdDUy0nIC4gZGF0ZSgneScsIHN0cnRvdGltZShkYXRlKCdZLW0tZCcpKSkgLiAnLScgLiAkcmVxdWlzaXRpb24tPnVuaXQtPmhyX3VuaXRfc2hvcnRfbmFtZSAuICctJzsKICAgICAgICAgICAgJHJlcXVlc3RQcm9wb3NhbF9yZWYgPSB1bmlxdWVDb2RlKDE0LCAkY3NfcHJlZml4LCAncmVxdWVzdF9wcm9wb3NhbHMnLCAnaWQnKTsKCiAgICAgICAgICAgICRyZXF1ZXN0UHJvcG9zYWwgPSBSZXF1ZXN0UHJvcG9zYWw6OmNyZWF0ZShbCiAgICAgICAgICAgICAgICAndHlwZScgPT4gJ21hbnVhbCcsCiAgICAgICAgICAgICAgICAncmVmZXJlbmNlX25vJyA9PiAkcmVxdWVzdFByb3Bvc2FsX3JlZiwKICAgICAgICAgICAgICAgICdyZXF1ZXN0X2RhdGUnID0+IGRhdGUoJ1ktbS1kJywgc3RydG90aW1lKCRyZXF1ZXN0LT5yZXF1ZXN0X2RhdGUpKSwKICAgICAgICAgICAgICAgICdwcm9qZWN0X25hbWUnID0+ICRvbGRSZXF1ZXN0UHJvcG9zYWwtPnByb2plY3RfbmFtZSwgLy9yZWNoZWNrCiAgICAgICAgICAgICAgICAncmVtYXJrcycgPT4gJHJlcXVlc3QtPm5vdGUsIC8vcmVjaGVjawogICAgICAgICAgICBdKTsKCiAgICAgICAgICAgIGlmIChpc3NldCgkcmVxdWVzdC0+YXBwcm92ZXJzWzBdKSkgewogICAgICAgICAgICAgICAgJHByaW9yaXR5ID0gMDsKICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRyZXF1ZXN0LT5hcHByb3ZlcnMgYXMgJGtleSA9PiAkdXNlcl9pZCkgewogICAgICAgICAgICAgICAgICAgICRhcHByb3ZhbCA9IFJlcXVlc3RQcm9wb3NhbEFwcHJvdmFsOjp3aGVyZShbCiAgICAgICAgICAgICAgICAgICAgICAgICdyZXF1ZXN0X3Byb3Bvc2FsX2lkJyA9PiAkcmVxdWVzdFByb3Bvc2FsLT5pZCwKICAgICAgICAgICAgICAgICAgICAgICAgJ3VzZXJfaWQnID0+ICR1c2VyX2lkLAogICAgICAgICAgICAgICAgICAgIF0pLT5maXJzdCgpOwogICAgICAgICAgICAgICAgICAgIGlmICghaXNzZXQoJGFwcHJvdmFsKSkgewogICAgICAgICAgICAgICAgICAgICAgICAkcHJpb3JpdHkrKzsKICAgICAgICAgICAgICAgICAgICAgICAgUmVxdWVzdFByb3Bvc2FsQXBwcm92YWw6OmNyZWF0ZShbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmVxdWVzdF9wcm9wb3NhbF9pZCcgPT4gJHJlcXVlc3RQcm9wb3NhbC0+aWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndXNlcl9pZCcgPT4gJHVzZXJfaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncHJpb3JpdHknID0+ICRwcmlvcml0eSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyZXNwb25zZScgPT4gJ3BlbmRpbmcnLAogICAgICAgICAgICAgICAgICAgICAgICBdKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vR2VuZXJhdGUgUXVvdGF0aW9uCiAgICAgICAgICAgICRxdW90YXRpb25GaWxlUGF0aCA9IG51bGw7CiAgICAgICAgICAgIGlmICgkcmVxdWVzdC0+aGFzRmlsZSgncXVvdGF0aW9uX2ZpbGUnKSkgewogICAgICAgICAgICAgICAgJHF1b3RhdGlvbkZpbGVQYXRoID0gJHRoaXMtPmZpbGVVcGxvYWQoJHJlcXVlc3QtPmZpbGUoJ3F1b3RhdGlvbl9maWxlJyksICd1cGxvYWQvcXVvdGF0aW9uL3BkZi1maWxlJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICR0ZWNobmljYWxGaWxlUGF0aCA9IG51bGw7CiAgICAgICAgICAgIGlmICgkcmVxdWVzdC0+aGFzRmlsZSgndGVjaG5pY2FsX3NwZWNpZmljYXRpb25fZmlsZScpKSB7CiAgICAgICAgICAgICAgICAkdGVjaG5pY2FsRmlsZVBhdGggPSAkdGhpcy0+ZmlsZVVwbG9hZCgkcmVxdWVzdC0+ZmlsZSgndGVjaG5pY2FsX3NwZWNpZmljYXRpb25fZmlsZScpLCAndXBsb2FkL3F1b3RhdGlvbi90ZWNobmljYWwtZmlsZScpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkc2wgPSAwOwogICAgICAgICAgICAkc3VwcGxpZXJfcGF5bWVudF90ZXJtc19pZCA9IDA7CiAgICAgICAgICAgIGlmIChpc3NldCgkcmVxdWVzdC0+cGF5bWVudF9wZXJjZW50YWdlc1swXSkpIHsKICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRyZXF1ZXN0LT5wYXltZW50X3BlcmNlbnRhZ2VzIGFzICRrZXkgPT4gJHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgJHN1cHBsaWVyUGF5bWVudFRlcm0gPSBTdXBwbGllclBheW1lbnRUZXJtOjpjcmVhdGUoWwogICAgICAgICAgICAgICAgICAgICAgICAnc3VwcGxpZXJfaWQnID0+ICRyZXF1ZXN0LT5zdXBwbGllcl9pZCwKICAgICAgICAgICAgICAgICAgICAgICAgJ3BheW1lbnRfdGVybV9pZCcgPT4gJHJlcXVlc3QtPnBheW1lbnRfdGVybV9pZCwKICAgICAgICAgICAgICAgICAgICAgICAgJ3BheW1lbnRfcGVyY2VudCcgPT4gJHJlcXVlc3QtPnBheW1lbnRfcGVyY2VudGFnZXNbJGtleV0sCiAgICAgICAgICAgICAgICAgICAgICAgICdkYXlfZHVyYXRpb24nID0+IDEsCiAgICAgICAgICAgICAgICAgICAgICAgIC8vICdkYXlfZHVyYXRpb24nID0+ICRyZXF1ZXN0LT5wYXltZW50X2R1cmF0aW9uc1ska2V5XSwKICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnID0+ICRyZXF1ZXN0LT5wYXltZW50X3R5cGVzWyRrZXldLAogICAgICAgICAgICAgICAgICAgICAgICAncGF5bWVudF9tb2RlJyA9PiAkcmVxdWVzdC0+cGF5bWVudF9tb2Rlc1ska2V5XSwKICAgICAgICAgICAgICAgICAgICAgICAgJ3BhcmVudF9pZCcgPT4gaXNzZXQoJHBhcmVudC0+aWQpID8gJHBhcmVudC0+aWQgOiAwLAogICAgICAgICAgICAgICAgICAgICAgICAnc291cmNlJyA9PiAnY3MnLAogICAgICAgICAgICAgICAgICAgIF0pOwoKICAgICAgICAgICAgICAgICAgICAkc2wrKzsKCiAgICAgICAgICAgICAgICAgICAgaWYgKCRzbCA9PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRwYXJlbnQgPSAkc3VwcGxpZXJQYXltZW50VGVybTsKICAgICAgICAgICAgICAgICAgICAgICAgJHN1cHBsaWVyX3BheW1lbnRfdGVybXNfaWQgPSAkc3VwcGxpZXJQYXltZW50VGVybS0+aWQ7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAkcXVvdGF0aW9uID0gUXVvdGF0aW9uczo6Y3JlYXRlKFsKICAgICAgICAgICAgICAgICdzdXBwbGllcl9pZCcgPT4gJHJlcXVlc3QtPnN1cHBsaWVyX2lkLAogICAgICAgICAgICAgICAgJ3JlcXVlc3RfcHJvcG9zYWxfaWQnID0+ICRyZXF1ZXN0UHJvcG9zYWwtPmlkLAogICAgICAgICAgICAgICAgJ3JlZmVyZW5jZV9ubycgPT4gJHF1b3RhdGlvblJlZk5vLAogICAgICAgICAgICAgICAgJ3N1cHBsaWVyX3F1b3RhdGlvbl9kYXRlJyA9PiBkYXRlKCdZLW0tZCcsIHN0cnRvdGltZSgkcmVxdWVzdC0+c3VwcGxpZXJfcXVvdGF0aW9uX2RhdGUpKSwKICAgICAgICAgICAgICAgICdzdXBwbGllcl9xdW90YXRpb25fcmVmX25vJyA9PiAkcmVxdWVzdC0+c3VwcGxpZXJfcXVvdGF0aW9uX3JlZl9ubywKICAgICAgICAgICAgICAgICdxdW90YXRpb25fZGF0ZScgPT4gZGF0ZSgnWS1tLWQnLCBzdHJ0b3RpbWUoJHJlcXVlc3QtPnJlcXVlc3RfZGF0ZSkpLAogICAgICAgICAgICAgICAgJ3RvdGFsX3ByaWNlJyA9PiAkcmVxdWVzdC0+c3VtX29mX3N1YnRvdGFsLAogICAgICAgICAgICAgICAgJ2Rpc2NvdW50JyA9PiAkcmVxdWVzdC0+ZGlzY291bnQgPT0gbnVsbCA/IDAgOiAkcmVxdWVzdC0+ZGlzY291bnQsCiAgICAgICAgICAgICAgICAndmF0JyA9PiBjb2xsZWN0KCRyZXF1ZXN0LT5zdWJfdG90YWxfdmF0X3ByaWNlKS0+c3VtKCksCiAgICAgICAgICAgICAgICAnZ3Jvc3NfcHJpY2UnID0+ICRyZXF1ZXN0LT5ncm9zc19wcmljZSwKICAgICAgICAgICAgICAgICd2YWxpZGF0aW9uX2RheXMnID0+ICRyZXF1ZXN0LT52YWxpZGF0aW9uX2RheXMsCiAgICAgICAgICAgICAgICAnc3RhdHVzJyA9PiAnYWN0aXZlJywKICAgICAgICAgICAgICAgICd0eXBlJyA9PiAnbWFudWFsJywKICAgICAgICAgICAgICAgICdkZWxpdmVyeV9kYXRlJyA9PiBpc3NldCgkcmVxdWVzdC0+ZGVsaXZlcnlfZGF0ZSkgPyAkcmVxdWVzdC0+ZGVsaXZlcnlfZGF0ZSA6IGRhdGUoJ1ktbS1kJyksCiAgICAgICAgICAgICAgICAnaXNfYXBwcm92ZWQnID0+IChhdXRoKCktPnVzZXIoKS0+aGFzUm9sZSgnUHVyY2hhc2UtRW1wbG95ZWUnKSA/ICdwcmUtcHJvY2Vzc2luZycgOiAncHJvY2Vzc2luZycpLAogICAgICAgICAgICAgICAgJ3N1cHBsaWVyX3BheW1lbnRfdGVybXNfaWQnID0+ICRzdXBwbGllcl9wYXltZW50X3Rlcm1zX2lkLAogICAgICAgICAgICAgICAgJ3F1b3RhdGlvbl9maWxlJyA9PiAkcXVvdGF0aW9uRmlsZVBhdGgsCiAgICAgICAgICAgICAgICAndGVjaG5pY2FsX3NwZWNpZmljYXRpb25fZmlsZScgPT4gJHRlY2huaWNhbEZpbGVQYXRoLAogICAgICAgICAgICAgICAgJ2V4Y2hhbmdlX3JhdGVfaWQnID0+IGdldEV4Y2hhbmdlUmF0ZXMoJHJlcXVlc3QtPmN1cnJlbmN5X2lkKVsncmF0ZSddLT5pZCwKICAgICAgICAgICAgICAgICdub3RlJyA9PiAkcmVxdWVzdC0+bm90ZSwKICAgICAgICAgICAgICAgICdwYXJlbnRfcXVvdGF0aW9uX2lkJyA9PiAkcmVxdWVzdC0+b2xkX3F1b3RhdGlvbiwKICAgICAgICAgICAgXSk7CgogICAgICAgICAgICBmb3JlYWNoICgkcmVxdWVzdC0+cHJvZHVjdF9pZCBhcyAkaSA9PiAkdWlkKSB7CiAgICAgICAgICAgICAgICAkcmVxdWlzaXRpb25JdGVtID0gJHJlcXVpc2l0aW9uLT5pdGVtcy0+d2hlcmUoJ3VpZCcsICR1aWQpLT5maXJzdCgpOwogICAgICAgICAgICAgICAgJGl0ZW1UZWNobmljYWxGaWxlUGF0aCA9IG51bGw7CiAgICAgICAgICAgICAgICBpZiAoJHJlcXVlc3QtPmhhc0ZpbGUoJ2l0ZW1fdGVjaG5pY2FsX3NwZWNpZmljYXRpb25fZmlsZS4nIC4gJHVpZCkpIHsKICAgICAgICAgICAgICAgICAgICAkaXRlbVRlY2huaWNhbEZpbGVQYXRoID0gJHRoaXMtPmZpbGVVcGxvYWQoJHJlcXVlc3QtPmZpbGUoJ2l0ZW1fdGVjaG5pY2FsX3NwZWNpZmljYXRpb25fZmlsZS4nIC4gJHVpZCksICd1cGxvYWQvcXVvdGF0aW9uL2l0ZW0tdGVjaG5pY2FsLWZpbGUnKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAkcXVvdGF0aW9uSXRlbXNJbnB1dFtdID0gWwogICAgICAgICAgICAgICAgICAgICdxdW90YXRpb25faWQnID0+ICRxdW90YXRpb24tPmlkLAogICAgICAgICAgICAgICAgICAgICd1aWQnID0+ICR1aWQsCiAgICAgICAgICAgICAgICAgICAgJ3Byb2R1Y3RfaWQnID0+ICRyZXF1aXNpdGlvbkl0ZW0tPnByb2R1Y3RfaWQsCiAgICAgICAgICAgICAgICAgICAgJ2Rlc2NyaXB0aW9uJyA9PiAkcmVxdWVzdC0+cHJvZHVjdF9kZXNjcmlwdGlvblskdWlkXSwKICAgICAgICAgICAgICAgICAgICAndW5pdF9wcmljZScgPT4gJHJlcXVlc3QtPnVuaXRfcHJpY2VbJHVpZF0sCiAgICAgICAgICAgICAgICAgICAgJ3F0eScgPT4gJHJlcXVlc3QtPnF0eVskdWlkXSwKICAgICAgICAgICAgICAgICAgICAnc3ViX3RvdGFsX3ByaWNlJyA9PiAkcmVxdWVzdC0+c3ViX3RvdGFsX3ByaWNlWyR1aWRdLAogICAgICAgICAgICAgICAgICAgICdkaXNjb3VudCcgPT4gJHJlcXVlc3QtPml0ZW1fZGlzY291bnRfcGVyY2VudFskdWlkXSA9PSBudWxsID8gMCA6ICRyZXF1ZXN0LT5pdGVtX2Rpc2NvdW50X3BlcmNlbnRbJHVpZF0sCiAgICAgICAgICAgICAgICAgICAgJ2Rpc2NvdW50X2Ftb3VudCcgPT4gaXNzZXQoJHJlcXVlc3QtPml0ZW1fZGlzY291bnRfYW1vdW50WyR1aWRdKSA/ICRyZXF1ZXN0LT5pdGVtX2Rpc2NvdW50X2Ftb3VudFskdWlkXSA6IDAsCiAgICAgICAgICAgICAgICAgICAgJ3ZhdF90eXBlJyA9PiAkcmVxdWVzdC0+cHJvZHVjdF92YXRfdHlwZVskdWlkXSwKICAgICAgICAgICAgICAgICAgICAndmF0X3BlcmNlbnRhZ2UnID0+ICRyZXF1ZXN0LT5wcm9kdWN0X3ZhdFskdWlkXSwKICAgICAgICAgICAgICAgICAgICAndmF0JyA9PiAkcmVxdWVzdC0+c3ViX3RvdGFsX3ZhdF9wcmljZVskdWlkXSwKICAgICAgICAgICAgICAgICAgICAndG90YWxfcHJpY2UnID0+ICgkcmVxdWVzdC0+c3ViX3RvdGFsX3ByaWNlWyR1aWRdIC0gKGlzc2V0KCRyZXF1ZXN0LT5pdGVtX2Rpc2NvdW50X2Ftb3VudFskdWlkXSkgPyAkcmVxdWVzdC0+aXRlbV9kaXNjb3VudF9hbW91bnRbJHVpZF0gOiAwKSkgKyAoJHJlcXVlc3QtPnByb2R1Y3RfdmF0X3R5cGVbJHVpZF0gPT0gJ2V4Y2x1c2l2ZScgPyAkcmVxdWVzdC0+c3ViX3RvdGFsX3ZhdF9wcmljZVskdWlkXSA6IDApLAogICAgICAgICAgICAgICAgICAgICdjcmVhdGVkX2F0JyA9PiBkYXRlKCdZLW0tZCBIOmk6cycpLAogICAgICAgICAgICAgICAgICAgICd0ZWNobmljYWxfc3BlY2lmaWNhdGlvbl9maWxlJyA9PiAkaXRlbVRlY2huaWNhbEZpbGVQYXRoLAogICAgICAgICAgICAgICAgXTsKCiAgICAgICAgICAgICAgICAkcmVxdWVzdFByb3Bvc2FsRGV0YWlsc0lucHV0W10gPSBbCiAgICAgICAgICAgICAgICAgICAgJ3JlcXVlc3RfcHJvcG9zYWxfaWQnID0+ICRyZXF1ZXN0UHJvcG9zYWwtPmlkLAogICAgICAgICAgICAgICAgICAgICd1aWQnID0+ICR1aWQsCiAgICAgICAgICAgICAgICAgICAgJ3Byb2R1Y3RfaWQnID0+ICRyZXF1aXNpdGlvbkl0ZW0tPnByb2R1Y3RfaWQsCiAgICAgICAgICAgICAgICAgICAgJ3JlcXVlc3RfcXR5JyA9PiAkcmVxdWVzdC0+cmVxdWVzdF9xdHlbJHVpZF0sCiAgICAgICAgICAgICAgICAgICAgJ3F0eScgPT4gJHJlcXVlc3QtPnF0eVskdWlkXSwKICAgICAgICAgICAgICAgICAgICAnY3JlYXRlZF9ieScgPT4gYXV0aCgpLT51c2VyKCktPmlkLAogICAgICAgICAgICAgICAgICAgICdjcmVhdGVkX2F0JyA9PiBkYXRlKCdZLW0tZCBIOmk6cycpLAogICAgICAgICAgICAgICAgXTsKCgogICAgICAgICAgICAgICAgJHByZXZSZXFJdGVtID0gUmVxdWlzaXRpb25JdGVtOjp3aGVyZShbCiAgICAgICAgICAgICAgICAgICAgJ3JlcXVpc2l0aW9uX2lkJyA9PiAkcmVxdWVzdC0+b2xkX3JlcXVpc2l0aW9uLAogICAgICAgICAgICAgICAgICAgICdwcm9kdWN0X2lkJyA9PiAkcmVxdWlzaXRpb25JdGVtLT5wcm9kdWN0X2lkLAogICAgICAgICAgICAgICAgICAgICd1aWQnID0+ICR1aWQsCiAgICAgICAgICAgICAgICBdKS0+Zmlyc3QoKTsKCiAgICAgICAgICAgICAgICBSZXF1aXNpdGlvbkl0ZW06OndoZXJlKFsKICAgICAgICAgICAgICAgICAgICAncmVxdWlzaXRpb25faWQnID0+ICRyZXF1ZXN0LT5vbGRfcmVxdWlzaXRpb24sCiAgICAgICAgICAgICAgICAgICAgJ3Byb2R1Y3RfaWQnID0+ICRyZXF1aXNpdGlvbkl0ZW0tPnByb2R1Y3RfaWQsCiAgICAgICAgICAgICAgICAgICAgJ3VpZCcgPT4gJHVpZCwKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgLT51cGRhdGUoWwogICAgICAgICAgICAgICAgICAgICAgICAncHVyY2hhc2VfcXR5JyA9PiAkcHJldlJlcUl0ZW0tPnF0eSA+ICRyZXF1ZXN0LT5xdHlbJHVpZF0gPyAkcHJldlJlcUl0ZW0tPnF0eSAtICRyZXF1ZXN0LT5xdHlbJHVpZF0gOiAkcmVxdWVzdC0+cXR5WyR1aWRdCiAgICAgICAgICAgICAgICAgICAgXSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vRm9yIHVwZGF0ZSBjb2x1bW4gKElzX1NlbmQpIG9uIHJlcXVpc2l0aW9uIGl0ZW1zIHRhYmxlCgoKICAgICAgICAgICAgLy8gUmVxdWlzaXRpb25JdGVtOjp3aGVyZSgncmVxdWlzaXRpb25faWQnLCAkcmVxdWVzdC0+b2xkX3JlcXVpc2l0aW9uKQogICAgICAgICAgICAvLyAgICAgLT53aGVyZUluKCd1aWQnLCAkcmVxdWVzdC0+cHJvZHVjdF9pZCkKICAgICAgICAgICAgLy8gICAgIC0+d2hlcmUoJ2lzX3NlbmQnLCAneWVzJykKICAgICAgICAgICAgLy8gICAgIC0+dXBkYXRlKFsKICAgICAgICAgICAgLy8gICAgICAgICAnaXNfc2VuZCcgPT4gJ25vJwogICAgICAgICAgICAvLyAgICAgXSk7CgogICAgICAgICAgICBSZXF1ZXN0UHJvcG9zYWxSZXF1aXNpdGlvbnM6OmNyZWF0ZShbCiAgICAgICAgICAgICAgICAncmVxdWlzaXRpb25faWQnID0+ICRyZXF1ZXN0LT5vbGRfcmVxdWlzaXRpb24sCiAgICAgICAgICAgICAgICAncmVxdWVzdF9wcm9wb3NhbF9pZCcgPT4gJHJlcXVlc3RQcm9wb3NhbC0+aWQsCiAgICAgICAgICAgIF0pOwoKICAgICAgICAgICAgUmVxdWVzdFByb3Bvc2FsRGVmaW5lU3VwcGxpZXI6Omluc2VydChbCiAgICAgICAgICAgICAgICAncmVxdWVzdF9wcm9wb3NhbF9pZCcgPT4gJHJlcXVlc3RQcm9wb3NhbC0+aWQsCiAgICAgICAgICAgICAgICAnc3VwcGxpZXJfaWQnID0+ICRyZXF1ZXN0LT5zdXBwbGllcl9pZCwKICAgICAgICAgICAgXSk7CiAgICAgICAgICAgIC8vQWRkIHJlcXVlc3QgcHJvcG9zYWwgZGV0YWlscyBkYXRhCiAgICAgICAgICAgIFJlcXVlc3RQcm9wb3NhbERldGFpbHM6Omluc2VydCgkcmVxdWVzdFByb3Bvc2FsRGV0YWlsc0lucHV0KTsKICAgICAgICAgICAgLy9BZGQgcXVvdGF0aW9uIGl0ZW1zIGRhdGEKICAgICAgICAgICAgUXVvdGF0aW9uc0l0ZW1zOjppbnNlcnQoJHF1b3RhdGlvbkl0ZW1zSW5wdXQpOwoKICAgICAgICAgICAgLy9Ob3RpZmljYXRpb24KICAgICAgICAgICAgaWYgKGF1dGgoKS0+dXNlcigpLT5oYXNSb2xlKCdQdXJjaGFzZS1FbXBsb3llZScpKSB7CiAgICAgICAgICAgICAgICAkbWVzc2FnZSA9ICc8c3BhbiBjbGFzcz0ibm90aWZpY2F0aW9uLWxpbmtzIiBkYXRhLXNyYz0iJyAuIHJvdXRlKCdwbXMucXVvdGF0aW9uLnF1b3RhdGlvbnMuY3MuYW5hbHlzaXMnLCAkcmVxdWVzdFByb3Bvc2FsLT5pZCkgLiAnIiBkYXRhLXR0aWxlPSJSZXF1ZXN0IFByb3Bvc2FsIERldGFpbHMiPlJlZmVyZW5jZSBObzonIC4gJHJlcXVlc3RQcm9wb3NhbC0+cmVmZXJlbmNlX25vIC4gJy5XYXR0aW5nIGZvciBwdXJjaGFzZSBhcHByb3ZhbC48L3NwYW4+JzsKCiAgICAgICAgICAgICAgICBDcmVhdGVPclVwZGF0ZU5vdGlmaWNhdGlvbigkbWVzc2FnZSwgJ3VucmVhZCcsICcnLCBnZXRNYW5hZ2VySW5mbygnUHVyY2hhc2UtRGVwYXJ0bWVudCcsIG51bGwsIHRydWUpLCAnc2VuZC10by1kZXBhcnRtZW50LWhlYWQnKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICRtZXNzYWdlID0gJzxzcGFuIGNsYXNzPSJub3RpZmljYXRpb24tbGlua3MiIGRhdGEtc3JjPSInIC4gcm91dGUoJ3Btcy5xdW90YXRpb24ucXVvdGF0aW9ucy5jcy5hbmFseXNpcycsICRyZXF1ZXN0UHJvcG9zYWwtPmlkKSAuICciIGRhdGEtdGl0bGU9IlJlcXVlc3QgUHJvcG9zYWwgRGV0YWlscyI+UmVmZXJlbmNlIE5vOicgLiAkcmVxdWVzdFByb3Bvc2FsLT5yZWZlcmVuY2Vfbm8gLiAnLldhdHRpbmcgZm9yIE1hbmFnZW1lbnQgYXBwcm92YWwuPC9zcGFuPic7CgogICAgICAgICAgICAgICAgQ3JlYXRlT3JVcGRhdGVOb3RpZmljYXRpb24oJG1lc3NhZ2UsICd1bnJlYWQnLCAnJywgZ2V0TWFuYWdlckluZm8oJ01hbmFnZW1lbnQnLCBudWxsLCB0cnVlKSwgJ3NlbmQtdG8tbWFuYWdlcicpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBEQjo6Y29tbWl0KCk7CgogICAgICAgICAgICByZXR1cm4gJHRoaXMtPnJlZGlyZWN0QmFja1dpdGhTdWNjZXNzKCdTdWNjZXNzZnVsbHkgc2VuZCB0byBwdXJjaGFzZSBkZXBhcnRtZW50ISEnLCAncG1zLmVzdGltYXRlLmluZGV4Jyk7CiAgICAgICAgfSBjYXRjaCAoXFRocm93YWJsZSAkdGgpIHsKICAgICAgICAgICAgREI6OnJvbGxiYWNrKCk7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+YmFja1dpdGhFcnJvcigkdGgtPmdldE1lc3NhZ2UoKSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gYmFjaygpOwogICAgfQoKCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0U3VwcGxpZXJQYXltZW50VGVybXMoUmVxdWVzdCAkcmVxdWVzdCwgJGlkKQogICAgewogICAgICAgICRzdXBwbGllclBheW1lbnRUZXJtcyA9IFN1cHBsaWVyUGF5bWVudFRlcm06OndoZXJlKCdzdXBwbGllcl9pZCcsICRpZCktPmdldCgpOwogICAgICAgICRkYXRhID0gJyc7CiAgICAgICAgaWYgKGlzc2V0KCRzdXBwbGllclBheW1lbnRUZXJtc1swXSkpIHsKICAgICAgICAgICAgJGRhdGEgLj0gJzxvcHRpb24gdmFsdWU9IiI+LS1TZWxlY3QgT25lLS08L29wdGlvbj4nOwogICAgICAgICAgICBmb3JlYWNoICgkc3VwcGxpZXJQYXltZW50VGVybXMgYXMgJGtleSA9PiAkcGF5bWVudFRlcm1zKSB7CiAgICAgICAgICAgICAgICAkZGF0YSAuPSAnPG9wdGlvbiB2YWx1ZT0iJyAuICRwYXltZW50VGVybXMtPmlkIC4gJyI+JyAuICRwYXltZW50VGVybXMtPnJlbFBheW1lbnRUZXJtLT50ZXJtIC4gJzwvb3B0aW9uPic7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiAkZGF0YTsKICAgIH0KCiAgICAvKioKICAgICAqIENvbXBsZXRlIHF1b3RhdGlvbiBnZW5lcmF0ZS4KICAgICAqCiAgICAgKiBAcmV0dXJuIFxJbGx1bWluYXRlXEh0dHBcUmVzcG9uc2UKICAgICAqLwoKICAgIHB1YmxpYyBmdW5jdGlvbiByZnBRdW90YXRpb25nZW5lcmF0ZUNvbXBsZXRlKFJlcXVlc3QgJHJlcXVlc3QpCiAgICB7CiAgICAgICAgJHJlc3BvbnNlID0gW107CiAgICAgICAgJGRhdGEgPSBSZXF1ZXN0UHJvcG9zYWw6OndoZXJlKCdpZCcsICRyZXF1ZXN0LT5yZXFfcHJvcG9zYWxfaWQpLT5maXJzdCgpOwogICAgICAgIC8vU3RhcnQgdHJhbnNhY3Rpb24KICAgICAgICBEQjo6YmVnaW5UcmFuc2FjdGlvbigpOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIGlmICghZW1wdHkoJGRhdGEpKSB7CiAgICAgICAgICAgICAgICAkZGF0YS0+cXVvdGF0aW9uX2dlbmVyYXRlX3R5cGUgPSAnY29tcGxldGUnOwogICAgICAgICAgICAgICAgJGRhdGEtPnNhdmUoKTsKICAgICAgICAgICAgICAgIC8vQ29tbWl0IGRhdGEKICAgICAgICAgICAgICAgIERCOjpjb21taXQoKTsKCiAgICAgICAgICAgICAgICAkcmVzcG9uc2VbJ3Jlc3VsdCddID0gJ3N1Y2Nlc3MnOwogICAgICAgICAgICAgICAgJHJlc3BvbnNlWydtZXNzYWdlJ10gPSAnU3VjY2Vzc2Z1bGx5IENvbXBsZXRlIFRoaXMgUmVxdWVzdCBQcm9wb3NhbCEhJzsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICRyZXNwb25zZVsncmVzdWx0J10gPSAnZXJyb3InOwogICAgICAgICAgICAgICAgJHJlc3BvbnNlWydtZXNzYWdlJ10gPSAnRGF0YSBub3QgZm91bmQuISEnOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoXFRocm93YWJsZSAkdGgpIHsKICAgICAgICAgICAgLy9JZiBwcm9jZXNzIGhhcyBhbnkgcHJvYmxlbSB0aGVuIHJvbGxiYWNrIHRoZSBkYXRhCiAgICAgICAgICAgIERCOjpyb2xsYmFjaygpOwogICAgICAgICAgICAkcmVzcG9uc2VbJ3Jlc3VsdCddID0gJ2Vycm9yJzsKICAgICAgICAgICAgJHJlc3BvbnNlWydtZXNzYWdlJ10gPSAkdGgtPmdldE1lc3NhZ2UoKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuICRyZXNwb25zZTsKICAgIH0KCiAgICBwdWJsaWMgZnVuY3Rpb24gZXN0aW1hdGUoKQogICAgewogICAgICAgIC8vIGNvZGUuLi4KICAgIH0KCiAgICBwdWJsaWMgZnVuY3Rpb24gcmZwSGlzdG9yeSgkaWQpCiAgICB7CiAgICAgICAgdHJ5IHsKCiAgICAgICAgICAgICR0aXRsZSA9ICJDUyBIaXN0b3J5IjsKICAgICAgICAgICAgJHByb3Bvc2FscyA9IFJlcXVlc3RQcm9wb3NhbDo6d2l0aCgncmVsUXVvdGF0aW9ucycpLT53aGVyZSgnaWQnLCAkaWQpLT5vcmRlcmJ5KCdpZCcsICdkZXNjJyktPmZpcnN0KCk7CgogICAgICAgICAgICBpZiAoY291bnQoJHByb3Bvc2Fscy0+cmVsUXVvdGF0aW9ucykgPiAwKSB7CiAgICAgICAgICAgICAgICAkcHVyY2hhc2UgPSAkcHJvcG9zYWxzLT5yZWxRdW90YXRpb25zKCktPndpdGgoJ3JlbFB1cmNoYXNlT3JkZXInKS0+Zmlyc3QoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJHB1cmNoYXNlT3JkZXIgPSBpc3NldCgkcHVyY2hhc2UpID8gKCFlbXB0eSgkcHVyY2hhc2UtPnJlbFB1cmNoYXNlT3JkZXIpID8gJHB1cmNoYXNlLT5yZWxQdXJjaGFzZU9yZGVyIDogJycpIDogJyc7CgogICAgICAgICAgICBpZiAoIWVtcHR5KCRwdXJjaGFzZU9yZGVyKSkgewogICAgICAgICAgICAgICAgJGJpbGxNYW5hZ2UgPSBQdXJjaGFzZU9yZGVyOjp3aXRoKFsKICAgICAgICAgICAgICAgICAgICAncmVsR29vZFJlY2VpdmVOb3RlJywKICAgICAgICAgICAgICAgICAgICAncmVsR29vZHNSZWNlaXZlZEl0ZW1TdG9ja0luJywKICAgICAgICAgICAgICAgICAgICAncmVsUXVvdGF0aW9uLnJlbFN1cHBsaWVycycsCiAgICAgICAgICAgICAgICAgICAgJ3JlbFF1b3RhdGlvbi5leGNoYW5nZVJhdGUuY3VycmVuY3knLAogICAgICAgICAgICAgICAgICAgICdyZWxQdXJjaGFzZU9yZGVySXRlbXMnLAogICAgICAgICAgICAgICAgICAgICdyZWxQb0F0dGFjaG1lbnQnCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIC0+d2hlcmUoJ2lzX3NlbmQnLCAneWVzJykKICAgICAgICAgICAgICAgICAgICAtPndoZXJlSGFzKCdyZWxHb29kUmVjZWl2ZU5vdGUnLCBmdW5jdGlvbiAoJHF1ZXJ5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRxdWVyeS0+d2hlcmVSYXcoJ3B1cmNoYXNlX29yZGVycy5pZD1nb29kc19yZWNlaXZlZF9ub3Rlcy5wdXJjaGFzZV9vcmRlcl9pZCcpOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLT53aGVyZUhhcygncmVsR29vZHNSZWNlaXZlZEl0ZW1TdG9ja0luJywgZnVuY3Rpb24gKCRxdWVyeSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgnaXNfZ3JuX2NvbXBsZXRlJywgJ3llcycpLT53aGVyZSgndG90YWxfYW1vdW50JywgJz4nLCAwKTsKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIC0+d2hlcmUoJ2lkJywgJHB1cmNoYXNlT3JkZXItPmlkKQogICAgICAgICAgICAgICAgICAgIC0+Zmlyc3QoKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICRiaWxsTWFuYWdlID0gJyc7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB2aWV3KCdwbXMuYmFja2VuZC5wYWdlcy5yZnAucmZwLWhpc3RvcnknLCBjb21wYWN0KCd0aXRsZScsICdwdXJjaGFzZU9yZGVyJywgJ3Byb3Bvc2FscycsICdiaWxsTWFuYWdlJykpOwogICAgICAgIH0gY2F0Y2ggKFxUaHJvd2FibGUgJHRoKSB7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+YmFja1dpdGhXYXJuaW5nKCR0aC0+Z2V0TWVzc2FnZSgpKTsKICAgICAgICB9CiAgICB9Cn0K