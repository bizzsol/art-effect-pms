<?php
bolt_decrypt( __FILE__ , 'SPlv5N'); return 0;
##!!!##