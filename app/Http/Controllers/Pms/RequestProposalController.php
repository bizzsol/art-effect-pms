<?php
bolt_decrypt( __FILE__ , 'ot8S9P'); return 0;
##!!!##