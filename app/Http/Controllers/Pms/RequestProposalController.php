<?php
bolt_decrypt( __FILE__ , 'xMJJj5'); return 0;
##!!!##