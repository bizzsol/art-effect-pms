<?php
bolt_decrypt( __FILE__ , 'w6MRfF'); return 0;
##!!!##