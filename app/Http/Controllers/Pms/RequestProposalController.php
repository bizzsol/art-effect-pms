<?php
bolt_decrypt( __FILE__ , 'KMFoKP'); return 0;
##!!!##