<?php
bolt_decrypt( __FILE__ , '5Vv8t5'); return 0;
##!!!##