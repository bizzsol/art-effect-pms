<?php
bolt_decrypt( __FILE__ , '1mN9lW'); return 0;
##!!!##