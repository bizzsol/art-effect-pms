<?php
bolt_decrypt( __FILE__ , 'Xv0CeB'); return 0;
##!!!##