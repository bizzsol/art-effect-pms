<?php
bolt_decrypt( __FILE__ , 'WkYv33'); return 0;
##!!!##