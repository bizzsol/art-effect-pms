<?php
bolt_decrypt( __FILE__ , 'E7p4wK'); return 0;
##!!!##