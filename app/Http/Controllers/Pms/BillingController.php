<?php
bolt_decrypt( __FILE__ , 'YsdP5S'); return 0;
##!!!##