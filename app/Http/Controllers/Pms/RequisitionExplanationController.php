<?php
bolt_decrypt( __FILE__ , 'wEQvD9'); return 0;
##!!!##CgpuYW1lc3BhY2UgQXBwXEh0dHBcQ29udHJvbGxlcnNcUG1zOwoKdXNlIEFwcFxIdHRwXENvbnRyb2xsZXJzXENvbnRyb2xsZXI7CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xSZXF1aXNpdGlvbkV4cGxhbmF0aW9uOwp1c2UgSWxsdW1pbmF0ZVxIdHRwXFJlcXVlc3Q7CnVzZSBEQiwgRGF0YVRhYmxlczsKCmNsYXNzIFJlcXVpc2l0aW9uRXhwbGFuYXRpb25Db250cm9sbGVyIGV4dGVuZHMgQ29udHJvbGxlcgp7ICAgCiAgICBwdWJsaWMgZnVuY3Rpb24gaGVhZGVyQ29sdW1ucygpCiAgICB7CiAgICAgICAgcmV0dXJuIGFycmF5KAogICAgICAgICAgICBbJ1NMJywgJ1NMJ10sCiAgICAgICAgICAgIFsnZXhwbGFuYXRpb24nLCAnZXhwbGFuYXRpb24nXSwKICAgICAgICAgICAgWydjcmVhdGVkX2F0JywgJ2NyZWF0ZWRfYXQnLCAndGV4dC1jZW50ZXInXSwKICAgICAgICAgICAgWydjcmVhdGVkX2J5JywgJ2NyZWF0ZWRfYnknLCAndGV4dC1jZW50ZXInXSwKICAgICAgICAgICAgWyd1cGRhdGVkX2F0JywgJ3VwZGF0ZWRfYXQnLCAndGV4dC1jZW50ZXInXSwKICAgICAgICAgICAgWyd1cGRhdGVkX2J5JywgJ3VwZGF0ZWRfYnknLCAndGV4dC1jZW50ZXInXSwKICAgICAgICAgICAgWydhY3Rpb25zJywgJ2FjdGlvbnMnLCAndGV4dC1jZW50ZXInXQogICAgICAgICk7CiAgICB9CiAgICAKICAgIC8qKgogICAgICogRGlzcGxheSBhIGxpc3Rpbmcgb2YgdGhlIHJlc291cmNlLgogICAgICoKICAgICAqIEByZXR1cm4gXElsbHVtaW5hdGVcSHR0cFxSZXNwb25zZQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gaW5kZXgoKQogICAgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIGlmIChyZXF1ZXN0KCktPmFqYXgoKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIERhdGF0YWJsZXM6Om9mKFJlcXVpc2l0aW9uRXhwbGFuYXRpb246OnF1ZXJ5KCkpCiAgICAgICAgICAgICAgICAtPmFkZEluZGV4Q29sdW1uKCkKICAgICAgICAgICAgICAgIC0+YWRkQ29sdW1uKCdhY3Rpb25zJywgZnVuY3Rpb24oJGV4cGxhbmF0aW9uKXsKICAgICAgICAgICAgICAgICAgICAkYWN0aW9ucyA9ICcnOwogICAgICAgICAgICAgICAgICAgICRhY3Rpb25zIC49ICc8YSBjbGFzcz0iYnRuIGJ0bi14cyBidG4taW5mbyByb3VuZGVkLWNpcmNsZSBtLTEiIGhyZWY9Iicucm91dGUoJ3Btcy5yZXF1aXNpdGlvbi1leHBsYW5hdGlvbnMuZWRpdCcsICRleHBsYW5hdGlvbi0+aWQpLiciPjxpIGNsYXNzPSJsYSBsYS1lZGl0Ij48L2k+PC9hPic7CiAgICAgICAgICAgICAgICAgICAgJGFjdGlvbnMgLj0gJzxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImJ0biBidG4teHMgYnRuLWRhbmdlciBtLTEiIGRhdGEtc3JjPSInLnJvdXRlKCdwbXMucmVxdWlzaXRpb24tZXhwbGFuYXRpb25zLmRlc3Ryb3knLCAkZXhwbGFuYXRpb24tPmlkKS4nIiBvbmNsaWNrPSJkZWxldGVGcm9tQ1JVRCgkKHRoaXMpKSI+PGkgY2xhc3M9ImxhIGxhLXRyYXNoIj48L2k+PC9hPic7CgogICAgICAgICAgICAgICAgICAgIHJldHVybiAkYWN0aW9uczsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAtPmVkaXRDb2x1bW4oJ2NyZWF0ZWRfYXQnLCBmdW5jdGlvbigkZXhwbGFuYXRpb24pewogICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRlKCdZLW0tZCBnOmkgYScsIHN0cnRvdGltZSgkZXhwbGFuYXRpb24tPmNyZWF0ZWRfYXQpKTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAtPmVkaXRDb2x1bW4oJ2NyZWF0ZWRfYnknLCBmdW5jdGlvbigkZXhwbGFuYXRpb24pewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkZXhwbGFuYXRpb24tPmNyZWF0b3IgPyAkZXhwbGFuYXRpb24tPmNyZWF0b3ItPm5hbWUgOiAnJzsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAtPmVkaXRDb2x1bW4oJ3VwZGF0ZWRfYXQnLCBmdW5jdGlvbigkZXhwbGFuYXRpb24pewogICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRlKCdZLW0tZCBnOmkgYScsIHN0cnRvdGltZSgkZXhwbGFuYXRpb24tPnVwZGF0ZWRfYXQpKTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAtPmVkaXRDb2x1bW4oJ3VwZGF0ZWRfYnknLCBmdW5jdGlvbigkZXhwbGFuYXRpb24pewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkZXhwbGFuYXRpb24tPmVkaXRvciA/ICRleHBsYW5hdGlvbi0+ZWRpdG9yLT5uYW1lIDogJyc7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLT5yYXdDb2x1bW5zKFsnYWN0aW9ucyddKQogICAgICAgICAgICAgICAgLT5tYWtlKHRydWUpOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gdmlldygncG1zLmJhY2tlbmQucGFnZXMucmVxdWlzaXRpb25FeHBsYW5hdGlvbnMuaW5kZXgnLFsKICAgICAgICAgICAgICAgICd0aXRsZScgPT4gIlJlcXVpc2l0aW9uIEV4cGxhbmF0aW9ucyIsCiAgICAgICAgICAgICAgICAnaGVhZGVyQ29sdW1ucycgPT4gJHRoaXMtPmhlYWRlckNvbHVtbnMoKSwKICAgICAgICAgICAgXSk7CiAgICAgICAgfWNhdGNoIChcVGhyb3dhYmxlICR0aCl7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+YmFja1dpdGhFcnJvcigkdGgtPmdldE1lc3NhZ2UoKSk7CiAgICAgICAgfQogICAgfQoKCiAgICAvKioKICAgICAqIFNob3cgdGhlIGZvcm0gZm9yIGNyZWF0aW5nIGEgbmV3IHJlc291cmNlLgogICAgICoKICAgICAqIEByZXR1cm4gXElsbHVtaW5hdGVcSHR0cFxSZXNwb25zZQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gY3JlYXRlKCkKICAgIHsKICAgICAgICByZXR1cm4gdmlldygncG1zLmJhY2tlbmQucGFnZXMucmVxdWlzaXRpb25FeHBsYW5hdGlvbnMuY3JlYXRlJywgWwogICAgICAgICAgICAndGl0bGUnID0+ICJOZXcgRXhwbGFuYXRpb24iCiAgICAgICAgXSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBTdG9yZSBhIG5ld2x5IGNyZWF0ZWQgcmVzb3VyY2UgaW4gc3RvcmFnZS4KICAgICAqCiAgICAgKiBAcGFyYW0gIFxJbGx1bWluYXRlXEh0dHBcUmVxdWVzdCAgJHJlcXVlc3QKICAgICAqIEByZXR1cm4gXElsbHVtaW5hdGVcSHR0cFxSZXNwb25zZQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gc3RvcmUoUmVxdWVzdCAkcmVxdWVzdCkKICAgIHsKICAgICAgICAkdGhpcy0+dmFsaWRhdGUoJHJlcXVlc3QsIFsKICAgICAgICAgICAgJ2V4cGxhbmF0aW9uJyA9PiBbJ3JlcXVpcmVkJywgJ3VuaXF1ZTpyZXF1aXNpdGlvbl9leHBsYW5hdGlvbnMnXSwKICAgICAgICBdKTsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgUmVxdWlzaXRpb25FeHBsYW5hdGlvbjo6Y3JlYXRlKFsKICAgICAgICAgICAgICAgICdleHBsYW5hdGlvbicgPT4gJHJlcXVlc3QtPmV4cGxhbmF0aW9uCiAgICAgICAgICAgIF0pOwoKICAgICAgICAgICAgcmV0dXJuICR0aGlzLT51cmxSZWRpcmVjdEJhY2soJ1JlcXVpc2l0aW9uIEV4cGxhbmF0aW9uIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5JywgJ3Btcy9yZXF1aXNpdGlvbi1leHBsYW5hdGlvbnMnLCAnc3VjY2VzcycpOwogICAgICAgIH1jYXRjaCAoXFRocm93YWJsZSAkdGgpewogICAgICAgICAgICByZXR1cm4gJHRoaXMtPmJhY2tXaXRoRXJyb3IoJHRoLT5nZXRNZXNzYWdlKCkpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIERpc3BsYXkgdGhlIHNwZWNpZmllZCByZXNvdXJjZS4KICAgICAqCiAgICAgKiBAcGFyYW0gIGludCAgJGlkCiAgICAgKiBAcmV0dXJuIFxJbGx1bWluYXRlXEh0dHBcUmVzcG9uc2UKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIHNob3coKQogICAgewogICAgICAgIAogICAgfQoKICAgIC8qKgogICAgICogU2hvdyB0aGUgZm9ybSBmb3IgZWRpdGluZyB0aGUgc3BlY2lmaWVkIHJlc291cmNlLgogICAgICoKICAgICAqIEBwYXJhbSAgaW50ICAkaWQKICAgICAqIEByZXR1cm4gXElsbHVtaW5hdGVcSHR0cFxSZXNwb25zZQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZWRpdCgkaWQpCiAgICB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICByZXR1cm4gdmlldygncG1zLmJhY2tlbmQucGFnZXMucmVxdWlzaXRpb25FeHBsYW5hdGlvbnMuZWRpdCcsIFsKICAgICAgICAgICAgICAgICd0aXRsZScgPT4gJ0VkaXQgUmVxdWlzaXRpb24gRXhwbGFuYXRpb24nLAogICAgICAgICAgICAgICAgJ2V4cGxhbmF0aW9uJyA9PiBSZXF1aXNpdGlvbkV4cGxhbmF0aW9uOjpmaW5kT3JGYWlsKCRpZCksCiAgICAgICAgICAgIF0pOwogICAgICAgIH1jYXRjaCAoXFRocm93YWJsZSAkdGgpewogICAgICAgICAgICByZXR1cm4gJHRoaXMtPmJhY2tXaXRoRXJyb3IoJHRoLT5nZXRNZXNzYWdlKCkpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFVwZGF0ZSB0aGUgc3BlY2lmaWVkIHJlc291cmNlIGluIHN0b3JhZ2UuCiAgICAgKgogICAgICogQHBhcmFtICBcSWxsdW1pbmF0ZVxIdHRwXFJlcXVlc3QgICRyZXF1ZXN0CiAgICAgKiBAcGFyYW0gIGludCAgJGlkCiAgICAgKiBAcmV0dXJuIFxJbGx1bWluYXRlXEh0dHBcUmVzcG9uc2UKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIHVwZGF0ZShSZXF1ZXN0ICRyZXF1ZXN0LCAkaWQpCiAgICB7CiAgICAgICAgJHRoaXMtPnZhbGlkYXRlKCRyZXF1ZXN0LCBbCiAgICAgICAgICAgICdleHBsYW5hdGlvbicgPT4gWydyZXF1aXJlZCcsICd1bmlxdWU6cmVxdWlzaXRpb25fZXhwbGFuYXRpb25zLGV4cGxhbmF0aW9uLCcuJGlkXSwKICAgICAgICBdKTsKICAgICAgICB0cnkgewogICAgICAgICAgICBSZXF1aXNpdGlvbkV4cGxhbmF0aW9uOjp1cGRhdGVPckNyZWF0ZShbCiAgICAgICAgICAgICAgICAnaWQnID0+ICRpZCwKICAgICAgICAgICAgXSwgWwogICAgICAgICAgICAgICAgJ2V4cGxhbmF0aW9uJyA9PiAkcmVxdWVzdC0+ZXhwbGFuYXRpb24KICAgICAgICAgICAgXSk7CgogICAgICAgICAgICByZXR1cm4gJHRoaXMtPnVybFJlZGlyZWN0QmFjaygnUmVxdWlzaXRpb24gRXhwbGFuYXRpb24gdXBkYXRlZCBzdWNjZXNzZnVsbHknLCAncG1zL3JlcXVpc2l0aW9uLWV4cGxhbmF0aW9ucycsICdzdWNjZXNzJyk7CiAgICAgICAgfWNhdGNoIChcVGhyb3dhYmxlICR0aCl7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+YmFja1dpdGhFcnJvcigkdGgtPmdldE1lc3NhZ2UoKSk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogUmVtb3ZlIHRoZSBzcGVjaWZpZWQgcmVzb3VyY2UgZnJvbSBzdG9yYWdlLgogICAgICoKICAgICAqIEBwYXJhbSAgaW50ICAkaWQKICAgICAqIEByZXR1cm4gXElsbHVtaW5hdGVcSHR0cFxSZXNwb25zZQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZGVzdHJveSgkaWQpCiAgICB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgUmVxdWlzaXRpb25FeHBsYW5hdGlvbjo6ZmluZE9yRmFpbCgkaWQpLT5kZWxldGUoKTsKICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlKCktPmpzb24oWwogICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnID0+IHRydWUsCiAgICAgICAgICAgICAgICAnbWVzc2FnZScgPT4gJ1JlcXVpc2l0aW9uIEV4cGxhbmF0aW9uIFN1Y2Nlc3NmdWxseSBEZWxldGVkLicKICAgICAgICAgICAgXSk7CiAgICAgICAgfWNhdGNoIChcVGhyb3dhYmxlICR0aCl7CiAgICAgICAgICAgIHJldHVybiByZXNwb25zZSgpLT5qc29uKFsKICAgICAgICAgICAgICAgICdzdWNjZXNzJyA9PiB0cnVlLAogICAgICAgICAgICAgICAgJ21lc3NhZ2UnID0+ICR0aC0+Z2V0TWVzc2FnZSgpCiAgICAgICAgICAgIF0pOwogICAgICAgIH0KICAgIH0KfQo=