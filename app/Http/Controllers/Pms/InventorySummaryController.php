<?php
bolt_decrypt( __FILE__ , 'erPPN3'); return 0;
##!!!##