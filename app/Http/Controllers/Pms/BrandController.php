<?php
bolt_decrypt( __FILE__ , '4njU5L'); return 0;
##!!!##