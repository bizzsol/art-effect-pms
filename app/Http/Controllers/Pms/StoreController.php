<?php
bolt_decrypt( __FILE__ , 'vy6FBK'); return 0;
##!!!##