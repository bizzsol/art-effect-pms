<?php
bolt_decrypt( __FILE__ , '4mOeBK'); return 0;
##!!!##