<?php
bolt_decrypt( __FILE__ , 'PCegGZ'); return 0;
##!!!##

namespace App\Http\Controllers\Pms;

use App\Http\Controllers\Controller;

use App\Models\PmsModels\Product;
use App\Models\Hr\Department;
use App\Models\PmsModels\Requisition;
use App\Models\PmsModels\RequisitionDelivery;
use App\Models\PmsModels\RequisitionDeliveryItem;
use App\Models\PmsModels\RequisitionItem;
use App\Models\PmsModels\RequisitionTracking;
use App\Models\PmsModels\RequisitionType;
use App\Models\PmsModels\Suppliers;
use App\Models\PmsModels\Warehouses;
use App\Models\PmsModels\Notification;
use App\Models\PmsModels\Category;
use App\Models\PmsModels\ProductUnitConversion;
use App\Models\PmsModels\Purchase\PurchaseOrder;
use App\Models\PmsModels\InventoryModels\InventorySummary;
use App\Models\PmsModels\InventoryModels\InventoryDetails;
use App\Models\PmsModels\InventoryModels\InventoryLogs;
use App\Models\FixedAssets\FixedAssetBatch;
use App\Models\FixedAssets\FixedAssetBatchItem;
use App\Models\PmsModels\Accounts\CostCentre;
use App\Models\Hr\Accounts\Unit;
use \App\User;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\View;
use Illuminate\Support\Facades\DB, Illuminate\Support\Facades\Validator, Illuminate\Support\Str;
use Yajra\DataTables\Facades\DataTables;

class StoreController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function headerColumns($value = '')
    {
        $row = array(
            ['SL', 'SL'],
            ['reference_no', 'reference_no', 'text-center'],
            ['requisition_date', 'requisition_date', 'text-center'],
            ['department', 'department', 'text-center'],
            ['product_category', 'product_category', 'text-center'],
            ['approved_by', 'approved_by', 'text-left'],
            ['requisition_by', 'requisition_by', 'text-left'],
            ['delivery', 'delivery', 'text-left'],
            ['actions', 'actions', 'text-center', 'width:15%']
        );
        return $row;
    }

    public function index($deliveryStatus = null)
    {
        try {
            $headerColumns = $this->headerColumns();

            $title = (!empty($deliveryStatus) ? 'Complete' : 'Pending') . ' Delivery list for Requisition';
            $deliveryStatus = $deliveryStatus ?? 'partial-delivered';

            $requisitions = Requisition::with('relUsersList', 'requisitionItems', 'relRequisitionDelivery', 'relRequisitionDelivery.relDeliveryItems')
                ->when(isset(auth()->user()->employee->as_unit_id), function ($query) {
                    return $query->where('hr_unit_id', auth()->user()->employee->as_unit_id);
                })
                ->where(['status' => 1, 'delivery_status' => $deliveryStatus])
                ->when(!datatableOrdering(), function ($query) {
                    return $query->orderby('reference_no', 'desc');
                });

            $options = [
                'confirm-delivery' => auth()->user()->hasPermissionTo('confirm-delivery'),
                'send-to-rfp' => auth()->user()->hasPermissionTo('send-to-rfp')
            ];

            if (request()->ajax()) {
                return Datatables::of($requisitions)
                    ->addIndexColumn()
                    ->editColumn('reference_no', function ($values) {
                        return '<a href="javascript:void(0)" onclick="openModal(' . $values->id . ')"  class="btn btn-link">' . $values->reference_no . '</a>';
                    })
                    ->editColumn('requisition_date', function ($values) {
                        return date('Y-m-d', strtotime($values->requisition_date));
                    })
                    ->filterColumn('requisition_date', function ($query, $keyword) {
                        $query->where('requisition_date', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('requisition_date', function ($query, $order) {
                        return $query->orderBy('requisition_date', $order);
                    })
                    ->addColumn('department', function ($values) {
                        return isset($values->relUsersList->employee->department->hr_department_name) ? $values->relUsersList->employee->department->hr_department_name : '';
                    })
                    ->filterColumn('department', function ($query, $keyword) {
                        return $query->whereHas('relUsersList.employee.department', function ($query) use ($keyword) {
                            $query->where('hr_department_name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('department', function ($query, $order) {
                        return pleaseSortMe($query, $order, User::select('hr_department.hr_department_name')
                            ->join('hr_as_basic_info', 'hr_as_basic_info.associate_id', '=', 'users.associate_id')
                            ->join('hr_department', 'hr_department.hr_department_id', '=', 'hr_as_basic_info.as_department_id')
                            ->whereColumn('users.id', 'requisitions.author_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('product_category', function ($values) {
                        return isset($values->items[0]->product->category->category->name) ? $values->items[0]->product->category->category->name : '';
                    })
                    ->filterColumn('product_category', function ($query, $keyword) {
                        return $query->whereHas('items.product.category.category', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('product_category', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequisitionItem::select('main_category.name')
                            ->join('products', 'products.id', '=', 'requisition_items.product_id')
                            ->join('categories as sub_category', 'sub_category.id', '=', 'products.category_id')
                            ->join('categories as main_category', 'main_category.id', '=', 'sub_category.parent_id')
                            ->whereColumn('requisition_items.requisition_id', 'requisitions.id')
                            ->take(1)
                        );
                    })
                    ->addColumn('approved_by', function ($values) {
                        return isset($values->approvedBy->name) ? $values->approvedBy->name : '';
                    })
                    ->filterColumn('approved_by', function ($query, $keyword) {
                        return $query->whereHas('approvedBy', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('approved_by', function ($query, $order) {
                        return pleaseSortMe($query, $order, User::select('users.name')
                            ->whereColumn('users.id', 'requisitions.approved_by')
                            ->take(1)
                        );
                    })
                    ->addColumn('requisition_by', function ($values) {
                        return isset($values->relUsersList->name) ? $values->relUsersList->name : '';
                    })
                    ->filterColumn('requisition_by', function ($query, $keyword) {
                        return $query->whereHas('relUsersList', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('requisition_by', function ($query, $order) {
                        return pleaseSortMe($query, $order, User::select('users.name')
                            ->whereColumn('users.id', 'requisitions.author_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('delivery', function ($values) {
                        return '<a href="' . route('pms.store-manage.requisition-delivered-list', $values->id) . '" data-toggle="tooltip" title="Click here to view details" target="_blank"> Total (' . count($values->relRequisitionDelivery) . ')</a>';
                    })
                    ->addColumn('actions', function ($values) use ($options) {
                        $actions = '';


                        if ($values->delivery_status == 'delivered') {
                            $actions .= '<span>Full Delivered</span>';
                        } else {
                            $actions .= '<div class="btn-group"><button class="btn dropdown-toggle" data-toggle="dropdown"><span id="statusName' . $values->id . '">Action</span></button><ul class="dropdown-menu">';

                            if ($options['confirm-delivery']) {
                                if (requisitionHasStock($values->id)) {
                                    $actions .= '<li><a href="' . route('pms.store-manage.store-requisition.delivery', $values->id) . '" title="Click Here To Confirm Delivery">Confirm Delivery</a></li>';
                                }
                            }

                            if ($options['send-to-rfp']) {
                                if ($values->request_status == NULL && $values->is_po_generate == 'no') {
                                    $actions .= '<li id="hideFromList' . $values->id . '"><a class="sendToPurchaseDepartment" onclick="sendToPurchaseDepartment($(this))" data-src="' . route('pms.store-manage.change.action.to.rfp') . '" data-id="' . $values->id . '"  title="Send To Procurement ">Send To Procurement</a></li>';
                                }
                            }


                            $actions .= '<li><a href="javascript:void(0)" title="Tracking Requisition" class="trackingRequistionStatus" onclick="trackRequisitionProgress($(this))" data-id="' . $values->id . '"><i class="la la-map"></i>&nbsp;Track Progress</a></li>';


                            $actions .= '</ul></div>';
                        }
                        return $actions;
                    })
                    ->rawColumns(['reference_no', 'delivery', 'actions'])
                    ->make(true);
            }

            return view('pms.backend.pages.requisition-delivery.index', compact('title', 'headerColumns'));

        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    public function storeHeaderColumns($value = '')
    {
        $row = array(
            ['SL', 'SL'],
            ['unit', 'unit', 'text-center'],
            ['reference_no', 'reference_no', 'text-center'],
            ['requisition_date', 'requisition_date', 'text-center'],
            ['department', 'department', 'text-center'],
            ['product_category', 'product_category', 'text-center'],
            ['saleable', 'saleable', 'text-center'],
            ['approved_by', 'approved_by', 'text-left'],
            ['actions', 'actions', 'text-center', 'width:15%']
        );
        return $row;
    }

    public function storeRequisitionListView()
    {
        try {
            $title = 'Store Requisition List View';
            $userUnits = auth()->user()->priorities->pluck('hr_unit_id')->toArray();
            $userDepartments = auth()->user()->priorities->pluck('hr_department_id')->toArray();
            $userSections = auth()->user()->priorities->pluck('hr_section_id')->toArray();

            $from = request()->has('from') ? request()->get('from') : null;
            $to = request()->has('to') ? request()->get('to') : null;
            $category_id = request()->has('category_id') ? request()->get('category_id') : 0;
            $department_id = request()->has('department_id') ? request()->get('department_id') : 0;
            $approved_by = request()->has('approved_by') ? request()->get('approved_by') : 0;

            $categories = Category::doesntHave('category')
                ->get();

            $departments = Department::whereIn('hr_department_id', $userDepartments)->get();

            $approvers = Requisition::when(isset(auth()->user()->employee->as_unit_id), function ($query) {
                return $query->whereHas('relUsersList.employee', function ($query) {
                    return $query->where('as_unit_id', auth()->user()->employee->as_unit_id);
                });
            })
                ->groupBy('approved_by')
                ->where(['status' => 1, 'delivery_status' => 'processing', 'is_send_to_rfp' => 'no', 'is_finance_approval' => 'approved'])
                ->whereNotIn('delivery_status', ['delivered', 'partial-delivered'])
                ->get();

            $data = [
                'title' => $title,
                'approvers' => $approvers,
                'departments' => $departments,
                'from' => $from,
                'to' => $to,
                'category_id' => $category_id,
                'approved_by' => $approved_by,
                'department_id' => $department_id,
                'categories' => $categories,
                'headerColumns' => $this->storeHeaderColumns(),
            ];

            $requisitions = Requisition::with([
                'unit',
                'items.product.category.category',
                'relUsersList',
                'relUsersList.employee.unit',
                'approvedBy'
            ])
                ->whereHas('relUsersList.employee', function ($query) use ($userUnits, $userDepartments, $userSections) {
                    return $query->whereIn('as_unit_id', $userUnits);
                    // ->whereIn('as_department_id', $userDepartments);
                })
                ->when(strtotime($from) > 0, function ($query) use ($from) {
                    return $query->whereDate('requisition_date', '>=', $from);
                })
                ->when(strtotime($to) > 0, function ($query) use ($to) {
                    return $query->whereDate('requisition_date', '<=', $to);
                })
                ->when($department_id > 0, function ($query) use ($department_id) {
                    return $query->whereHas('relUsersList.employee', function ($query) use ($department_id) {
                        return $query->where('as_department_id', $department_id);
                    });
                })
                ->when($approved_by > 0, function ($query) use ($approved_by) {
                    return $query->where('approved_by', $approved_by);
                })
                ->when($category_id > 0, function ($query) use ($category_id) {
                    return $query->whereHas('items.product.category.category', function ($query) use ($category_id) {
                        return $query->where('id', $category_id);
                    });
                })
                ->where([
                    'status' => 1,
                    'delivery_status' => 'processing',
                    'is_send_to_rfp' => 'no',
                    'is_finance_approval' => 'approved'
                ])
                ->whereNotIn('delivery_status', [
                    'delivered',
                    'partial-delivered'
                ])
                ->when(!datatableOrdering(), function ($query) {
                    return $query->orderby('id', 'desc');
                });

            $options = [
                'confirm-delivery' => auth()->user()->hasPermissionTo('confirm-delivery'),
                'send-to-rfp' => auth()->user()->hasPermissionTo('send-to-rfp')
            ];

            if (request()->ajax()) {
                return Datatables::of($requisitions)
                    ->addIndexColumn()
                    ->editColumn('reference_no', function ($values) {
                        return '<a href="javascript:void(0)" onclick="openModal(' . $values->id . ')"  class="btn btn-link">' . $values->reference_no . '</a>';
                    })
                    ->editColumn('requisition_date', function ($values) {
                        return date('Y-m-d', strtotime($values->requisition_date));
                    })
                    ->filterColumn('requisition_date', function ($query, $keyword) {
                        $query->where('requisition_date', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('requisition_date', function ($query, $order) {
                        return $query->orderBy('requisition_date', $order);
                    })
                    ->addColumn('unit', function ($values) {
                        return $values->Unit->hr_unit_short_name;
                    })
                    ->filterColumn('unit', function ($query, $keyword) {
                        return $query->whereHas('unit', function ($query) use ($keyword) {
                            $query->where('hr_unit_short_name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('unit', function ($query, $order) {
                        return pleaseSortMe($query, $order, Unit::select('hr_unit.hr_unit_short_name')
                            ->whereColumn('hr_unit.hr_unit_id', 'requisitions.hr_unit_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('department', function ($values) {
                        return isset($values->relUsersList->employee->department->hr_department_name) ? $values->relUsersList->employee->department->hr_department_name : '';
                    })
                    ->filterColumn('department', function ($query, $keyword) {
                        return $query->whereHas('relUsersList.employee.department', function ($query) use ($keyword) {
                            $query->where('hr_department_name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('department', function ($query, $order) {
                        return pleaseSortMe($query, $order, User::select('hr_department.hr_department_name')
                            ->join('hr_as_basic_info', 'hr_as_basic_info.associate_id', '=', 'users.associate_id')
                            ->join('hr_department', 'hr_department.hr_department_id', '=', 'hr_as_basic_info.as_department_id')
                            ->whereColumn('users.id', 'requisitions.author_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('product_category', function ($requisition) {
                        return isset($requisition->items[0]->product->category->category->name) ? $requisition->items[0]->product->category->category->name : '';
                    })
                    ->filterColumn('product_category', function ($query, $keyword) {
                        return $query->whereHas('items.product.category.category', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('product_category', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequisitionItem::select('main_category.name')
                            ->join('products', 'products.id', '=', 'requisition_items.product_id')
                            ->join('categories as sub_category', 'sub_category.id', '=', 'products.category_id')
                            ->join('categories as main_category', 'main_category.id', '=', 'sub_category.parent_id')
                            ->whereColumn('requisition_items.requisition_id', 'requisitions.id')
                            ->take(1)
                        );
                    })
                    ->addColumn('approved_by', function ($values) {
                        return isset($values->approvedBy->name) ? $values->approvedBy->name : '';
                    })
                    ->filterColumn('approved_by', function ($query, $keyword) {
                        return $query->whereHas('approvedBy', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('approved_by', function ($query, $order) {
                        return pleaseSortMe($query, $order, User::select('users.name')
                            ->whereColumn('users.id', 'requisitions.approved_by')
                            ->take(1)
                        );
                    })
                    ->addColumn('actions', function ($values) use ($options) {
                        $actions = '';

                        $actions .= '<div class="btn-group"><button class="btn dropdown-toggle" data-toggle="dropdown"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-three-dots-vertical" viewBox="0 0 16 16"><path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"/></svg></button><ul class="dropdown-menu">';

                        $actions .= '<li><a href="javascript:void(0)" title="Tracking Requisition" class="trackRequisitionProgress" onclick="trackingRequistionStatus(' . $values->id . ')" ><i class="la la-map"></i>&nbsp;Track Progress</a></li>';

                        if ($options['confirm-delivery'] && $values->items[0]->product->category->is_service == 0) {
                            if (requisitionHasStock($values->id)) {
                                $actions .= '<li><a href="' . route('pms.store-manage.store-requisition.delivery', $values->id) . '" title="Click Here To Confirm Delivery">Confirm Delivery</a></li>';
                            }
                        }

                        if ($options['send-to-rfp']) {
                            if ($values->is_send_to_rfp == 'no') {
                                $actions .= '<li><a class="sendToPurchaseDepartment" onclick="sendToPurchaseDepartment($(this))" data-src="' . route('pms.store-manage.send.to.purchase.department') . '" data-id="' . $values->id . '" title="Send To Procurement">Send To Procurement</a></li>';
                            }
                        }

                        $actions .= '</ul></div>';
                        return $actions;
                    })
                    ->rawColumns(['reference_no', 'actions'])
                    ->make(true);
            }

            return view('pms.backend.pages.store.store-requisition-list-view', $data);

        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Rfp list view search.
     * Search between from and to date and also user can search by employee
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */

    public function storeRequisitionListViewSearch(Request $request)
    {
        $response = [];

        $fromDate = date('Y-m-d', strtotime($request->from_date));
        $toDate = date('Y-m-d', strtotime($request->to_date));

        $requisitionBy = $request->requisition_by;
        $requisitionStatus = $request->requisition_status;

        $requistionData = Requisition::when(isset(auth()->user()->employee->as_unit_id), function ($query) {
            return $query->where('hr_unit_id', auth()->user()->employee->as_unit_id);
        })
            ->whereDate('requisition_date', '>=', $fromDate)
            ->whereDate('requisition_date', '<=', $toDate)
            ->when($requisitionBy, function ($query) use ($requisitionBy) {
                return $query->where('author_id', $requisitionBy);
            })
            ->where(['status' => $requisitionStatus, 'delivery_status' => 'processing', 'is_send_to_rfp' => 'no'])
            ->paginate(30);

        try {
            if (count($requistionData) > 0) {
                $body = View::make('pms.backend.pages.store.store-search-result-view',
                    ['requistionData' => $requistionData]);
                $contents = $body->render();

                $response['result'] = 'success';
                $response['body'] = $contents;
            } else {
                $response['result'] = 'error';
                $response['message'] = 'Data not found.!!';
            }

        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }

        return $response;
    }

    /**
     * Rfp list view search.
     * Search between from and to date and also user can search by employee
     */
    public function departmentWiseEmployee(Request $request)
    {
        $response = [];
        $response['data'] = '';

        $departmentId = $request->department_id;

        $employee = Requisition::whereHas('relUsersList.employee', function ($query) use ($departmentId) {
            return $query->where('as_department_id', $departmentId)
                ->where('as_unit_id', auth()->user()->employee->as_unit_id);
        })
            ->groupBy('author_id')
            ->where(['status' => 1, 'delivery_status' => 'processing', 'is_send_to_rfp' => 'no'])
            ->whereNotIn('delivery_status', ['delivered', 'partial-delivered'])
            ->get();

        $response['data'] .= '<option value="">--Select One--</option>';
        if (!empty($employee)) {
            foreach ($employee as $values) {
                $response['data'] .= '<option value="' . $values->relUsersList->id . '">' . $values->relUsersList->name . '</option>';
            }
        } else {
            $response['data'] .= "<option value=''>No Employee Found!!</option>";
        }

        $response['result'] = 'success';

        return $response;
    }

    public function rfpRequisitionList(Request $request)
    {
        try {

            $title = 'RFP Requisition List';
            // $from = request()->has('from') ? request()->get('from') : date('Y-m-01');
            // $to = request()->has('to') ? request()->get('to') : date('Y-m-t');
            $from = request()->has('from') ? request()->get('from') : null;
            $to = request()->has('to') ? request()->get('to') : null;
            $category_id = request()->has('category_id') ? request()->get('category_id') : 0;
            $department_id = request()->has('department_id') ? request()->get('department_id') : 0;
            $approved_by = request()->has('approved_by') ? request()->get('approved_by') : 0;

            $categories = Category::doesntHave('category')->get();

            $departments = Requisition::when(isset(auth()->user()->employee->as_unit_id), function ($query) {
                return $query->whereIn('hr_department.hr_unit_id', auth()->user()->priorities->pluck('hr_unit_id')->toArray());
            })
                ->join('users', 'users.id', '=', 'requisitions.author_id')
                ->join('hr_as_basic_info', 'hr_as_basic_info.associate_id', '=', 'users.associate_id')
                ->join('hr_department', 'hr_department.hr_department_id', '=', 'hr_as_basic_info.as_department_id')
                ->groupBy('hr_department.hr_department_id')
                ->where(['status' => 1, 'is_send_to_rfp' => 'yes'])
                ->whereNotIn('delivery_status', ['delivered', 'partial-delivered'])
                ->get(['hr_department.hr_department_id', 'hr_department.hr_department_name']);

            $approvers = Requisition::with('approvedBy')
                ->when(isset(auth()->user()->employee->as_unit_id), function ($query) {
                    return $query->whereHas('relUsersList.employee', function ($query) {
                        return $query->whereIn('as_unit_id', auth()->user()->priorities->pluck('hr_unit_id')->toArray());
                    });
                })
                ->groupBy('approved_by')
                ->where(['status' => 1, 'is_send_to_rfp' => 'yes'])
                ->whereNotIn('delivery_status', ['delivered', 'partial-delivered'])
                ->get();

            $requisitions = Requisition::with([
                'items.product.category.category',
                'items.product.relInventoryDetails',
                'relUsersList.employee.unit',
                'relUsersList.employee.department',
                'approvedBy',
                'Unit'
            ])
                ->when(isset(auth()->user()->employee->as_unit_id), function ($query) {
                    return $query->whereIn('hr_unit_id', auth()->user()->priorities->pluck('hr_unit_id')->toArray());
                })
                ->when(strtotime($from) > 0, function ($query) use ($from) {
                    return $query->whereDate('requisition_date', '>=', $from);
                })
                ->when(strtotime($to) > 0, function ($query) use ($to) {
                    return $query->whereDate('requisition_date', '<=', $to);
                })
                ->when($department_id > 0, function ($query) use ($department_id) {
                    return $query->whereHas('relUsersList.employee', function ($query) use ($department_id) {
                        return $query->where('as_department_id', $department_id);
                    });
                })
                ->when($approved_by > 0, function ($query) use ($approved_by) {
                    return $query->where('approved_by', $approved_by);
                })
                ->when($category_id > 0, function ($query) use ($category_id) {
                    return $query->whereHas('items.product.category.category', function ($query) use ($category_id) {
                        return $query->where('id', $category_id);
                    });
                })
                ->where([
                    'status' => 1,
                    'is_send_to_rfp' => 'yes'
                ])
                ->whereNotIn('delivery_status', [
                    'delivered',
                    'partial-delivered'
                ])
                ->when(!datatableOrdering(), function ($query) {
                    return $query->orderby('reference_no', 'desc');
                });

            $options = [
                'confirm-delivery' => auth()->user()->hasPermissionTo('confirm-delivery'),
            ];

            if (request()->ajax()) {
                return Datatables::of($requisitions)
                    ->addIndexColumn()
                    ->editColumn('reference_no', function ($values) {
                        return '<a href="javascript:void(0)" onclick="openModal(' . $values->id . ')"  class="btn btn-link">' . $values->reference_no . '</a>';
                    })
                    ->editColumn('requisition_date', function ($values) {
                        return date('Y-m-d', strtotime($values->requisition_date));
                    })
                    ->filterColumn('requisition_date', function ($query, $keyword) {
                        $query->where('requisition_date', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('requisition_date', function ($query, $order) {
                        return $query->orderBy('requisition_date', $order);
                    })
                    ->addColumn('unit', function ($values) {
                        return $values->Unit->hr_unit_name;
                    })
                    ->filterColumn('unit', function ($query, $keyword) {
                        return $query->whereHas('Unit', function ($query) use ($keyword) {
                            $query->where('hr_unit_name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('unit', function ($query, $order) {
                        return pleaseSortMe($query, $order, Unit::select('hr_unit.hr_unit_name')
                            ->whereColumn('hr_unit.hr_unit_id', 'requisitions.hr_unit_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('department', function ($values) {
                        return isset($values->relUsersList->employee->department->hr_department_name) ? $values->relUsersList->employee->department->hr_department_name : '';
                    })
                    ->filterColumn('department', function ($query, $keyword) {
                        return $query->whereHas('relUsersList.employee.department', function ($query) use ($keyword) {
                            $query->where('hr_department_name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('department', function ($query, $order) {
                        return pleaseSortMe($query, $order, User::select('hr_department.hr_department_name')
                            ->join('hr_as_basic_info', 'hr_as_basic_info.associate_id', '=', 'users.associate_id')
                            ->join('hr_department', 'hr_department.hr_department_id', '=', 'hr_as_basic_info.as_department_id')
                            ->whereColumn('users.id', 'requisitions.author_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('product_category', function ($requisition) {
                        return isset($requisition->items[0]->product->category->category->name) ? $requisition->items[0]->product->category->category->name : '';
                    })
                    ->filterColumn('product_category', function ($query, $keyword) {
                        return $query->whereHas('items.product.category.category', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('product_category', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequisitionItem::select('main_category.name')
                            ->join('products', 'products.id', '=', 'requisition_items.product_id')
                            ->join('categories as sub_category', 'sub_category.id', '=', 'products.category_id')
                            ->join('categories as main_category', 'main_category.id', '=', 'sub_category.parent_id')
                            ->whereColumn('requisition_items.requisition_id', 'requisitions.id')
                            ->take(1)
                        );
                    })
                    ->addColumn('approved_by', function ($values) {
                        return isset($values->approvedBy->name) ? $values->approvedBy->name : '';
                    })
                    ->filterColumn('approved_by', function ($query, $keyword) {
                        return $query->whereHas('approvedBy', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('approved_by', function ($query, $order) {
                        return pleaseSortMe($query, $order, User::select('users.name')
                            ->whereColumn('users.id', 'requisitions.approved_by')
                            ->take(1)
                        );
                    })
                    ->addColumn('actions', function ($values) use ($options) {

                        $actions = '';
                        $actions .= '<div class="btn-group"><button class="btn dropdown-toggle" data-toggle="dropdown"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-three-dots-vertical" viewBox="0 0 16 16"><path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"/></svg></button><ul class="dropdown-menu">';

                        $stockQty = 0;
                        if (isset($values->items)) {
                            foreach ($values->items as $item) {
                                $stockQty += isset($item->product->relInventoryDetails) ? collect($item->product->relInventoryDetails)
                                    ->when(isset(auth()->user()->employee->as_unit_id), function ($query) {
                                        return $query->where('hr_unit_id', auth()->user()->employee->as_unit_id);
                                    })->sum('qty') : 0;
                            }
                        }

                        if ($stockQty > 0 && requisitionHasStock($values->id)) {
                            if ($options['confirm-delivery'] && $values->items[0]->product->category->is_service == 0) {

                                $nonNotified = $values->items()->doesntHave('notification')->count();

                                if ($nonNotified > 0) {
                                    $actions .= '<li><a href="' . route('pms.store-manage.requisition.items.list', $values->id) . '">Show Notification</a></li>';
                                }

                                $actions .= '<li><a href="' . route('pms.store-manage.store-requisition.delivery', $values->id) . '" title="Click Here To Confirm Delivery">Confirm Delivery</a></li>';
                            }
                        }

                        $actions .= '<li><a href="javascript:void(0)" title="Track Progress"
                class="trackingRequistionStatus" onclick="trackingRequistionStatus($(this))" data-id="' . $values->id . '"><i class="la la-map"></i>Track Progress</a></li>';

                        $actions .= '<li><a target="__blank" href="' . route('pms.requisition.history', $values->id) . '"><i class="la la-history" title="Requisition History"></i>Requisition History</a></li</a></li>';

                        $actions .= '</ul></div>';
                        return $actions;
                    })
                    ->rawColumns(['reference_no', 'actions'])
                    ->make(true);
            }

            $data = [
                'title' => $title,
                'approvers' => $approvers,
                'departments' => $departments,
                'from' => $from,
                'to' => $to,
                'category_id' => $category_id,
                'approved_by' => $approved_by,
                'department_id' => $department_id,
                'categories' => $categories,
                'headerColumns' => $this->storeHeaderColumns(),
            ];

            return view('pms.backend.pages.store.store-rfp-requisition-list', $data);

        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Rfp list view serarch.
     * Search between from and to date and also user can search by employee
     */
    public function rfpDepartmentWiseEmployee(Request $request)
    {
        $response = [];
        $response['data'] = '';

        $departmentId = $request->department_id;

        $employee = Requisition::whereHas('relUsersList.employee', function ($query) use ($departmentId) {
            return $query->where('as_department_id', $departmentId)
                ->when(isset(auth()->user()->employee->as_unit_id), function ($query) {
                    return $query->where('hr_unit_id', auth()->user()->employee->as_unit_id);
                });
        })
            ->where(['status' => 1, 'is_send_to_rfp' => 'yes'])
            ->whereNotIn('delivery_status', ['delivered', 'partial-delivered'])
            ->groupBy('author_id')
            ->get();

        $response['data'] .= '<option value="">--Select One--</option>';
        if (!empty($employee)) {
            foreach ($employee as $values) {
                $response['data'] .= '<option value="' . $values->relUsersList->id . '">' . $values->relUsersList->name . '</option>';
            }
        } else {
            $response['data'] .= "<option value=''>No Employee Found!!</option>";
        }

        $response['result'] = 'success';

        return $response;
    }

    /**
     * Rfp list view serarch.
     * Search between from and to date and also user can search by employee
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */

    public function rfpRequisitionSearch(Request $request)
    {
        $response = [];
        $fromDate = date('Y-m-d', strtotime($request->from_date));
        $toDate = date('Y-m-d', strtotime($request->to_date));
        $departmentId = $request->department_id;

        $requisitionBy = $request->requisition_by;
        $requisitionStatus = $request->requisition_status;

        $requisition = Requisition::whereDate('requisition_date', '>=', $fromDate)
            ->whereDate('requisition_date', '<=', $toDate)
            ->when($requisitionBy, function ($query) use ($requisitionBy) {
                return $query->where('author_id', $requisitionBy);
            })
            ->when($departmentId, function ($query) use ($departmentId) {
                return $query->whereHas('relUsersList.employee', function ($query) use ($departmentId) {
                    return $query->where('as_department_id', $departmentId);
                });
            })
            ->when(isset(auth()->user()->employee->as_unit_id), function ($query) {
                return $query->where('hr_unit_id', auth()->user()->employee->as_unit_id);
            })
            ->where(['status' => $requisitionStatus, 'is_send_to_rfp' => 'yes'])
            ->whereNotIn('delivery_status', ['delivered', 'partial-delivered'])
            ->paginate(30);


        try {
            if (isset($requisition[0])) {
                $body = View::make('pms.backend.pages.store.rfp-search-result-view',
                    ['requisition' => $requisition]);
                $contents = $body->render();

                $response['result'] = 'success';
                $response['body'] = $contents;
            } else {
                $response['result'] = 'error';
                $response['message'] = 'Data not found.!!';
            }

        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }

        return $response;
    }

    /**
     * Requistion item list.
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */

    public function requisitionItemsList($id)
    {

        $title = "Requisition Items List";

        //Find requistion
        $requisition = Requisition::where('id', $id)
            ->when(isset(auth()->user()->employee->as_unit_id), function ($query) {
                return $query->where('hr_unit_id', auth()->user()->employee->as_unit_id);
            })
            ->where(['status' => 1, 'is_send_to_rfp' => 'yes'])
            ->whereNotIn('delivery_status', ['delivered', 'partial-delivered'])
            ->first();

        try {

            return view('pms.backend.pages.store.requisition-items-list', compact('title', 'requisition'));

        } catch (\Throwable $th) {

            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Send notification to users.
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */

    public function sendNotificationToUsers(Request $request)
    {

        //Validate inpute request
        $this->validate($request, [
            'items_id' => ['required'],
        ]);

        //Db transaction start
        DB::beginTransaction();

        try {

            //Crate instance of items_id
            foreach ($request->items_id as $key => $item) {
                //Check requisition item
                $requisitionItem = RequisitionItem::where('requisition_id', $request->requisition_id)
                    ->where('id', $item)
                    ->first();

                if (!empty($requisitionItem)) {
                    $notification = new Notification();
                    $notification->user_id = $requisitionItem->requisition->author_id;
                    $notification->requisition_item_id = $item;

                    $message = '<span class="notification-links" data-src="' . route('pms.requisition.list.view.show', $requisitionItem->requisition->id) . '?view" data-title="Requisition Details">Reference No:' . $requisitionItem->requisition->reference_no . ' And Item Name: ' . $requisitionItem->product->name . '. Please Collect Your product from store</span>';

                    $notification->messages = $message;

                    $notification->status = 'requisition';
                    $notification->save();

                } else {
                    return $this->backWithWarning('No data found');
                }
            }
            DB::commit();
            return $this->backWithSuccess('Successfully send to users');

        } catch (\Throwable $th) {
            DB::rollback();
            return $this->backWithError($th->getMessage());
        }

        return back();
    }

    /**
     * Store inventory compare data.
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */

    public function storeInventoryCompare($id)
    {
        try {
            $title = 'Store Inventory Compare';
            $requisition = Requisition::with([
                'unit',
                'relRequisitionDelivery.relDeliveryItems',
                'items.product.relInventoryDetails',
                'items.product.category.category',
                'items.product.productUnit',
                'items.product.attributes.attributeOption.attribute',
                'items.attributes.attributeOption.attribute',
                'relUsersList.employee.unit',
                'relUsersList.employee.department',
                'relUsersList.employee.location',
                'projectTask.subDeliverable.deliverable.project',
                'attachments'
            ])
                // ->when(isset(auth()->user()->employee->as_unit_id), function($query){
                //     return $query->where('hr_unit_id',auth()->user()->employee->as_unit_id);
                // })
                ->findOrFail($id);

            $requisition['requisition_qty'] = $requisition->items->sum('qty');

            $requisition->relRequisitionDelivery->each(function ($item, $i) {
                $item['delivery_qty'] = $item->relDeliveryItems->sum('delivery_qty');
            });
            $requisition['total_delivery_qty'] = $requisition->relRequisitionDelivery->sum('delivery_qty');

            return view('pms.backend.pages.store.store-inventory-compare', compact('title', 'requisition'));

        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Confirm delivery data return to store inventory compare delivery .
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */

    public function confirmDelivery($id)
    {

        //Make prefix for confirm delivery.
        $userUnits = auth()->user()->priorities->pluck('hr_unit_id')->toArray();
        $userDepartments = auth()->user()->priorities->pluck('hr_department_id')->toArray();
        $userSections = auth()->user()->priorities->pluck('hr_section_id')->toArray();

        //Find requistion.
        $requisition = Requisition::with([
            'relUsersList',
            'Unit'
        ])
            ->whereHas('relUsersList.employee', function ($query) use ($userUnits, $userDepartments, $userSections) {
                return $query->whereIn('as_unit_id', $userUnits)
                    ->whereIn('as_department_id', $userDepartments);
            })
            ->findOrFail($id);

        $prefix = 'CD-' . date('y', strtotime(date('Y-m-d'))) . '-' . $requisition->Unit->hr_unit_short_name . '-';
        $refNo = uniqueCode(14, $prefix, 'requisition_deliveries', 'id');

        //Make title.
        $title = 'Store Inventory Confirm Delivery to: ' . $requisition->relUsersList->name;

        try {

            //Requistion items collect using requistionId.
            $requisitionItems = RequisitionItem::with([
                'product.attributes.attributeOption.attribute',
                'attributes.attributeOption.attribute',
                'product.relInventorySummary',
                'product.relInventoryDetails.relWarehouse',
                'product.category',
                'product.productUnit',
                'product.productUnitConversions.productUnit',
                'product.productUnitConversions.conversionUnit',

                'product.inventoryLogs.stockIn.relGoodsReceivedItems.attributes.attributeOption.attribute'
            ])
                ->whereHas('requisition', function ($query) {
                    return $query->whereIn('delivery_status', ['processing', 'partial-delivered', 'rfp']);
                })
                ->whereHas('requisition.relUsersList.employee', function ($query) use ($userUnits, $userDepartments, $userSections) {
                    return $query->whereIn('as_unit_id', $userUnits)
                        ->whereIn('as_department_id', $userDepartments);
                })
                ->where('requisition_id', $id)
                ->get();

            $warehouses = Warehouses::whereIn('id', auth()->user()->relUsersWarehouse->pluck('id')->toArray())->get();
            $stocks = [];
            foreach ($requisitionItems as $key => $item) {
                $stocks[$item->id] = [];
                if (isset($item->product->id)) {
                    $attributes = $item->attributes->pluck('attribute_option_id')->toArray();
                    if ($item->qty != $item->delivery_qty) {
                        $stocks[$item->id] = InventoryLogs::whereIn('warehouse_id', auth()->user()->relUsersWarehouse->pluck('id')->toArray())
                            ->whereHas('stockIn.relGoodsReceivedItems.attributes', function ($query) use ($attributes) {
                                $query->select(\DB::raw('count(distinct id)'))
                                    ->whereIn('attribute_option_id', $attributes);
                            }, '=', count($attributes))
                            ->where([
                                'category_id' => $item->product->category_id,
                                'product_id' => $item->product_id,
                                'hr_unit_id' => (isset(auth()->user()->employee->as_unit_id) ? auth()->user()->employee->as_unit_id : 0)
                            ])
                            ->groupBy('warehouse_id')
                            ->get([
                                DB::raw('sum(`available`) as available'), 'warehouse_id'
                            ])
                            ->pluck('available', 'warehouse_id')
                            ->toArray();
                    }
                }
            }


            $costCentres = getCostCentres(true);

            return view('pms.backend.pages.store.store-inventory-delivery', compact('title', 'requisitionItems', 'requisition', 'refNo', 'costCentres', 'warehouses', 'stocks'));

        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Confirm delivery submit/store.
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\RedirectResponse
     */

    public function confirmDeliverySubmit(Request $request)
    {
        $this->validate($request, [
            'delivery_qty' => "required|array|min:1",
            'delivery_date' => 'required|date',
            'reference_no' => "required|unique:requisition_deliveries|max:100",
        ]);
        $countDeliveryItems = count(array_filter($request->delivery_qty, function ($deliveryQty) {
            return !is_null($deliveryQty);
        }));

        if ($countDeliveryItems <= 0) {
            return $this->backWithWarning('Please select at least one product for delivery.');
        }

        $requisitionItems = RequisitionItem::with([
            'product.productUnitConversions',
            'attributes'
        ])
            ->where('requisition_id', $request->requisition_id)
            ->get();
        if (isset($request->delivery_qty) && is_array($request->delivery_qty)) {
            foreach ($request->delivery_qty as $uid => $qty) {
                if ($qty > 0) {
                    $product = $requisitionItems->where('uid', $uid)->first()->product;
                    if (!($product->is_fixed_asset == 1 || $product->is_cwip == 1) && $request->cost_centre_id[$uid] <= 0) {
                        return $this->backWithWarning('Please select Cost Centre for Item Delivery');
                    }
                }
            }
        }


        DB::beginTransaction();
        try {
            $ledgerItems = [];

            $requisitionId = $request->requisition_id;
            $requisition = Requisition::findOrFail($requisitionId);

            if ($requisition->purchaseOrders->count() > 0) {
                $cost_centre_id = $requisition->purchaseOrders[0]->purchaseOrder->cost_centre_id;
            } else {
                $cost_centre_id = CostCentre::where([
                    'hr_unit_id' => $requisition->relUsersList->employee->as_unit_id,
                    'hr_department_id' => $requisition->relUsersList->employee->as_department_id,
                ])->first()->id;
            }

            $project = isset($requisition->projectTask->id);
            $purchaseOrder = PurchaseOrder::whereHas('purchaseOrderRequisitions', function ($query) use ($requisitionId) {
                return $query->where('requisition_id', $requisitionId);
            })
                ->first();
            $requisitionDelivery = $this->storeRequisitionDelivery($request);

            $itemTotalDeliveryQty = 0;
            $totalDeliveryQty = 0;
            // $requisitionDeliveryItemInput = [];
            foreach ($request->delivery_qty as $uid => $deliveryQty) {
                $requisitionItem = $requisitionItems->where('uid', $uid)->first();
                $product = $requisitionItem->product;
                $deliveryQty = $deliveryQty / ($requisitionItem->product->productUnitConversions->where('conversion_unit_id', $request->product_unit_id[$uid])->count() > 0 ? $requisitionItem->product->productUnitConversions->where('conversion_unit_id', $request->product_unit_id[$uid])->first()->conversion_rate : 1);

                if ($deliveryQty > 0 && isset($request->warehouse_id[$uid]) && $request->warehouse_id[$uid] > 0) {

                    if (isset($request->cost_centre_id[$uid])) {
                        $cost_centre_id = $request->cost_centre_id[$uid];
                    }

                    //Prepare pre-requisite data.
                    $attributes = $requisitionItem->attributes->pluck('attribute_option_id')->toArray();
                    $stock = InventoryLogs::whereHas('stockIn.relGoodsReceivedItems.attributes', function ($query) use ($attributes) {
                        $query->select(\DB::raw('count(distinct id)'))
                            ->whereIn('attribute_option_id', $attributes);
                    }, '=', count($attributes))
                        ->where([
                            'warehouse_id' => $request->warehouse_id[$uid],
                            'category_id' => $requisitionItem->product->category_id,
                            'product_id' => $requisitionItem->product_id,
                            'hr_unit_id' => (isset(auth()->user()->employee->as_unit_id) ? auth()->user()->employee->as_unit_id : 0)
                        ])
                        ->sum('available');
                    $left = floor(($requisitionItem->purchase_qty > 0 ? $requisitionItem->qc_qty : $requisitionItem->qty) < $stock ? ($requisitionItem->purchase_qty > 0 ? $requisitionItem->qc_qty : $requisitionItem->qty) - $requisitionItem->delivery_qty : $stock);

                    if ($deliveryQty > $left) {
                        return $this->backWithWarning('Delivery qty is greater then requisition qty. Please Adjust It for product ' . $product->name);
                    }

                    //(Current delivery qty + previous delivery qty)
                    $itemTotalDeliveryQty = ($deliveryQty + $requisitionItem->delivery_qty);
                    $totalDeliveryQty += $itemTotalDeliveryQty;

                    // Update item wise total delivery Qty (current delivery qty + previous delivery qty)
                    $requisitionItem->update(['delivery_qty' => $itemTotalDeliveryQty]);

                    $unitPrice = 0;
                    $stockPrice = \App\Models\PmsModels\Grn\GoodsReceivedItemStockIn::whereHas('relPurchaseOrder.purchaseOrderRequisitions', function ($query) use ($requisitionItem) {
                        return $query->where('requisition_id', $requisitionItem->requisition_id);
                    })
                        ->whereHas('relGoodsReceivedItems', function ($query) use ($requisitionItem) {
                            return $query->where('product_id', $requisitionItem->product_id)
                                ->where('uid', $requisitionItem->uid);
                        })
                        ->first();
                    if (!isset($stockPrice->unit_amount)) {
                        $stockPrice = \App\Models\PmsModels\Grn\GoodsReceivedItemStockIn::whereHas('relGoodsReceivedItems', function ($query) use ($requisitionItem) {
                            return $query->where('product_id', $requisitionItem->product_id)
                                ->where('uid', $requisitionItem->uid);
                        })
                            ->whereHas('inventoryLogs', function ($query) {
                                return $query->where('available', '>', 0);
                            })
                            ->first();
                    }

                    if (isset($stockPrice->unit_amount)) {
                        $unitPrice = $stockPrice->unit_amount;
                    }

                    $requisitionDeliveryItem = RequisitionDeliveryItem::create([
                        'requisition_delivery_id' => $requisitionDelivery->id,
                        'warehouse_id' => $request->warehouse_id[$uid],
                        'uid' => $requisitionItem->uid,
                        'product_id' => $requisitionItem->product_id,
                        'delivery_qty' => $deliveryQty,
                    ]);

                    if ($requisitionItem->product->is_fixed_asset == 0 && $requisitionItem->product->is_cwip == 0 && !$project && $deliveryQty > 0) {
                        $accountDefaultSettings = accountDefaultSettings('json');
                        $ledgerItems[] = [
                            'cost_centre_id' => $cost_centre_id,
                            'chart_of_account_id' => (isset($requisitionItem->product->cogs_account_id) && $requisitionItem->product->cogs_account_id > 0 ? $requisitionItem->product->cogs_account_id : $accountDefaultSettings['cogs_account']),
                            'debit' => $deliveryQty * $unitPrice,
                            'credit' => 0,
                            'narration' => "Product Delivery :: COGS Debit",
                            'type' => 'product-delivery',
                            'source' => $requisitionDeliveryItem->id
                        ];
                        $ledgerItems[] = [
                            'cost_centre_id' => $cost_centre_id,
                            'chart_of_account_id' => (isset($requisitionItem->product->inventory_account_id) && $requisitionItem->product->inventory_account_id > 0 ? $requisitionItem->product->inventory_account_id : $accountDefaultSettings['inventory_account']),
                            'debit' => 0,
                            'credit' => $deliveryQty * $unitPrice,
                            'narration' => "Product Delivery :: Inventory Credit",
                            'type' => 'product-delivery',
                            'source' => $requisitionDeliveryItem->id
                        ];
                    }

                    // check delivery qty and warehouse wise product qty
                    if (!$this->updateInventoryAndLog($request, $product, $deliveryQty, $request->warehouse_id[$uid], $requisitionItem, $requisitionDelivery->reference_no)) {
                        return $this->backWithWarning('Delivery qty may not grater than store qty for product ' . $product->name);
                    }

                    $requisitionModel = Requisition::findOrFail($requisitionId);

                    $totalRequisitionQty = $requisitionModel->requisitionItems->sum('qc_qty');

                    $requisitionId = $request->requisition_id;
                    $requisition = Requisition::findOrFail($requisitionId);
                    requisitionTrackingHistory($requisition->id, 'confirm_delivery', 'Delivery Confirmed by Store');

                    //Requisition tracking
                    RequisitionTracking::storeRequisitionTracking($requisitionModel->id, 'delivered');

                    //Update requisition status (current delivery qty + previous delivery qty)
                    if ($totalDeliveryQty == $totalRequisitionQty) {
                        $requisitionModel->update(['delivery_status' => 'delivered']);
                    } else {
                        $requisitionModel->update(['delivery_status' => 'partial-delivered']);
                    }

                    //Notification

                    if (!empty($requisitionItem)) {
                        $notification = new Notification();
                        $notification->user_id = $requisitionItem->requisition->author_id;
                        $notification->requisition_item_id = $requisitionItem->id;

                        $message = '<span class="notification-links" data-src="' . route('pms.requisition.list.view.show', $requisitionItem->requisition->id) . '?view" data-title="Requisition Details">Reference No:' . $requisitionItem->requisition->reference_no . ' And Item Name: ' . $requisitionItem->product->name . '. Successfully delivered your product.Please acknowledge it</span>';

                        $notification->messages = $message;

                        $notification->save();
                    }
                }
            }

            if (isset($ledgerItems[0])) {
                $entry = saveLedgerEntries(5, date('Y-m-d H:i:s', strtotime($request->delivery_date . ' ' . date('H:i:s'))), 1, '', 'Product Delivery', $ledgerItems, (isset($purchaseOrder->relQuotation->exchange_rate_id) ? $purchaseOrder->relQuotation->exchange_rate_id : getExchangeRates(systemCurrency()->id)), 0, 0, 0, getCostCentreCompany($cost_centre_id), false, 'json');
                if (isset($entry['entry']->id) && isset($purchaseOrder->relQuotation->supplier_id)) {
                    savePOEntry($entry, $purchaseOrder->relQuotation->supplier_id, $purchaseOrder->id, 'product-delivery');
                }
            }

            DB::commit();

            return $this->backWithSuccess('Requisition Delivery Successfully');

        } catch (Throwable $th) {
            DB::rollback();
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Store Requistion delivery data.
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */

    public function storeRequisitionDelivery($request)
    {
        return RequisitionDelivery::create([
            'requisition_id' => $request->requisition_id,
            'reference_no' => $request->reference_no,
            'delivery_date' => date('Y-m-d', strtotime($request->delivery_date)),
            'note' => $request->note,
            'delivery_by' => Auth::user()->id,
            'created_by' => Auth::user()->id,
        ]);
    }

    /**
     * Update inventory & log.
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */

    public function updateInventoryAndLog($request, $product, $deliveryQty, $warehouseId, $requisitionItem, $reference_no = '')
    {
        try {
            //Update Inventory Summary
            $InventorySummary = InventorySummary::where([
                'product_id' => $product->id
            ])->first();

            $totalPrice = (($InventorySummary->qty) - ($deliveryQty)) * $InventorySummary->unit_price;
            $InventorySummary->qty = ($InventorySummary->qty) - ($deliveryQty);
            $InventorySummary->total_price = $totalPrice;
            $InventorySummary->status = 'active';
            $InventorySummary->save();

            //Update Inventory details
            $InventoryDetails = InventoryDetails::where([
                'category_id' => $product->category_id,
                'product_id' => $product->id,
                'warehouse_id' => $warehouseId,
                'hr_unit_id' => auth()->user()->employee->as_unit_id,
            ])->first();

            if ($deliveryQty > (isset($InventoryDetails->qty) ? intval($InventoryDetails->qty) : 0)) {
                return false;
            }

            $totalPriceOfInventoryDetails = (($InventoryDetails->qty) - ($deliveryQty)) * $InventoryDetails->unit_price;
            $InventoryDetails->qty = $InventoryDetails->qty - $deliveryQty;
            $InventoryDetails->total_price = $totalPriceOfInventoryDetails;
            $InventoryDetails->status = 'active';
            $InventoryDetails->save();

            $attributes = $requisitionItem->attributes->pluck('attribute_option_id')->toArray();
            $stocks = InventoryLogs::whereHas('stockIn.relGoodsReceivedItems.attributes', function ($query) use ($attributes) {
                $query->select(\DB::raw('count(distinct id)'))
                    ->whereIn('attribute_option_id', $attributes);
            }, '=', count($attributes))
                ->where([
                    'warehouse_id' => $warehouseId,
                    'category_id' => $product->category_id,
                    'product_id' => $product->id,
                    'hr_unit_id' => isset(auth()->user()->employee->as_unit_id) ? auth()->user()->employee->as_unit_id : null
                ])
                ->where('available', '>', 0)
                ->get();

            $availableQty = $deliveryQty;
            $logs = [];
            if (isset($stocks[0])) {
                foreach ($stocks as $stock) {
                    if ($availableQty > 0) {
                        $this_qty = ($stock->available > $availableQty ? $availableQty : $stock->available);
                        $availableQty -= $this_qty;

                        $stock->available = ($stock->available - $this_qty);
                        $stock->save();

                        $logs[] = [
                            'category_id' => $product->category_id,
                            'product_id' => $product->id,
                            'warehouse_id' => $warehouseId,
                            'hr_unit_id' => isset(auth()->user()->employee->as_unit_id) ? auth()->user()->employee->as_unit_id : null,
                            'unit_price' => $InventoryDetails->unit_price,
                            'qty' => $this_qty,
                            'available' => 0,
                            'total_price' => ($this_qty * $InventoryDetails->unit_price),
                            'reference' => $reference_no,
                            'status' => 'active',
                            'type' => 'out',
                        ];
                    }
                }
            }
            if (isset($logs[0])) {
                InventoryLogs::insert($logs);
            }

            return true;
        } catch (Throwable $th) {
            return false;
        }
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function purchaseDepartment(Request $request)
    {
        $response = [];
        $requisition = Requisition::where([
            'id' => $request->requisition_id,
            'status' => 1,
            'approved_id' => 1,
            'is_send_to_rfp' => 'no',
            'delivery_status' => 'processing'
        ])->first();

        //Start transaction
        DB::beginTransaction();
        try {
            if (isset($requisition->id)) {
                $requisition->is_send_to_rfp = 'yes';
                $requisition->store_message = $request->message;
                $requisition->save();

                requisitionTrackingHistory($requisition->id, 'sent_to_purchase', 'Requisition send to purchase department');


                RequisitionTracking::storeRequisitionTracking($requisition->id, 'processing');

                $message = '<span class="notification-links" data-src="' . route('pms.store-manage.store.inventory.compare', $requisition->id) . '" data-title="Requisition Details">Reference No:' . $requisition->reference_no . '.Watting for Procurement/Purchase.</span>';
                CreateOrUpdateNotification($message, 'unread', '', getManagerInfo('Purchase-Department', null, true), 'sent-to-purchase');

                DB::commit();
                $response['result'] = 'success';
                $response['message'] = 'Successfully Send to Purchase Department!!';
            } else {
                $response['result'] = 'error';
                $response['message'] = 'Data not found.!!';
            }

        } catch (\Throwable $th) {
            DB::rollback();
            $response['result'] = 'error';
            $response['message'] = $th->getMessage();
        }

        return $response;
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function changeActionToRFP(Request $request)
    {
        $response = [];

        $requisition = Requisition::where(['id' => $request->requisition_id, 'status' => 1, 'approved_id' => 1, 'is_send_to_rfp' => 'no', 'delivery_status' => 'partial-delivered'])->first();

        //Start transaction
        DB::beginTransaction();

        try {
            if (count((array)$requisition) > 0) {
                $requisition->is_send_to_rfp = 'yes';
                $requisition->request_status = 'rfp';
                $requisition->save();
                //Tracking
                RequisitionTracking::storeRequisitionTracking($requisition->id, 'processing');

                $message = '<span class="notification-links" data-src="' . route('pms.store-manage.store.inventory.compare', $requisition->id) . '" data-title="Requisition Details">Reference No:' . $requisition->reference_no . '.Watting for Procurement/Purchase.</span>';


                CreateOrUpdateNotification($message, 'unread', '', getManagerInfo('Purchase-Department', null, true), 'send-to-purchase');
                //Commit data
                DB::commit();

                $response['result'] = 'success';
                $response['message'] = 'Successfully Send to Purchase Department!!';
            } else {
                $response['result'] = 'error';
                $response['message'] = 'Allready generated once!!';
            }

        } catch (\Throwable $th) {
            //If process has any problem then rollback the data
            DB::rollback();
            $response['result'] = 'error';
            $response['message'] = $th->getMessage();
        }

        return $response;
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function deliveredListHeaderColumns($value = '')
    {
        return array(
            ['SL', 'SL'],
            ['unit', 'unit', 'text-center'],
            ['department', 'department', 'text-center'],
            ['requisition_date', 'requisition_date', 'text-center'],
            ['delivered_date', 'delivered_date', 'text-center'],
            ['requisition_reference', 'requisition_reference', 'text-center'],
            ['delivered_reference', 'delivered_reference', 'text-center'],
            ['category', 'category', 'text-left'],
            ['sub_category', 'sub_category', 'text-left'],
            ['product', 'product', 'text-left'],
            ['qty', 'qty', 'text-left'],
            ['options', 'options', 'text-center', 'width:15%']
        );
    }

    public function deliveredList()
    {
        try {
            $from_date = request()->has('from_date') ? request()->get('from_date') : date('Y-m-01');
            $to_date = request()->has('to_date') ? request()->get('to_date') : date('Y-m-d');

            $deliveredRequisitions = RequisitionDeliveryItem::orderBy('id', 'desc')
                ->with([
                    'relRequisitionDelivery.relRequisition.relUsersList.employee.unit',
                    'relRequisitionDelivery.relRequisition.relUsersList.employee.department',
                    'product.category.category'
                ])
                ->whereIn('warehouse_id', Auth::user()->relUsersWarehouse->pluck('id')->all())
                ->when($from_date, function ($query) use ($from_date) {
                    return $query->whereHas('relRequisitionDelivery', function ($query) use ($from_date) {
                        return $query->whereDate('delivery_date', '>=', $from_date);
                    });
                })
                ->when($to_date, function ($query) use ($to_date) {
                    return $query->whereHas('relRequisitionDelivery', function ($query) use ($to_date) {
                        return $query->whereDate('delivery_date', '<=', $to_date);
                    });
                });

            if (request()->ajax()) {
                return DataTables::of($deliveredRequisitions)
                    ->addIndexColumn()
                    ->addColumn('unit', function ($delivery) {
                        return isset($delivery->relRequisitionDelivery->relRequisition->relUsersList->employee->unit->hr_unit_short_name) ? $delivery->relRequisitionDelivery->relRequisition->relUsersList->employee->unit->hr_unit_short_name : '';
                    })
                    ->filterColumn('unit', function ($query, $keyword) {
                        return $query->whereHas('relRequisitionDelivery.relRequisition.relUsersList.employee.unit', function ($query) use ($keyword) {
                            $query->where('hr_unit_short_name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->addColumn('department', function ($delivery) {
                        return isset($delivery->relRequisitionDelivery->relRequisition->relUsersList->employee->department->hr_department_name) ? $delivery->relRequisitionDelivery->relRequisition->relUsersList->employee->department->hr_department_name : '';
                    })
                    ->filterColumn('department', function ($query, $keyword) {
                        return $query->whereHas('relRequisitionDelivery.relRequisition.relUsersList.employee.department', function ($query) use ($keyword) {
                            $query->where('hr_department_name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->addColumn('requisition_date', function ($delivery) {
                        return isset($delivery->relRequisitionDelivery->relRequisition->requisition_date) ? date('d-m-Y', strtotime($delivery->relRequisitionDelivery->relRequisition->requisition_date)) : '';
                    })
                    ->filterColumn('requisition_date', function ($query, $keyword) {
                        return $query->whereHas('relRequisitionDelivery.relRequisition', function ($query) use ($keyword) {
                            $query->where('requisition_date', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->addColumn('delivered_date', function ($delivery) {
                        return isset($delivery->relRequisitionDelivery->delivery_date) ? date('d-m-Y', strtotime($delivery->relRequisitionDelivery->delivery_date)) : '';
                    })
                    ->filterColumn('delivered_date', function ($query, $keyword) {
                        return $query->whereHas('relRequisitionDelivery', function ($query) use ($keyword) {
                            $query->where('delivery_date', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->addColumn('requisition_reference', function ($delivery) {
                        return '<a href="javascript:void(0)" data-id="' . $delivery->relRequisitionDelivery->relRequisition->id . '" class="btn btn-link m-1 rounded" onclick="requisitionview($(this))">' . (isset($delivery->relRequisitionDelivery->relRequisition->reference_no) ? $delivery->relRequisitionDelivery->relRequisition->reference_no : '') . '</a>';
                    })
                    ->filterColumn('requisition_reference', function ($query, $keyword) {
                        return $query->whereHas('relRequisitionDelivery.relRequisition', function ($query) use ($keyword) {
                            $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->addColumn('delivered_reference', function ($delivery) {
                        return isset($delivery->relRequisitionDelivery->reference_no) ? $delivery->relRequisitionDelivery->reference_no : '';
                    })
                    ->filterColumn('delivered_reference', function ($query, $keyword) {
                        return $query->whereHas('relRequisitionDelivery', function ($query) use ($keyword) {
                            $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->addColumn('delivered_reference', function ($delivery) {
                        return isset($values->product->category->category->name) ? $values->product->category->category->name : '';
                    })
                    ->filterColumn('delivered_reference', function ($query, $keyword) {
                        return $query->whereHas('relRequisitionDelivery', function ($query) use ($keyword) {
                            $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->addColumn('category', function ($delivery) {
                        return isset($delivery->product->category->category->name) ? $delivery->product->category->category->name : '';
                    })
                    ->filterColumn('category', function ($query, $keyword) {
                        return $query->whereHas('product.category.category', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->addColumn('sub_category', function ($delivery) {
                        return isset($delivery->product->category->name) ? $delivery->product->category->name : '';
                    })
                    ->filterColumn('sub_category', function ($query, $keyword) {
                        return $query->whereHas('product.category', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->addColumn('product', function ($delivery) {
                        return isset($delivery->product->name) ? $delivery->product->name : '';
                    })
                    ->filterColumn('product', function ($query, $keyword) {
                        return $query->whereHas('product', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->addColumn('qty', function ($delivery) {
                        return number_format($delivery->delivery_qty, 0);
                    })
                    ->filterColumn('qty', function ($query, $keyword) {
                        $query->where('delivery_qty', 'LIKE', '%' . $keyword . '%');
                    })
                    ->addColumn('options', function ($delivery) {
                        if ($delivery->status == 'pending' || $delivery->status == 'acknowledge') {
                            return '<div class="btn-group">
                                        <button class="btn dropdown-toggle" data-toggle="dropdown">
                                            <span id="statusName' . $delivery->id . '">' . ucfirst($delivery->status) . '</span>
                                        </button>
                                        <ul class="dropdown-menu">
                                           <li id="hideBtn' . $delivery->id . '"><a href="javascript:void(0)" onclick="storedeliveredAcknowledge($(this))" data-id="' . $delivery->id . '" title="Delivered"><i class="la la-check"></i>&nbsp;Delivered</a>
                                           </li>
                                       </ul>
                                   </div>';
                        } else {
                            return 'Delivered';
                        }
                    })
                    ->rawColumns(['requisition_reference', 'options'])
                    ->toJson();
            }

            return view('pms.backend.pages.store.store-delivered-requisition-list', [
                'title' => "Deliverd Order List",
                'from_date' => $from_date,
                'to_date' => $to_date,
                'headerColumns' => $this->deliveredListHeaderColumns(),
            ]);
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Delivered requistion acknowledge.
     *
     * @return \Illuminate\Http\Response
     */

    public function deliveredRequisitionAck(Request $request)
    {

        $response = [];
        $warehouseIds = Auth::user()->relUsersWarehouse->pluck('id')->all();

        $deliveredRequisition = RequisitionDeliveryItem::whereIn('warehouse_id', $warehouseIds)
            ->whereNotIn('status', ['delivered'])
            ->where('id', $request->id)
            ->first();

        try {

            if (isset($deliveredRequisition)) {

                $deliveredRequisition->status = 'delivered';
                $deliveredRequisition->save();

                $response['result'] = 'success';
                $response['message'] = 'Successfully Updated To Delivered.';

            } else {

                $response['result'] = 'error';
                $response['message'] = 'No Data Found';
            }

        } catch (\Throwable $th) {

            $response['result'] = 'error';
            $response['message'] = $th->getMessage();
        }

        return $response;
    }

    public function deliveredRequisitionSearch(Request $request)
    {
        $response = [];

        $fromDate = date('Y-m-d H:i:s', strtotime($request->from_date));
        $toDate = date('Y-m-d H:i:s', strtotime($request->to_date));

        $status = $request->status;

        $warehouseIds = Auth::user()->relUsersWarehouse->pluck('id')->all();

        $deliveredRequisition = RequisitionDeliveryItem::whereIn('warehouse_id', $warehouseIds)
            ->when($status, function ($query) use ($status) {
                return $query->where('status', $status);
            })
            ->when($fromDate, function ($query) use ($fromDate) {
                return $query->whereHas('relRequisitionDelivery', function ($query) use ($fromDate) {
                    return $query->whereDate('delivery_date', '>=', $fromDate);
                });
            })
            ->when($toDate, function ($query) use ($toDate) {
                return $query->whereHas('relRequisitionDelivery', function ($query) use ($toDate) {
                    return $query->whereDate('delivery_date', '<=', $toDate);
                });
            })
            ->orderBy('id', 'DESC')
            ->paginate(30);

        try {

            if (count($deliveredRequisition) > 0) {
                $body = View::make('pms.backend.pages.store.store-delivered-requisition-search',
                    ['deliveredRequisition' => $deliveredRequisition]);

                $response['result'] = 'success';
                $response['body'] = $body->render();
            } else {
                $response['result'] = 'error';
                $response['message'] = 'No Data Found!!';
            }

        } catch (\Throwable $th) {
            $response['result'] = 'error';
            $response['message'] = $th->getMessage();
        }

        return $response;
    }

    /**
     * Requisition delivery view.
     *
     * @return \Illuminate\Http\Response
     */

    public function requisitionDeliveryView(Request $request)
    {
        $response = [];
        $requisition = Requisition::with('items', 'items.product', 'items.product.category')
            ->findOrFail($request->id);
        try {

            if (isset($requisition)) {
                $body = View::make('pms.backend.pages.requisitions.show',
                    ['requisition' => $requisition]);

                $response['result'] = 'success';
                $response['body'] = $body->render();
            } else {
                $response['result'] = 'error';
                $response['message'] = 'No Data Found!!';
            }

        } catch (\Throwable $th) {
            $response['result'] = 'error';
            $response['message'] = $th->getMessage();
        }

        return $response;
    }
}

