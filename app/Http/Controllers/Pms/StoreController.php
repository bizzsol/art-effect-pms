<?php
bolt_decrypt( __FILE__ , '4OR7vf'); return 0;
##!!!##