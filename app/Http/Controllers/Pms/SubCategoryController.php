<?php
bolt_decrypt( __FILE__ , '9Uv5Tk'); return 0;
##!!!##