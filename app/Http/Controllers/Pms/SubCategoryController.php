<?php
bolt_decrypt( __FILE__ , 'DZg9Vc'); return 0;
##!!!##