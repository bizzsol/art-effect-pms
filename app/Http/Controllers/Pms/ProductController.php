<?php
bolt_decrypt( __FILE__ , 'OjuKM2'); return 0;
##!!!##