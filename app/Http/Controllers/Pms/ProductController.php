<?php
bolt_decrypt( __FILE__ , 'zF1pZ0'); return 0;
##!!!##