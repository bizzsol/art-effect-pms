<?php
bolt_decrypt( __FILE__ , 'o48ie9'); return 0;
##!!!##