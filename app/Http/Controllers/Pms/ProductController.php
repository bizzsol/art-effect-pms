<?php
bolt_decrypt( __FILE__ , 'u5wL0c'); return 0;
##!!!##

namespace App\Http\Controllers\Pms;

use App\Http\Controllers\Controller;
use App\Models\PmsModels\Brand;
use App\Models\PmsModels\Category;
use App\Models\PmsModels\CategoryAttribute;
use App\Models\PmsModels\InventoryModels\InventorySummary;
use App\Models\PmsModels\Product;
use App\Models\PmsModels\Suppliers;
use App\Models\PmsModels\ProductUnit;
use App\Models\PmsModels\Attribute;
use App\Models\PmsModels\ProductAttribute;
use App\Models\FixedAssets\DepreciationMethod;
use App\Models\PmsModels\StandardCost;
use App\Models\PmsModels\ProductStandardCost;
use App\Models\PmsModels\ProductUnitConversion;
use Illuminate\Http\Request;
use App\Imports\ProductImport;
use Maatwebsite\Excel\Facades\Excel;
use DB, DataTables;

class ProductController extends Controller
{   

    public function headerColumns($value='')
    {
        $rows =  array(
            ['SL', 'SL'],
            ['product_type', 'product_type', 'text-center'],
            ['category', 'category', 'text-center'],
            ['sub_category', 'sub_category', 'text-center'],
            ['code', 'code', 'text-center'],
            ['name', 'name', 'text-center'],
            ['attributes', 'attributes', 'text-center'],
            ['product_unit', 'product_unit', 'text-center'],
            ['unit_price', 'unit_price', 'text-center'],
            ['sales_price', 'sales_price', 'text-center'],
            ['added_by', 'added_by', 'text-center'],
            ['final_asset', 'final_asset', 'text-center'],
            ['service', 'service', 'text-center'],
            // ['sale_item', 'sale_item', 'text-center'],
            ['status', 'status', 'text-center'],
            ['actions', 'actions', 'text-center']
        );

        return $rows;
    }
    
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        try {

            $title = (request()->has('fixed-assets') ? 'Fixed Assets' : (request()->has('cwip') ? 'CWIP' : 'Products'));
            $products = Product::with([
                'productUnit', 'category.category', 'attributes.attributeOption.attribute', 'creator', 'mainAsset.attributes.attributeOption.attribute', 'subAssets.attributes.attributeOption.attribute', 'requisitionItem'
            ])
            ->has('category')
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('sku', 'desc');
            });

            $options = [
                'Purchase-Department' => auth()->user()->hasRole('Purchase-Department'),
                'product-edit' => auth()->user()->hasPermissionTo('product-edit'),
                'product-delete' => auth()->user()->hasPermissionTo('product-delete'),
                'product-standard-costs' => false,
                // 'product-standard-costs' => auth()->user()->hasPermissionTo('product-standard-costs'),
            ];
            
            if (request()->ajax()) {
                return Datatables::of($products)
                    ->addIndexColumn()
                    ->addColumn('product_type', function ($product){
                        return $product->is_fixed_asset == 1 ? 'Fixed Asset' : ($product->is_cwip == 1 ? 'CWIP' : 'Products');
                    })
                    ->addColumn('category', function($product){
                        return isset($product->category->category->name) ? $product->category->category->name : '';
                    })
                    ->filterColumn('category', function ($query, $keyword) {
                        return $query->whereHas('category.category', function ($query) use($keyword) {
                            $query->where('name', 'LIKE', '%'.$keyword.'%');
                        });
                    })
                    ->orderColumn('category', function ($query, $order) {
                        return pleaseSortMe($query, $order, Category::select('main_category.name')
                        ->join('categories as main_category', 'main_category.id', '=', 'categories.parent_id')
                        ->whereColumn('categories.id', 'products.category_id'));
                    })
                    ->addColumn('sub_category', function($product){
                        return isset($product->category->name) ? $product->category->name : '';
                    })
                    ->filterColumn('sub_category', function ($query, $keyword) {
                        return $query->whereHas('category', function ($query) use($keyword) {
                            $query->where('name', 'LIKE', '%'.$keyword.'%');
                        });
                    })
                    ->orderColumn('sub_category', function ($query, $order) {
                        return pleaseSortMe($query, $order, Category::select('name')->whereColumn('categories.id', 'products.category_id'));
                    })
                    ->addColumn('code', function($product){
                        return $product->sku;
                    })
                    ->filterColumn('code', function ($query, $keyword) {
                        return $query->where('sku', 'LIKE', '%'.$keyword.'%');
                    })
                    ->orderColumn('code', function ($query, $order) {
                        return $query->orderby('sku', $order);
                    })
                    ->addColumn('attributes', function($product){
                        return getProductAttributesFaster($product);
                    })
                    ->filterColumn('attributes', function ($query, $keyword) {
                        return $query->whereHas('attributes.attributeOption', function ($query) use($keyword) {
                            $query->where('name', 'LIKE', '%'.$keyword.'%');
                        })
                        ->orWhereHas('attributes.attributeOption.attribute', function ($query) use($keyword) {
                            $query->where('name', 'LIKE', '%'.$keyword.'%');
                        });
                    })
                    ->orderColumn('attributes', function ($query, $order) {
                        $query = pleaseSortMe($query, $order, ProductAttribute::select('attributes.code')
                            ->join('attribute_options', 'attribute_options.id', '=', 'product_attributes.attribute_option_id')
                            ->join('attributes', 'attributes.id', '=', 'attribute_options.attribute_id')
                            ->whereColumn('product_attributes.product_id', 'products.id')
                            ->take(1)
                        );

                        $query = pleaseSortMe($query, $order, ProductAttribute::select('attribute_options.name')
                            ->join('attribute_options', 'attribute_options.id', '=', 'product_attributes.attribute_option_id')
                            ->whereColumn('product_attributes.product_id', 'products.id')
                            ->take(1)
                        );

                        return $query;
                    })
                    ->addColumn('product_unit', function($product){
                        return isset($product->productUnit->unit_name)?$product->productUnit->unit_name:'';
                    })
                    ->filterColumn('product_unit', function ($query, $keyword) {
                        return $query->whereHas('productUnit', function ($query) use($keyword) {
                            $query->where('unit_name', 'LIKE', '%'.$keyword.'%');
                        });
                    })
                    ->orderColumn('product_unit', function ($query, $order) {
                        return pleaseSortMe($query, $order, ProductUnit::select('unit_name')->whereColumn('product_units.id', 'products.product_unit_id'));
                    })
                    ->editColumn('unit_price', function($product){
                        return systemMoneyFormat($product->unit_price);
                    })
                    ->addColumn('added_by', function($product){
                        return isset($product->creator->name) ? $product->creator->name : '';
                    })
                    ->filterColumn('added_by', function ($query, $keyword) {
                        return $query->whereHas('creator', function ($query) use($keyword) {
                            $query->where('name', 'LIKE', '%'.$keyword.'%');
                        });
                    })
                    ->orderColumn('added_by', function ($query, $order) {
                        return pleaseSortMe($query, $order, User::select('name')->whereColumn('users.id', 'products.created_by'));
                    })
                    ->addColumn('main_asset', function($product){
                        if(request()->has('cwip')){
                            return $product->mainAsset ? $product->mainAsset->name.' '.getProductAttributesFaster($product->mainAsset) : '';
                        }
                        return '';
                    })
                    ->filterColumn('main_asset', function ($query, $keyword) {
                        return $query->whereHas('mainAsset', function ($query) use($keyword) {
                            $query->where('name', 'LIKE', '%'.$keyword.'%');
                        });
                    })
                    ->addColumn('sub_asset', function($product){
                        if(request()->has('cwip')){
                            return $product->subAssets->pluck('name')->implode(', ');
                        }
                        return '';
                    })
                    ->filterColumn('sub_asset', function ($query, $keyword) {
                        return $query->whereHas('subAssets', function ($query) use($keyword) {
                            $query->where('name', 'LIKE', '%'.$keyword.'%');
                        });
                    })
                    ->addColumn('final_asset', function($product){
                        return $product->is_final_asset == 1 ?  '<a class="btn btn-xs btn-success">Yes</a>' : '<a class="btn btn-xs btn-dark">No</a>';
                    })
                    ->addColumn('service', function ($product){
                        return $product->is_service == 1 ? '<a class="btn btn-success btn-xs">Yes</a>' : '<a class="btn btn-dark btn-xs">No</a>';
                    })
                    // ->addColumn('sale_item', function ($product){
                    //     return $product->is_sale_item == 1 ? '<a class="btn btn-success btn-xs">Yes</a>' : '<a class="btn btn-dark btn-xs">No</a>';
                    // })
                    ->editColumn('status', function($product) use($options){
                        $status = '';
                        if($product->status == 'pending'){
                            if($options['Purchase-Department']){
                                $status .= '<a class="btn btn-xs btn-warning"  onclick="toggleProduct($(this))" data-product-id="'.$product->id.'" data-status="'. $product->status .'" style="cursor: pointer">Pending</a>';
                            }else{
                                $status .= '<a class="btn btn-xs btn-warning"  data-product-id="'.$product->id.'" data-status="'. $product->status .'" style="cursor: pointer">Pending</a>';
                            }
                        }elseif ($product->status == 'approved') {
                            if($options['Purchase-Department']){
                                $status .= '<a class="btn btn-xs btn-success"  onclick="toggleProduct($(this))" data-product-id="'.$product->id.'" data-status="'. $product->status .'" style="cursor: pointer">Approved</a>';
                            }else{
                                $status .= '<a class="btn btn-xs btn-success"  data-product-id="'.$product->id.'" data-status="'. $product->status .'" style="cursor: pointer">Approved</a>';
                            }
                        }

                        return $status;
                    })
                    ->addColumn('actions', function($product) use($options){
                        $actions = '';
                        if(!freezeProduct($product) || auth()->user()->hasRole('Super Admin')){
                            $actions .= '<a class="btn btn-xs btn-success rounded-circle ml-2" onclick="unitConversions($(this))" data-product-id="'.$product->id.'"><i class="las la-project-diagram"></i></a>';

                            $url = route('pms.product-management.product.edit', $product->id);
                            if(request()->has('fixed-assets')){
                                $url = url('pms/fixed-assets/product/edit/'.$product->id).'?fixed-assets';
                            }elseif(request()->has('cwip')){
                                $url = url('pms/cwip/product/'.$product->id.'/edit').'?cwip';
                            }

                            if($options['product-edit']){
                                $actions .= '<a class="btn btn-xs btn-info rounded-circle ml-2" href="'.$url.'"><i class="la la-edit"></i></a>';
                            }

                            if($options['product-delete'] && !freezeProduct($product)){
                                $actions .= '<a class="btn btn-xs btn-danger ml-2" onclick="deleteFromCRUD($(this))" data-src="'.route('pms.product-management.product.destroy', $product->id).'"><i class="la la-trash"></i></a>';
                            }

                            if($options['product-standard-costs']){
                                $actions .= '<a class="btn btn-xs btn-success ml-2 mt-1" href="'.url('pms/product-management/product/'.$product->id.'/standard-costs').'"><i class="la la-tasks"></i></a>';
                            }
                        }
                        
                        return $actions;
                    })
                    ->rawColumns(['status', 'actions', 'final_asset', 'service', 'sale_item'])
                    ->make(true);
            }


            return view('pms.backend.pages.products.index', [
                'title' =>$title,
                'headerColumns' => $this->headerColumns()
            ]);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }


    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        if(request()->has('get-sub-categories')){
            return categoryOptions([], request()->get('chosen'), 0, request()->has('fixed_asset'), request()->has('cwip'));
        }

        try {
            $prefix = date('ym', strtotime(date('Y-m-d')));
            $sku = uniqueCode(12, $prefix, 'products', 'id');

            $data = [
                'title' => 'New Product',
                'suppliers' => Suppliers::where('status', 'Active')->pluck('name','id')->all(),
                'brands' => Brand::pluck('name','id')->all(),
                'unit' => ProductUnit::pluck('unit_name','id')->all(),
                'sku' => $sku,
                'attributes' => Attribute::with('options')->get(),
                'accounts' => chartOfAccountsOptions([], 0, 0, []),
                'depreciationMethods' => callModuleApi('finance', 'depreciation-methods', [
                    'status' => 1
                ])['data'],
                'categoryOptions' => categoryOptions([], 0, 0, -1, -1)
            ];

            // return $data['categoryOptions'];
            
            return view('pms.backend.pages.products.create', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'name' => ['required', 'string', 'max:255'],
            'category_id' => ['required', 'string', 'max:255'],
            'product_unit_id' => ['required', 'string', 'max:255'],
            // 'tax' => ['required', 'regex:/^\d*(\.\d{1,2})?$/'],
            'vat' => ['required', 'regex:/^\d*(\.\d{1,2})?$/'],
            'unit_price' => ['required', 'regex:/^\d*(\.\d{1,2})?$/'],
            // 'sales_price' => ['required', 'regex:/^\d*(\.\d{1,2})?$/'],
            'sku' => ['required'],
            'supplier' => ['required'],
        ]);

        if(auth()->user()->hasPermissionTo('product-finance-information')){
            $this->validate($request, [
                'inventory_account_id' => ['required'],
                'inventory_adjustments_account_id' => ['required'],
            ]);
        }

        DB::beginTransaction();
        try {

            if(isset($request->parent_id) && $request->parent_id > 0){
                $parent = Product::findOrFail($request->parent_id);
                if($request->years > $parent->years){
                    return response()->json([
                        'success' => false,
                        'message' => "Sub Assets life duration (".$request->years.") cannot be grater than Main Asset life duration (".$parent->years.")",
                    ]);
                }
            }
            
            $suppliers = $request->supplier;
            $bufferInventory = $request->buffer_inventory;
            $inputs = $request->all();
            unset($inputs['_token']);
            unset($inputs['_method']);
            unset($inputs['supplier']);
            unset($inputs['buffer_inventory']);

            $inputs['is_fixed_asset'] = 0;
            $inputs['is_cwip'] = 0;
            if($request->product_type == 'fixed_asset'){
                $inputs['is_fixed_asset'] = 1;
                $inputs['is_cwip'] = 0;
            }elseif($request->product_type == 'cwip'){
                $inputs['is_fixed_asset'] = 0;
                $inputs['is_cwip'] = 1;
            }

            $product = Product::create($inputs);
            $product->suppliers()->sync($suppliers);
            if ($bufferInventory){
                $inventorySummary = new InventorySummary();
                $inventorySummary->category_id = $inputs['category_id'];
                $inventorySummary->product_id = $product->id;
                $inventorySummary->buffer_inventory = $bufferInventory;
                $inventorySummary->save();
            }

            if(isset($request->productAttributes[0])){
                foreach($request->productAttributes as $key => $attribute_id){
                    $serial_no = CategoryAttribute::where([
                        'category_id' => $request->category_id,
                        'attribute_id' => $attribute_id
                    ])->sum('serial');
                    if(isset($request->attribute_option_id[$attribute_id]) && $request->attribute_option_id[$attribute_id] != 0){
                        ProductAttribute::create([
                            'product_id' => $product->id,
                            'attribute_option_id' => $request->attribute_option_id[$attribute_id],
                            'serial_no' => $serial_no,
                        ]);
                    }
                }
            }

            $productAttributes = getProductAttributesFaster($product);

            $products = Product::with([
                'attributes.attributeOption.attribute'
            ])
            ->where([
                ['id', '!=', $product->id],
                ['name', $product->name],
            ])
            ->whereHas('attributes', function ($query) use ($product) {
                $query->whereIn('attribute_option_id', $product->attributes->pluck('attribute_option_id')->toArray());
            })
            ->get();
            $count = 0;
            if(isset($products[0])){
                foreach($products as $key => $this_product){
                    if($productAttributes == getProductAttributesFaster($this_product)){
                        return response()->json([
                            'success' => false,
                            'message' => $this_product->name.' '.getProductAttributesFaster($this_product).' already exists!',
                        ]);
                    }
                }
            }

            $message = '<span class="notification-links" data-src="'.url('pms/product-management/product/'.$product->id.'/details').'" data-title="Product Details">Product '.$product->name.' '.$productAttributes.' is waiting for approval.</span>';
                
            CreateOrUpdateNotification($message,'unread','',getManagerInfo('Purchase-Department'),'send-to-purchase-department','');


            // updateSupplierProducts(12);
            DB::commit();

            $prefix = date('ym', strtotime(date('Y-m-d')));
            $sku = uniqueCode(12, $prefix, 'products', 'id');

            if($request->where_to_go == 'save'){
                session()->flash('alert-type', 'success');
                session()->flash('message', "Product has been added successfully");
            }

            return response()->json([
                'success' => true,
                'new' => ($request->where_to_go == 'save-and-new'),
                'sku' => $sku,
                'message' => "Product has been added successfully",
            ]);

        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage(),
            ]);
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show(Product $product)
    {
        try {
            $product->src = route('pms.product-management.product.update',$product->id);
            $product->req_type = 'put';
            $suppliers = [];
            foreach ($product->suppliers as $supplier){
                $suppliers[] = $supplier->id;
            }

            $product->supplier = $suppliers;
            $product->buffer_inventory = $product->relInventorySummary?$product->relInventorySummary->buffer_inventory:null;
            $data = [
                'status' => 'success',
                'info' => $product
            ];

            return response()->json($data);
        }catch (\Throwable $th){
            $data = [
                'status' => null,
                'info' => $th->getMessage()
            ];
            return response()->json($data);
        }
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $product = Product::with([
            'attributes.attributeOption.attribute',
            'suppliers'
        ])->findOrFail($id);
        if(freezeProduct($product) && !auth()->user()->hasRole('Super Admin')){
            return $this->backWithError("Product #".$product->name." ".getProductAttributesFaster($product)." Cannot Be Edited!");
        }

        try {
            $categoryAttributes = CategoryAttribute::where('category_id', $product->category_id)->get();
            $attributes = [];
            $attributeOptions = [];
            if(isset($categoryAttributes[0])){
                foreach($categoryAttributes as $key => $categoryAttribute){
                    array_push($attributes, $categoryAttribute->attribute_id);
                    $attributeOptions = array_merge($attributeOptions, (is_array(json_decode($categoryAttribute->options, true)) ? json_decode($categoryAttribute->options, true) : []));
                }
            }

            $data = [
                'title' => 'Edit Product',
                'categories' => Category::all(),
                'suppliers' => Suppliers::where('status', 'Active')->get(['id', 'name']),
                'brands' => Brand::pluck('name','id')->all(),
                'unit' => ProductUnit::pluck('unit_name','id')->all(),
                'attributes' => Attribute::with('options')->get(),
                'product' => $product,
                'productAttributes' => $product->attributes->pluck('attributeOption.attribute_id')->toArray(),
                'existedSuppliers' => $product->suppliers->pluck('pivot.supplier_id')->toArray(),
                'categoryOptions' => categoryOptions([], $product->category_id, 0, -1, -1),
                'categoryAttributes' => $attributes,
                'categoryAttributeOptions' => $attributeOptions,

                'chartOfAccountsOptions' => chartOfAccountsOptions([], 0, 0, []),
                'depreciationMethods' => callModuleApi('finance', 'depreciation-methods', [
                    'status' => 1
                ])['data'],
                'category_type' => ($product->category->is_fixed_asset == 1 ? 'fixed_asset' : ($product->category->is_cwip == 1 ? 'cwip' : 'products')),
                'product_type' => ($product->is_fixed_asset == 1 ? 'fixed_asset' : ($product->is_cwip == 1 ? 'cwip' : 'products')),
            ];
            
            return view('pms.backend.pages.products.edit', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, Product $product)
    {
        if(!auth()->user()->hasRole('Employee')){
            $this->validate($request, [
                'sku' => ['required'],
                'name' => ['required', 'string', 'max:255'],
                'category_id' => ['required', 'string', 'max:255'],
            ]);
        }

        $this->validate($request, [
            'product_unit_id' => ['required', 'string', 'max:255'],
            'unit_price' => ['required', 'regex:/^\d*(\.\d{1,2})?$/'],
            // 'sales_price' => ['required', 'regex:/^\d*(\.\d{1,2})?$/'],
            // 'tax' => ['required', 'regex:/^\d*(\.\d{1,2})?$/'],
            'vat' => ['required', 'regex:/^\d*(\.\d{1,2})?$/'],
            'supplier' => ['required'],
        ]);

        if(auth()->user()->hasPermissionTo('product-finance-information')){
            $this->validate($request, [
                'inventory_account_id' => ['required'],
                // 'cogs_account_id' => ['required'],
                'inventory_adjustments_account_id' => ['required'],
            ]);
        }

        if(freezeProduct($product) && !auth()->user()->hasRole('Super Admin')){
            return response()->json([
                'success' => false,
                'message' => "Product #".$product->name." ".getProductAttributesFaster($product)." Cannot Be Edited!"
            ]);
        }

        DB::beginTransaction();
        try {
            if(isset($request->parent_id) && $request->parent_id > 0){
                $parent = Product::findOrFail($request->parent_id);
                if($request->years > $parent->years){
                    return response()->json([
                        'success' => false,
                        'message' => "Sub Assets life duration (".$request->years.") cannot be grater than Main Asset life duration (".$parent->years.")"
                    ]);
                }
            }

            $suppliers = $request->supplier;
            $bufferInventory = $request->buffer_inventory;
            $inputs = $request->all();
            unset($inputs['_token']);
            unset($inputs['_method']);
            unset($inputs['supplier']);
            unset($inputs['buffer_inventory']);

            $inputs['is_fixed_asset'] = 0;
            $inputs['is_cwip'] = 0;
            if($request->product_type == 'fixed_asset'){
                $inputs['is_fixed_asset'] = 1;
                $inputs['is_cwip'] = 0;
            }elseif($request->product_type == 'cwip'){
                $inputs['is_fixed_asset'] = 0;
                $inputs['is_cwip'] = 1;
            }

            $product->update($inputs);
            $product->suppliers()->sync($suppliers);
            if ($bufferInventory){
                if ($product->relInventorySummary){
                    $inventorySummary = $product->relInventorySummary;
                }else{
                    $inventorySummary = new InventorySummary();
                    $inventorySummary->category_id = $inputs['category_id'];
                    $inventorySummary->product_id = $product->id;
                }
                $inventorySummary->buffer_inventory = $bufferInventory;
                $inventorySummary->save();
            }

            ProductAttribute::where('product_id', $product->id)->delete();
            if(isset($request->productAttributes[0])){
                foreach($request->productAttributes as $key => $attribute_id){
                    $serial_no = CategoryAttribute::where([
                        'category_id' => $request->category_id,
                        'attribute_id' => $attribute_id
                    ])->sum('serial');
                    if(isset($request->attribute_option_id[$attribute_id]) && $request->attribute_option_id[$attribute_id] != 0){
                        ProductAttribute::create([
                            'product_id' => $product->id,
                            'attribute_option_id' => $request->attribute_option_id[$attribute_id],
                            'serial_no' => $serial_no,
                        ]);
                    }
                }
            }



            $products = Product::with([
                'attributes.attributeOption.attribute'
            ])
            ->where([
                ['id', '!=', $product->id],
                ['name', $product->name],
            ])
            ->whereHas('attributes', function ($query) use ($product) {
                $query->whereIn('attribute_option_id', $product->attributes->pluck('attribute_option_id')->toArray());
            })
            ->get();
            $count = 0;
            if(isset($products[0])){
                foreach($products as $key => $this_product){
                    if(getProductAttributesFaster($product) == getProductAttributesFaster($this_product)){
                        return response()->json([
                            'success' => false,
                            'message' => $this_product->name.' '.getProductAttributesFaster($this_product).' already exists!',
                        ]);
                    }
                }
            }

            // updateSupplierProducts(12);
            DB::commit();

            session()->flash('alert-type', 'success');
            session()->flash('message', 'Product has been updated successfully');
            return response()->json([
                'success' => true,
                'url' => url('pms/product-management/product')
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => true,
                'message' => $th->getMessage()
            ]);
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy(Product $product)
    {
        if(freezeProduct($product)){
            return response()->json([
                'success' => false,
                'message' => "Product #".$product->name." ".getProductAttributesFaster($product)." Cannot Be Deleted!"
            ]);
        }

        try {
            $product->suppliers()->sync([]);
            ProductAttribute::where('product_id', $product->id)->delete();
            $product->delete();
            return response()->json([
                'success' => true
            ]);
        }catch (\Throwable $th){
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    public function importProductSample(){
        $data = [
            'attributes' => Attribute::get(['id','name']),
            'category' => Category::has('category')->inRandomOrder()->first(['code']),
            'brand' => Brand::inRandomOrder()->first(['code']),
            'unit' => ProductUnit::inRandomOrder()->first(['unit_name']),
            'supplier_mobile' => Suppliers::where('status', 'Active')->inRandomOrder()->take('3')->pluck('mobile_no')->implode(',')
        ];

        return Excel::download(new \App\Exports\PMS\ProductSample($data), 'Product Upload Sample.xlsx');
    }

    public function importProduct(Request $request)
    {
        $this->validate($request, [
            'product_file'  => 'mimes:xls,xlsx'
        ]);

        //$path = $request->file('product_file')->getRealPath();

        try {

            Excel::import(new ProductImport, $request->product_file);

            return $this->backWithSuccess('Excel Data Imported successfully.');

        }catch (\Maatwebsite\Excel\Validators\ValidationException $e) {
            $failures = $e->failures();
            $error=[];
            foreach ($failures as $failure) {
                $failure->row(); 
                $failure->attribute(); 
                $error[]=$failure->errors(); 
                $failure->values(); 
            }

            return $this->backWithError($error[0][0]);
        }
    }

    public function toggle(Request $request, $id)
    {
        $product = Product::with(['attributes.attributeOption.attribute'])->findOrFail($id);
        $product->status = ($product->status == 'pending' ? 'approved' : 'pending');
        $product->save();

        if($product){
            if($product->status == 'approved'){
                $message= '<span class="notification-links" data-src="'.url('pms/product-management/product/'.$product->id.'/details').'" data-title="Product Details">Product '.$product->name.' '.getProductAttributesFaster($product).' has been approved.</span>';
                
                CreateOrUpdateNotification($message,'unread','',$product->created_by,'send-to-employee','');
            }

            return response()->json([
                'success' => true,
                'message' => "Product has been ".ucwords($product->status),
                "button" => '<a class="btn btn-xs btn-'.($product->status == 'pending' ? 'warning' : 'success').'" '.(auth()->user()->hasRole('Purchase-Department') ? 'onclick="toggleProduct($(this))"' : '').' data-product-id="'.$product->id.'" data-status="'.$product->status.'" style="cursor: pointer">'.ucwords($product->status).'</a>', 
            ]);
        }

        return response()->json([
            'success' => false,
            'message' => "Something went wrong!"
        ]);
    }

    public function details ($product_id)
    {
        $product = Product::findOrFail($product_id);
        return view('pms.backend.pages.products.details', compact('product'));
    }

    public function getSubAssets($id)
    {
        $products = Product::with([
            'attributes.attributeOption.attribute'
        ])
        ->where([
            'category_id' => $id,
            'parent_id' => 0
        ])->get();
        $response = '<option value="0" data-code="">N/A</option>';
        if(isset($products[0])){
            foreach ($products as $key => $product) {
                $subAssets = ($product->subAssets->count()+1);
                $code = ($product->sku.'-'.($subAssets < 9 ? '0' : '').$subAssets);
                $response .= '<option value="'.$product->id.'" data-code="'.$code.'" '.(request()->get('selected') == $product->id ? 'selected' : '').'>'.$product->name.' '.getProductAttributesFaster($product).'</option>';
            }
        }

        return $response;
    }

    public function getStandardCosts($id){
        $product = Product::findOrFail($id);
        return view('pms.backend.pages.products.standard-costs', [
            'title' => "Standard Costs for ".$product->name.' '.getProductAttributesFaster($product),
            'product' => $product,
            'standardCosts' => StandardCost::all()
        ]);
    }

    public function updateStandardCosts(Request $request, $id)
    {
        $request->validate([
            'amounts' => 'required',
            'amounts.*' => 'required',
        ]);

        $product = Product::findOrFail($id);
        DB::beginTransaction();
        try{    
            
            foreach($request->amounts as $standard_cost_id => $amount){
                ProductStandardCost::updateOrCreate([
                    'product_id' => $product->id,
                    'standard_cost_id' => $standard_cost_id,
                ], [
                    'amount' => $amount
                ]);
            }

            DB::commit();
            $notification = [
                'message' => "Standard costs has been updated",
                'alert-type' => 'success'
            ];
            return redirect('pms/product-management/product/'.$product->id.'/standard-costs')->with($notification);
        }catch (\Throwable $th){
            DB::rollback();
            $notification = [
                'message' => $th->getMessage(),
                'alert-type' => 'error'
            ];
            return redirect('pms/product-management/product/'.$product->id.'/standard-costs')->with($notification);
        }
    }

    public function unitConversions($id)
    {
        $product = Product::with([
            'productUnit.matrixes',
            'productUnitConversions'
        ])->findOrFail($id);
        return view('pms.backend.pages.products.unit-conversions', [
            'product' => $product,
            'units' => ProductUnit::where('id', '!=', $product->product_unit_id)->get(),
        ]);
    }

    public function updateUnitConversions(Request $request, $id)
    {
        DB::beginTransaction();
        try{
            $product = Product::with([
                'productUnit.matrixes',
                'productUnitConversions'
            ])->findOrFail($id);
            $units = ProductUnit::where('id', '!=', $product->product_unit_id)->get();
            if(isset($units[0])){
                foreach($units as $unit){
                    ProductUnitConversion::updateOrCreate([
                        'product_id' => $id,
                        'product_unit_id' => $product->product_unit_id,
                        'conversion_unit_id' => $unit->id
                    ], [
                        'conversion_rate' => isset($request->units[$unit->id]) && $request->units[$unit->id] >= 0 ? $request->units[$unit->id] : 0,
                    ]);
                }
            }

            DB::commit();
            return response()->json([
                'success' => true,
                'message' => "Unit Conversions has been updated successfully."
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }
}
