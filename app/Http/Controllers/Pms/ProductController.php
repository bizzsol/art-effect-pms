<?php
bolt_decrypt( __FILE__ , 'ozDa28'); return 0;
##!!!##