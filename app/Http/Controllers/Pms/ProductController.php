<?php
bolt_decrypt( __FILE__ , '81oMMp'); return 0;
##!!!##