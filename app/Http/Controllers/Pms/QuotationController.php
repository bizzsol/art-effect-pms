<?php
bolt_decrypt( __FILE__ , 'OGUelL'); return 0;
##!!!##