<?php
bolt_decrypt( __FILE__ , 'WNsn22'); return 0;
##!!!##