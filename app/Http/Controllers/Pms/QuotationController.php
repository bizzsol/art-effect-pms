<?php
bolt_decrypt( __FILE__ , '3WLcdE'); return 0;
##!!!##