<?php
bolt_decrypt( __FILE__ , 'VeqE4R'); return 0;
##!!!##