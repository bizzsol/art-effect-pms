<?php
bolt_decrypt( __FILE__ , 'PuFIdH'); return 0;
##!!!##

namespace App\Http\Controllers\Pms;

use App\Http\Controllers\Controller;
use App\Models\PmsModels\QuotationHistory;
use App\Models\PmsModels\QuotationHistoryItem;
use Illuminate\Http\Request;
use App\Http\Requests;
use App\Models\PmsModels\Product;
use App\Models\PmsModels\Suppliers;
use App\Models\PmsModels\Purchase\PurchaseOrder;
use App\Models\PmsModels\Purchase\PurchaseOrderMilestone;
use App\Models\PmsModels\Purchase\PurchaseOrderItem;
use App\Models\PmsModels\Rfp\RequestProposal;
use App\Models\PmsModels\Rfp\RequestProposalDetails;
use App\Models\PmsModels\Rfp\RequestProposalDefineSupplier;
use App\Models\PmsModels\Quotations;
use App\Models\PmsModels\QuotationsItems;
use App\Models\PmsModels\PaymentTerm;
use App\Models\PmsModels\SupplierPaymentTerm;
use App\Models\PmsModels\SupplierPayment;
use App\Models\PmsModels\Requisition;
use App\Models\PmsModels\RequisitionTracking;
use App\Models\PmsModels\RequisitionItem;
use App\Models\PmsModels\Rfp\RequestProposalApproval;
use App\Models\PmsModels\Purchase\PurchaseOrderRequisition;
use App\Models\PmsModels\Accounts\CurrencyType;
use App\Models\PmsModels\Accounts\ExchangeRate;
use App\Models\PmsModels\Accounts\CostCentre;
use App\Models\Hr\Unit;
use App\Models\Hr\Department;
use App\Models\PmsModels\Category;
use App\User;
use App, Illuminate\Support\Facades\DB, Barryvdh\DomPDF\Facade\Pdf, Yajra\DataTables\Facades\DataTables;
use Illuminate\Support\Facades\Auth;

class QuotationController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $title = 'Quotations List';
        try {

            $quotations = Quotations::with([
                'relRequestProposal',
                'relSuppliers',
                'exchangeRate.currency',
                'histories'
            ])
            ->whereHas('relSuppliers', function($query){
                return $query->whereNotIn('name', ignoreSuppliers());
            })
            ->when(!auth()->user()->hasAnyRole(['Purchase-Department', 'Audit', 'Billing', 'Management', 'Accounts']), function($query){
                return $query->whereHas('relRequestProposal.requestProposalRequisition.relRequisition', function($query){
                    return $query->where('assigned_user_id', auth()->user()->id);
                });
            })
            ->whereHas('relRequestProposal.requestProposalRequisition.relRequisition', function($query){
                return $query->whereIn('hr_unit_id', auth()->user()->priorities->pluck('hr_unit_id')->toArray());
            })
            ->whereNotIn('type', ['direct-purchase'])
            ->when(!datatableOrdering(), function ($query) {
                return $query->orderby('id', 'desc');
            });

            if (request()->ajax()) {
                return DataTables::of($quotations)
                    ->addIndexColumn()
                    ->addColumn('CS_number', function ($values) {
                        return '<a href="javascript:void(0)" onclick="openRequestProposalModal(' . $values->request_proposal_id . ')"  class="btn btn-link">' . $values->relRequestProposal->reference_no . '</a>';
                    })
                    ->filterColumn('CS_number', function ($query, $keyword) {
                        return $query->whereHas('relRequestProposal', function ($query) use ($keyword) {
                            $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('CS_number', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequestProposal::select('request_proposals.reference_no')
                            ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                            ->take(1)
                        );
                    })
                    ->editColumn('quotation_date', function ($values) {
                        return date('Y-m-d', strtotime($values->quotation_date));
                    })
                    ->filterColumn('quotation_date', function ($query, $keyword) {
                        $query->where('quotation_date', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('quotation_date', function ($query, $order) {
                        return $query->orderBy('quotation_date', $order);
                    })
                    ->editColumn('reference_no', function ($values) {
                        return '<a href="javascript:void(0)" onclick="openModal(' . $values->id . ')"  class="btn btn-link">' . $values->reference_no . '</a>';
                    })
                    ->addColumn('suppliers', function ($values) {
                        return $values->relSuppliers->name . ' (' . $values->relSuppliers->code . ')';
                    })
                    ->filterColumn('suppliers', function ($query, $keyword) {
                        return $query->whereHas('relSuppliers', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('suppliers', function ($query, $order) {
                        return pleaseSortMe($query, $order, Suppliers::select('suppliers.name')
                            ->whereColumn('suppliers.id', 'quotations.supplier_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('currency', function ($values) {
                        return isset($values->exchangeRate->currency->code) ? $values->exchangeRate->currency->code : '';
                    })
                    ->filterColumn('currency', function ($query, $keyword) {
                        return $query->whereHas('exchangeRate.currency', function ($query) use ($keyword) {
                            $query->where('code', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('currency', function ($query, $order) {
                        return pleaseSortMe($query, $order, ExchangeRate::select('currencies.code')
                            ->join('currencies', 'currencies.id', '=', 'exchange_rates.currency_id')
                            ->whereColumn('exchange_rates.id', 'quotations.exchange_rate_id')
                            ->take(1)
                        );
                    })
                    ->editColumn('status', function ($values) {
                        return ucfirst($values->status);
                    })
                    ->editColumn('type', function ($values) {
                        return ucfirst($values->type);
                    })

                    ->addColumn('requisitions', function ($quotation) {
                        $requisitions = '';

                        if ($quotation->relRequestProposal->requestProposalRequisition->count() > 0) {
                            foreach ($quotation->relRequestProposal->requestProposalRequisition as $key => $requisition) {
                                $requisitions .= ($key > 0 ? ', ' : '') . '<a href="javascript:void(0)" data-src="' . route('pms.requisition.list.view.show', $requisition->relRequisition->id) . '" class="text-primary requisition m-1 rounded showRequistionDetails" onclick="requistionDetails($(this))">' . $requisition->relRequisition->reference_no . '</a>';
                            }
                        }

                        return $requisitions;
                    })
                    ->filterColumn('requisitions', function ($query, $keyword) {
                        $query->whereHas('relRequestProposal.requestProposalRequisition.relRequisition', function ($query) use ($keyword) {
                            return $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('requisitions', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequestProposal::select('requisitions.reference_no')
                            ->join('requisitions', 'requisitions.id', '=', 'request_proposal_requisitions.requisition_id')
                            ->join('request_proposal_requisitions', 'request_proposal_requisitions.request_proposal_id', '=', 'request_proposals.id')
                            ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('products', function ($quotation) {
                        $products = '';
                        $sl = 0;
                        $array = [];
                        if ($quotation->relRequestProposal->requestProposalDetails->count() > 0) {
                            foreach ($quotation->relRequestProposal->requestProposalDetails as $key => $product) {
                                if (isset($product->product->id) && !in_array($product->product->id, $array)) {
                                    $sl++;
                                    $products .= ($sl > 1 ? ', ' : '') . $product->product->name . ' ' . getProductAttributesFaster($product->product);
                                    array_push($array, $product->product->id);
                                }
                            }
                        }

                        return $products;
                    })
                    ->filterColumn('products', function ($query, $keyword) {
                        return $query->where(function ($query) use ($keyword) {
                            return $query->where(function ($query) use ($keyword) {
                                return $query->whereHas('relRequestProposal.requestProposalDetails.product', function ($query) use ($keyword) {
                                    return $query->where('name', 'LIKE', '%' . $keyword . '%');
                                });
                            })
                                ->orWhere(function ($query) use ($keyword) {
                                    return $query->whereHas('relRequestProposal.requestProposalDetails.product.attributes.attributeOption', function ($query) use ($keyword) {
                                        $query->where('name', 'LIKE', '%' . $keyword . '%');
                                    })
                                        ->orWhereHas('relRequestProposal.requestProposalDetails.product.attributes.attributeOption.attribute', function ($query) use ($keyword) {
                                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                                        });
                                });
                        });

                    })
                    ->orderColumn('products', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequestProposal::select('products.name')
                            ->join('products', 'products.id', '=', 'request_proposal_details.product_id')
                            ->join('request_proposal_details', 'request_proposal_details.request_proposal_id', '=', 'request_proposals.id')
                            ->join('request_proposal_requisitions', 'request_proposal_requisitions.request_proposal_id', '=', 'request_proposals.id')
                            ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                            ->take(1)
                        );
                    })

                    ->addColumn('approvals', function ($quotation) {
                        $approvals = '';
                        if(isset($quotation->relRequestProposal->approvals[0])){
                            foreach ($quotation->relRequestProposal->approvals as $key => $approval) {
                                $approvals .= '<button class="btn btn-xs btn-' . ($approval->response == 'pending' ? 'warning' : ($approval->response == 'approved' ? 'success' : 'danger')) . '">' . $approval->user->name . ' [' . ucwords($approval->response) . ']</button>&nbsp;';
                            }
                        }
                        
                        return $approvals;
                    })
                    ->filterColumn('approvals', function ($query, $keyword) {
                        return $query->whereHas('relRequestProposal.approvals.user', function ($query) use ($keyword) {
                                return $query->where('name', 'LIKE', '%' . $keyword . '%');
                            })
                            ->orWhereHas('relRequestProposal.approvals', function ($query) use ($keyword) {
                                return $query->where('status', 'LIKE', '%' . strtolower($keyword) . '%');
                            });
                    })

                    ->addColumn('actions', function ($values) {
                        $actions = '';
                        $actions .= '<a href="javascript:void(0)" onclick="openModal(' . $values->id . ')"  class="btn btn-xs btn-info"><i class="las la-eye"></i></a>';

                        if ($values->is_approved == 'pending' && $values->type !== 'direct-purchase') {
                            $actions .= '<a href="' . route('pms.quotation.quotations.edit', $values->id) . '" class="btn btn-xs btn-success ml-1" title="Quotation Edit"><i class="las la-edit"></i></a>';
                        }

                        if ($values->histories->count() > 0) {
                            $actions .= '<a href="' . route('pms.quotation.history', $values->id) . '" class="btn btn-xs btn-warning ml-1" title="Quotation Bargain History"><i class="las la-clock"></i></a>';
                        }

                        if ($values->is_approved == "pre-processing") {
                            $actions .= '<a onclick="sendToManagement(' . $values->id . ')" class="btn btn-xs btn-success"><i class="las la-check"></i>&nbsp;Send to Management</a>';
                        }
                        return $actions;
                    })
                    ->rawColumns(['CS_number', 'reference_no', 'requisitions', 'products', 'approvals', 'actions'])
                    ->make(true);
            }

            return view('pms.backend.pages.quotation.index', [
                'title' => $title,
                'headerColumns' => $this->estimateHeaderColumns()
            ]);
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    public function estimateHeaderColumns($value = '')
    {
        return array(
            ['SL', 'SL'],
            ['CS_number', 'CS_number', 'text-center', 'width:15%'],
            ['quotation_date', 'quotation_date', 'text-center'],
            ['reference_no', 'reference_no', 'text-center'],
            ['requisitions', 'requisitions', 'text-left'],
            ['products', 'products', 'text-left'],
            ['suppliers', 'suppliers', 'text-left'],
            ['approvals', 'approvals', 'text-left'],
            ['actions', 'actions', 'text-center']
        );
    }

    public function estimate()
    {
        $title = 'Estimate List';
        try {

            $quotations = Quotations::with([
                'relSuppliers',
                'exchangeRate.currency',
                'relRequestProposal.requestProposalDetails.product.attributes.attributeOption.attribute',
                'relRequestProposal.requestProposalRequisition.relRequisition',
                'relSelfQuotationSupplierByProposalId.relSuppliers',
                'relRequestProposal.approvals.user'
            ])
            ->when(!auth()->user()->hasAnyRole(['Purchase-Department', 'Audit', 'Billing', 'Management', 'Accounts']), function($query){
                return $query->whereHas('relRequestProposal.requestProposalRequisition.relRequisition', function($query){
                    return $query->where('assigned_user_id', auth()->user()->id);
                });
            })
            ->whereHas('relRequestProposal.requestProposalRequisition.relRequisition', function($query){
                return $query->whereIn('hr_unit_id', auth()->user()->priorities->pluck('hr_unit_id')->toArray());
            })
            ->where('type', 'direct-purchase')
            ->when(!datatableOrdering(), function ($query) {
                return $query->orderby('id', 'desc');
            });

            if (request()->ajax()) {
                return DataTables::of($quotations)
                    ->addIndexColumn()
                    ->addColumn('CS_number', function ($values) {
                        return '<a href="javascript:void(0)" onclick="openRequestProposalModal(' . $values->relRequestProposal->id . ')"  class="btn btn-link">' . $values->relRequestProposal->reference_no . '</a>';
                    })
                    ->filterColumn('CS_number', function ($query, $keyword) {
                        return $query->whereHas('relRequestProposal', function ($query) use ($keyword) {
                            $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('CS_number', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequestProposal::select('request_proposals.reference_no')
                            ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                            ->take(1)
                        );
                    })
                    ->editColumn('quotation_date', function ($values) {
                        return date('Y-m-d', strtotime($values->quotation_date));
                    })
                    ->filterColumn('quotation_date', function ($query, $keyword) {
                        $query->where('quotation_date', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('quotation_date', function ($query, $order) {
                        return $query->orderBy('quotation_date', $order);
                    })
                    ->editColumn('reference_no', function ($values) {
                        return '<a href="javascript:void(0)" onclick="openModal(' . $values->id . ')"  class="btn btn-link">' . $values->reference_no . '</a>';
                    })
                    
                    ->addColumn('requisitions', function ($quotation) {
                        $requisitions = '';

                        if ($quotation->relRequestProposal->requestProposalRequisition->count() > 0) {
                            foreach ($quotation->relRequestProposal->requestProposalRequisition as $key => $requisition) {
                                $requisitions .= ($key > 0 ? ', ' : '') . '<a href="javascript:void(0)" data-src="' . route('pms.requisition.list.view.show', $requisition->relRequisition->id) . '" class="text-primary requisition m-1 rounded showRequistionDetails" onclick="requistionDetails($(this))">' . $requisition->relRequisition->reference_no . '</a>';
                            }
                        }

                        return $requisitions;
                    })
                    ->filterColumn('requisitions', function ($query, $keyword) {
                        $query->whereHas('relRequestProposal.requestProposalRequisition.relRequisition', function ($query) use ($keyword) {
                            return $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('requisitions', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequestProposal::select('requisitions.reference_no')
                            ->join('requisitions', 'requisitions.id', '=', 'request_proposal_requisitions.requisition_id')
                            ->join('request_proposal_requisitions', 'request_proposal_requisitions.request_proposal_id', '=', 'request_proposals.id')
                            ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('products', function ($quotation) {
                        $products = '';
                        $sl = 0;
                        $array = [];
                        if ($quotation->relRequestProposal->requestProposalDetails->count() > 0) {
                            foreach ($quotation->relRequestProposal->requestProposalDetails as $key => $product) {
                                if (isset($product->product->id) && !in_array($product->product->id, $array)) {
                                    $sl++;
                                    $products .= ($sl > 1 ? ', ' : '') . $product->product->name . ' ' . getProductAttributesFaster($product->product);
                                    array_push($array, $product->product->id);
                                }
                            }
                        }

                        return $products;
                    })
                    ->filterColumn('products', function ($query, $keyword) {
                        return $query->where(function ($query) use ($keyword) {
                            return $query->where(function ($query) use ($keyword) {
                                return $query->whereHas('relRequestProposal.requestProposalDetails.product', function ($query) use ($keyword) {
                                    return $query->where('name', 'LIKE', '%' . $keyword . '%');
                                });
                            })
                                ->orWhere(function ($query) use ($keyword) {
                                    return $query->whereHas('relRequestProposal.requestProposalDetails.product.attributes.attributeOption', function ($query) use ($keyword) {
                                        $query->where('name', 'LIKE', '%' . $keyword . '%');
                                    })
                                        ->orWhereHas('relRequestProposal.requestProposalDetails.product.attributes.attributeOption.attribute', function ($query) use ($keyword) {
                                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                                        });
                                });
                        });

                    })
                    ->orderColumn('products', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequestProposal::select('products.name')
                            ->join('products', 'products.id', '=', 'request_proposal_details.product_id')
                            ->join('request_proposal_details', 'request_proposal_details.request_proposal_id', '=', 'request_proposals.id')
                            ->join('request_proposal_requisitions', 'request_proposal_requisitions.request_proposal_id', '=', 'request_proposals.id')
                            ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('suppliers', function ($quotation) {
                        $suppliers = '';
                        foreach (collect($quotation->relSelfQuotationSupplierByProposalId) as $key => $supplier) {
                            if (isset($supplier->relSuppliers->id)) {
                                $suppliers .= '<button class="btn btn-xs btn-' . ($supplier->recommendation == 'yes' ? 'success' : 'primary') . '">' . $supplier->relSuppliers->name . ' (' . $supplier->relSuppliers->code . ') [' . ucwords($supplier->is_approved) . ']</button>&nbsp;';
                            }
                        }
                        return $suppliers;
                    })
                    ->filterColumn('suppliers', function ($query, $keyword) {
                        return $query->whereHas('relSelfQuotationSupplierByProposalId', function ($query) use ($keyword) {
                            return $query->whereIn('is_approved', (auth()->user()->hasRole('Purchase-Department') ? ['pending', 'pre-processing'] : ['pending', 'pre-processing']));
                        })
                            ->whereHas('relSelfQuotationSupplierByProposalId.relSuppliers', function ($query) use ($keyword) {
                                return $query->where(function ($query) use ($keyword) {
                                    return $query->where('name', 'LIKE', '%' . $keyword . '%')
                                        ->orWhere('code', 'LIKE', '%' . $keyword . '%');
                                });
                            });
                    })
                    ->orderColumn('suppliers', function ($query, $order) {
                        return pleaseSortMe($query, $order, Suppliers::select('suppliers.name')
                            ->whereColumn('suppliers.id', 'quotations.supplier_id')
                            ->take(1)
                        );
                    })

                    ->addColumn('approvals', function ($quotation) {
                        $approvals = '';
                        if(isset($quotation->relRequestProposal->approvals[0])){
                            foreach ($quotation->relRequestProposal->approvals as $key => $approval) {
                                $approvals .= '<button class="btn btn-xs btn-' . ($approval->response == 'pending' ? 'warning' : ($approval->response == 'approved' ? 'success' : 'danger')) . '">' . $approval->user->name . ' [' . ucwords($approval->response) . ']</button>&nbsp;';
                            }
                        }
                        
                        return $approvals;
                    })
                    ->filterColumn('approvals', function ($query, $keyword) {
                        return $query->whereHas('relRequestProposal.approvals.user', function ($query) use ($keyword) {
                                return $query->where('name', 'LIKE', '%' . $keyword . '%');
                            })
                            ->orWhereHas('relRequestProposal.approvals', function ($query) use ($keyword) {
                                return $query->where('status', 'LIKE', '%' . strtolower($keyword) . '%');
                            });
                    })

                    ->addColumn('actions', function ($values) {
                        $actions = '';
                        $actions .= '<a href="javascript:void(0)" onclick="openModal(' . $values->id . ')"  class="btn btn-xs btn-info"><i class="las la-eye"></i></a>';

                        if ($values->is_approved == "pre-processing") {

                            $actions .= '<a onclick="sendToManagement(' . $values->id . ')" class="btn btn-xs btn-success"><i class="las la-check"></i>&nbsp;Send to Management</a>';
                        }
                        return $actions;
                    })
                    ->rawColumns(['CS_number', 'reference_no', 'requisitions', 'products', 'suppliers', 'approvals', 'actions'])
                    ->make(true);
            }

            return view('pms.backend.pages.quotation.estimate_index', [
                'title' => $title,
                'headerColumns' => $this->estimateHeaderColumns()
            ]);
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    public function sendToManagement($quotation_id)
    {
        if (auth()->user()->hasRole('Purchase-Department')) {
            $quotation = Quotations::findOrFail($quotation_id);
            $quotation->is_approved = 'processing';
            $quotation->save();

            $message = '<span class="notification-links" data-src="' . route('pms.quotation.quotations.cs.proposal.details', $quotation->request_proposal_id) . '" data-ttile="Request Proposal Details">Reference No:' . $quotation->relRequestProposal->reference_no . '.Watting for Management approval.</span>';
            CreateOrUpdateNotification($message, 'unread', '', getManagerInfo('Management', null, true), 'send-to-manager');

            return $this->redirectBackWithSuccess('Successfully send to Management.', 'pms.estimate.index');
        }

        return $this->backWithError("Sorry! You don't have the access to to this.");
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function analysisIndexHeaderColumns($value = '')
    {
        return array(
            ['SL', 'SL'],
            ['CS_number', 'CS_number', 'text-center'],
            ['requisitions', 'requisitions', 'text-center'],
            ['products', 'products', 'text-center'],
            ['suppliers', 'suppliers', 'text-left'],
            ['approvals', 'approvals', 'text-left'],
            ['options', 'options', 'text-center'],
        );
    }

    public function analysisIndex()
    {
        try {
            $quotations = Quotations::with([
                'relRequestProposal.requestProposalDetails.product.attributes.attributeOption.attribute',
                'relRequestProposal.requestProposalRequisition.relRequisition',
                'relSelfQuotationSupplierByProposalId.relSuppliers',
                'relRequestProposal.approvals.user'
            ])
            ->when(!auth()->user()->hasAnyRole(['Purchase-Department', 'Audit', 'Billing', 'Management', 'Accounts']), function($query){
                return $query->whereHas('relRequestProposal.requestProposalRequisition.relRequisition', function($query){
                    return $query->where('assigned_user_id', auth()->user()->id);
                });
            })
            ->whereHas('relRequestProposal.requestProposalRequisition.relRequisition', function($query){
                return $query->whereIn('hr_unit_id', auth()->user()->priorities->pluck('hr_unit_id')->toArray());
            })
            ->where('status', 'active')
            ->whereDoesntHave('relSelfQuotationSupplierByProposalId', function ($query) {
                return $query->whereIn('is_approved', ['approved', 'halt']);
            })
            ->when(auth()->user()->hasRole('Purchase-Department'), function ($query) {
                return $query->whereIn('is_approved', ['pending', 'pre-processing', 'processing',]);
            })
            ->when(auth()->user()->hasRole('Purchase-Employee'), function ($query) {
                return $query->whereIn('is_approved', ['pending', 'pre-processing', 'processing',]);
            })
            ->groupBy('request_proposal_id')
            ->when(!datatableOrdering(), function ($query) {
                return $query->orderby('id', 'desc');
            });

            if (request()->ajax()) {
                return DataTables::of($quotations)
                    ->addIndexColumn()
                    ->addColumn('CS_number', function ($quotation) {
                        return '<a href="javascript:void(0)" onclick="openModal(' . $quotation->relRequestProposal->id . ')"  class="btn btn-link">' . $quotation->relRequestProposal->reference_no . '</a>';
                    })
                    ->filterColumn('CS_number', function ($query, $keyword) {
                        return $query->whereHas('relRequestProposal', function ($query) use ($keyword) {
                            $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('CS_number', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequestProposal::select('request_proposals.reference_no')
                            ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('requisitions', function ($quotation) {
                        $requisitions = '';

                        if ($quotation->relRequestProposal->requestProposalRequisition->count() > 0) {
                            foreach ($quotation->relRequestProposal->requestProposalRequisition as $key => $requisition) {
                                $requisitions .= ($key > 0 ? ', ' : '') . '<a href="javascript:void(0)" data-src="' . route('pms.requisition.list.view.show', $requisition->relRequisition->id) . '" class="text-primary requisition m-1 rounded showRequistionDetails" onclick="requistionDetails($(this))">' . $requisition->relRequisition->reference_no . '</a>';
                            }
                        }

                        return $requisitions;
                    })
                    ->filterColumn('requisitions', function ($query, $keyword) {
                        $query->whereHas('relRequestProposal.requestProposalRequisition.relRequisition', function ($query) use ($keyword) {
                            return $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('requisitions', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequestProposal::select('requisitions.reference_no')
                            ->join('requisitions', 'requisitions.id', '=', 'request_proposal_requisitions.requisition_id')
                            ->join('request_proposal_requisitions', 'request_proposal_requisitions.request_proposal_id', '=', 'request_proposals.id')
                            ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('products', function ($quotation) {
                        $products = '';
                        $sl = 0;
                        $array = [];
                        if ($quotation->relRequestProposal->requestProposalDetails->count() > 0) {
                            foreach ($quotation->relRequestProposal->requestProposalDetails as $key => $product) {
                                if (isset($product->product->id) && !in_array($product->product->id, $array)) {
                                    $sl++;
                                    $products .= ($sl > 1 ? ', ' : '') . $product->product->name . ' ' . getProductAttributesFaster($product->product);
                                    array_push($array, $product->product->id);
                                }
                            }
                        }

                        return $products;
                    })
                    ->filterColumn('products', function ($query, $keyword) {
                        return $query->where(function ($query) use ($keyword) {
                            return $query->where(function ($query) use ($keyword) {
                                return $query->whereHas('relRequestProposal.requestProposalDetails.product', function ($query) use ($keyword) {
                                    return $query->where('name', 'LIKE', '%' . $keyword . '%');
                                });
                            })
                                ->orWhere(function ($query) use ($keyword) {
                                    return $query->whereHas('relRequestProposal.requestProposalDetails.product.attributes.attributeOption', function ($query) use ($keyword) {
                                        $query->where('name', 'LIKE', '%' . $keyword . '%');
                                    })
                                        ->orWhereHas('relRequestProposal.requestProposalDetails.product.attributes.attributeOption.attribute', function ($query) use ($keyword) {
                                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                                        });
                                });
                        });

                    })
                    ->orderColumn('products', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequestProposal::select('products.name')
                            ->join('products', 'products.id', '=', 'request_proposal_details.product_id')
                            ->join('request_proposal_details', 'request_proposal_details.request_proposal_id', '=', 'request_proposals.id')
                            ->join('request_proposal_requisitions', 'request_proposal_requisitions.request_proposal_id', '=', 'request_proposals.id')
                            ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('suppliers', function ($quotation) {
                        $suppliers = '';
                        foreach (collect($quotation->relSelfQuotationSupplierByProposalId) as $key => $supplier) {
                            if (isset($supplier->relSuppliers->id)) {
                                $suppliers .= '<button class="btn btn-xs btn-' . ($supplier->recommendation == 'yes' ? 'success' : 'primary') . '">' . $supplier->relSuppliers->name . ' (' . $supplier->relSuppliers->code . ') [' . ucwords($supplier->is_approved) . ']</button>&nbsp;';
                            }
                        }
                        return $suppliers;
                    })
                    ->filterColumn('suppliers', function ($query, $keyword) {
                        return $query->whereHas('relSelfQuotationSupplierByProposalId', function ($query) use ($keyword) {
                            return $query->whereIn('is_approved', (auth()->user()->hasRole('Purchase-Department') ? ['pending', 'pre-processing'] : ['pending', 'pre-processing']));
                        })
                            ->whereHas('relSelfQuotationSupplierByProposalId.relSuppliers', function ($query) use ($keyword) {
                                return $query->where(function ($query) use ($keyword) {
                                    return $query->where('name', 'LIKE', '%' . $keyword . '%')
                                        ->orWhere('code', 'LIKE', '%' . $keyword . '%');
                                });
                            });
                    })
                    ->orderColumn('suppliers', function ($query, $order) {
                        return pleaseSortMe($query, $order, Suppliers::select('suppliers.name')
                            ->whereColumn('suppliers.id', 'quotations.supplier_id')
                            ->take(1)
                        );
                    })

                    ->addColumn('approvals', function ($quotation) {
                        $approvals = '';
                        if(isset($quotation->relRequestProposal->approvals[0])){
                            foreach ($quotation->relRequestProposal->approvals as $key => $approval) {
                                $approvals .= '<button class="btn btn-xs btn-' . ($approval->response == 'pending' ? 'warning' : ($approval->response == 'approved' ? 'success' : 'danger')) . '">' . $approval->user->name . ' [' . ucwords($approval->response) . ']</button>&nbsp;';
                            }
                        }
                        
                        return $approvals;
                    })
                    ->filterColumn('approvals', function ($query, $keyword) {
                        return $query->whereHas('relRequestProposal.approvals.user', function ($query) use ($keyword) {
                                return $query->where('name', 'LIKE', '%' . $keyword . '%');
                            })
                            ->orWhereHas('relRequestProposal.approvals', function ($query) use ($keyword) {
                                return $query->where('status', 'LIKE', '%' . strtolower($keyword) . '%');
                            });
                    })

                    ->addColumn('options', function ($quotation) {
                        $options = '';
                        if (collect($quotation->relSelfQuotationSupplierByProposalId)->whereIn('is_approved', (auth()->user()->hasRole('Purchase-Department') ? ['processing', 'approved', 'halt'] : ['processing', 'approved', 'halt']))->count() == 0) {
                            $options .= '<a href="' . route('pms.quotation.quotations.cs.compare.list', $quotation->request_proposal_id) . '"  title="Compare Process Analysis"  class="btn btn-success btn-xs"><i class="las la-list"></i></a>';
                        }

                        $options .= '<a target="_blank" href="' . route('pms.quotation.cs.history', $quotation->request_proposal_id) . '" class="btn btn-warning btn-xs ml-1" title="CS History"><i class="las la-history"></i></a>';

                        return $options;
                    })
                    ->rawColumns(['CS_number', 'requisitions', 'suppliers', 'approvals', 'options'])
                    ->toJson();
            }

            return view('pms.backend.pages.quotation.analysis-index', [
                'title' => 'Quotations Analysis',
                'headerColumns' => $this->analysisIndexHeaderColumns()
            ]);
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    public function quotationItems($quotation_id)
    {
        $title = "Quotation wise items";
        $quotations = Quotations::with([
            'relSuppliers.SupplierRatings',
            'relSupplierPaymentTerm',
            'relRequestProposal.createdBy',
            'exchangeRate.currency',
            'relQuotationItems.relProduct.productUnit',
            'relQuotationItems.relProduct.category.category',
            'relQuotationItems.relProduct.attributes.attributeOption.attribute',
        ])->where('id', $quotation_id)->where('status', 'active')->first();

        $requisitionItems = RequisitionItem::with([
            'attributes.attributeOption.attribute'
        ])
        ->whereHas('requisition.requestProposalRequisition', function($query) use($quotations){
            return $query->where('request_proposal_id', $quotations->request_proposal_id);
        })
        ->get();

        $systemCurrency = systemCurrency();
        $exchangeRate = exchangeRate($quotations->exchangeRate, $systemCurrency->id);
        $same = ($quotations->exchangeRate->currency_id == $systemCurrency->id ? true : false);
        $approved = request()->has('approved');
        try {
            return view('pms.backend.pages.quotation.item-show', compact('quotations', 'title', 'systemCurrency', 'exchangeRate', 'same', 'approved', 'requisitionItems'));
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }


    /**
     * Display the specified resource.
     *
     * @param int $id
     * @return \Illuminate\Http\JsonResponse
     */

    public function quotationGenerate($proposal_id)
    {
        if (request()->has('get-supplier-info')) {
            $supplier = Suppliers::with([
                'currencies'
            ])->find(request()->get('supplier_id'));
            $currencies = CurrencyType::with([
                'currencies' => function ($query) use ($supplier) {
                    return $query->whereIn('id', isset($supplier->id) ? $supplier->currencies->pluck('id')->toArray() : []);
                }
            ])->get();

            return response()->json([
                'currencies' => $currencies,
            ]);
        }

        $title = 'CS Generate';

        $requestProposal = RequestProposal::where('id', $proposal_id)
        ->with([
            'requestProposalRequisition.relRequisition.Unit',
            'defineToSupplier.supplier.suppleierCurrencies',
            'createdBy',
            'requestProposalDetails.product.category.category',
            'requestProposalDetails.product.productUnit',
            'requestProposalDetails.product.attributes.attributeOption.attribute',
        ])
        ->first();

        $requisitionItems = RequisitionItem::with([
            'attributes.attributeOption.attribute'
        ])
        ->whereHas('requisition.requestProposalRequisition', function($query) use($requestProposal){
            return $query->where('request_proposal_id', $requestProposal->id);
        })
        ->get();

        $clue = 'GRP';
        $units = \App\Models\Hr\Unit::whereIn('hr_unit_id', $requestProposal->requestProposalRequisition->pluck('relRequisition.hr_unit_id'))->get();
        if ($units->count() == 1) {
            $clue = $units[0]->hr_unit_short_name;
        }

        $prefix = 'QG-' . date('y', strtotime(date('Y-m-d'))) . '-' . $clue . '-';
        $refNo = uniqueCode(15, $prefix, 'quotations', 'id');
        try {

            $supplierPaymentTerms = supplierPaymentTerm();
            $quotationSupplier = Quotations::where('request_proposal_id', $proposal_id)->select('supplier_id')->get();

            $quotationSupplierArray = array();
            foreach ($quotationSupplier as $values) {
                array_push($quotationSupplierArray, $values->supplier_id);
            }

            if ($requestProposal->defineToSupplier->whereNotIn('supplier_id', $quotationSupplierArray)->count() <= 0) {
                return redirect('pms/rfp/request-proposal');
            }

            $currencyTypes = CurrencyType::whereHas('currencies.suppliers', function ($query) use ($requestProposal, $quotationSupplierArray) {
                return $query->whereIn('supplier_id', $requestProposal->defineToSupplier->whereNotIn('supplier_id', $quotationSupplierArray)->pluck('supplier_id')->toArray());
            })->get();

            $paymentTerms = PaymentTerm::all();

            return view('pms.backend.pages.quotation.create', compact('title', 'requestProposal', 'proposal_id', 'refNo', 'supplierPaymentTerms', 'quotationSupplierArray', 'currencyTypes', 'paymentTerms', 'requisitionItems'));

        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\RedirectResponse
     */

    public function store(Request $request)
    {
        $request->validate([
            'currency_id' => ['required'],
            'delivery_date' => ['required'],
            'quotation_date' => ['required', 'date'],
            'reference_no' => 'required|max:15|unique:quotations',
            "supplier_id" => "required|exists:suppliers,id",
            "request_proposal_id" => "required",
            "request_proposal_id.*" => "exists:request_proposals,id",
            'sum_of_subtotal' => 'required',
            'discount' => 'nullable',
            'vat' => 'nullable',
            'gross_price' => 'required',
            'type' => 'required|in:online,manual',
            'validation_days' => 'required',

            'payment_term_id' => 'required',
            'payment_percentages' => 'required',
            'payment_percentages.*' => 'required',
            // 'payment_durations' => 'required',
            // 'payment_durations.*' => 'required',
            'payment_types' => 'required',
            'payment_types.*' => 'required',
            'payment_modes' => 'required',
            'payment_modes.*' => 'required',
        ]);

        $type = $request->type;
        $modal = Quotations::where([
            'supplier_id' => $request->supplier_id,
            'request_proposal_id' => $request->request_proposal_id,
            'type' => $type
        ])->first();

        if (!empty($modal)) {
            return $this->backWithError('Already generate a quotation using this supplier!!');
        }

        DB::beginTransaction();
        try {

            $quotationFilePath = null;
            if ($request->hasFile('quotation_file')) {
                $quotationFilePath = $this->fileUpload($request->file('quotation_file'), 'upload/quotation/pdf-file');
            }

            $technicalFilePath = null;
            if ($request->hasFile('technical_specification_file')) {
                $technicalFilePath = $this->fileUpload($request->file('technical_specification_file'), 'upload/quotation/technical-file');
            }

            $sl = 0;
            $supplier_payment_terms_id = 0;
            if(isset($request->payment_percentages[0])){
                foreach($request->payment_percentages as $key => $value){
                    $supplierPaymentTerm = SupplierPaymentTerm::create([
                        'supplier_id' => $request->supplier_id,
                        'payment_term_id' => $request->payment_term_id,
                        'payment_percent' => $request->payment_percentages[$key],
                        'day_duration' => 1,
                        // 'day_duration' => $request->payment_durations[$key],
                        'type' => $request->payment_types[$key],
                        'payment_mode' => $request->payment_modes[$key],
                        'parent_id' => isset($parent->id) ? $parent->id : 0,
                        'source' => 'cs',
                    ]);

                    $sl++;

                    if($sl == 1){
                        $parent = $supplierPaymentTerm;
                        $supplier_payment_terms_id = $supplierPaymentTerm->id;
                    }
                }
            }


            $quotation = Quotations::create([
                'supplier_id' => $request->supplier_id,
                'request_proposal_id' => $request->request_proposal_id,
                'reference_no' => $request->reference_no,
                'quotation_date' => date('Y-m-d', strtotime($request->quotation_date)),
                'exchange_rate_id' => getExchangeRates($request->currency_id)['rate']->id,
                'total_price' => $request->sum_of_subtotal,
                'discount' => $request->discount,
                'vat' => collect($request->sub_total_vat_price)->sum(),
                'gross_price' => $request->gross_price,
                'validation_days' => $request->validation_days,
                'status' => 'active',
                'type' => $type,
                'quotation_file' => $quotationFilePath,
                'technical_specification_file' => $technicalFilePath,
                'delivery_date' => isset($request->delivery_date) ? $request->delivery_date : date('Y-m-d'),
                'supplier_payment_terms_id' => $supplier_payment_terms_id,
            ]);

            $requisitionItems = RequisitionItem::with([
                'attributes.attributeOption.attribute'
            ])
            ->whereHas('requisition.requestProposalRequisition', function($query) use($request){
                return $query->where('request_proposal_id', $request->request_proposal_id);
            })
            ->get();

            foreach ($request->product_id as $i => $uid) {

                $itemTechnicalFilePath = null;
                if ($request->hasFile('item_technical_specification_file.' . $uid)) {
                    $itemTechnicalFilePath = $this->fileUpload($request->file('item_technical_specification_file.' . $uid), 'upload/quotation/item-technical-file');
                }

                $quotationItemsInput[] = [
                    'uid' => $uid,
                    'quotation_id' => $quotation->id,
                    'product_id' => $requisitionItems->where('uid', $uid)->first()->product_id,
                    'description' => $request->product_description[$uid],
                    'unit_price' => $request->unit_price[$uid],
                    'qty' => $request->qty[$uid],
                    'sub_total_price' => $request->sub_total_price[$uid],
                    'discount' => $request->item_discount_percent[$uid] == null ? 0 : $request->item_discount_percent[$uid],
                    'discount_amount' => $request->item_discount_amount[$uid],
                    'vat_type' => $request->product_vat_type[$uid],
                    'vat_percentage' => $request->product_vat[$uid],
                    'vat' => $request->sub_total_vat_price[$uid],
                    'total_price' => ($request->sub_total_price[$uid] - $request->item_discount_amount[$uid]) + ($request->product_vat_type[$uid] == 'exclusive' ? $request->sub_total_vat_price[$uid] : 0),
                    'created_at' => date('Y-m-d H:i:s'),
                    'technical_specification_file' => $itemTechnicalFilePath,
                ];
            }

            QuotationsItems::insert($quotationItemsInput);

            // if (!is_null($request->payment_term_id)) {
            //     $this->storeSupplierPaymentTerm($quotation->id, $request);
            // }

            DB::commit();
            return $this->backWithSuccess('CS Generated Successfully');
        } catch (Throwable $th) {
            DB::rollback();
            return $this->backWithError($th->getMessage());
        }
    }

    public function storeSupplierPaymentTerm($quotationId, $request)
    {
        SupplierPaymentTerm::create(
            [
                'quotation_id' => $quotationId,
                'supplier_id' => $request->supplier_id,
                'payment_term_id' => $request->payment_term_id,
                'payment_percent' => $request->payment_percent ?? 0,
                'remarks' => $request->remarks,
            ]
        );
    }

    /**
     * Edit an existing resource in storage.
     *
     * @param $id
     */

    public function edit($id)
    {
        $title = 'Quotation Edit';
        try {

            $quotation = Quotations::with([
                'relRequestProposal',
                'relSuppliers.currencies',
                'exchangeRate.currency',
                'histories',
                'relQuotationItems.relProduct',

                'relSupplierPaymentTerm'
            ])
            ->whereNotIn('type', ['direct-purchase'])
            ->whereIn('is_approved', ['pre-processing', 'pending'])
            ->where('id', $id)
            ->first();

            $requisitionItems = RequisitionItem::with([
                'attributes.attributeOption.attribute'
            ])
            ->whereHas('requisition.requestProposalRequisition', function($query) use($quotation){
                return $query->where('request_proposal_id', $quotation->request_proposal_id);
            })
            ->get();

            $additionalTerms = SupplierPaymentTerm::where('id', $quotation->relSupplierPaymentTerm->id)->orWhere('parent_id', $quotation->relSupplierPaymentTerm->id)->get();

            $currencies = CurrencyType::with([
                'currencies' => function ($query) use ($quotation) {
                    return $query->whereIn('id', isset($quotation->relSuppliers->currencies) ? $quotation->relSuppliers->currencies->pluck('id')->toArray() : []);
                }
            ])->get();

            $paymentTerms = PaymentTerm::all();

            return view('pms.backend.pages.quotation.edit', compact('title', 'quotation', 'additionalTerms', 'currencies', 'paymentTerms', 'requisitionItems'));

        } catch (\Exception $e) {
            return $this->backWithError($e->getMessage());
        }

    }

    /**
     * Update an existing created resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @param \Illuminate\Http\Request $id
     * @return \Illuminate\Http\RedirectResponse
     */

    public function update(Request $request, $id)
    {
        $request->validate([
            'currency_id' => ['required'],
            // 'supplier_payment_terms_id' => ['required'],
            'delivery_date' => ['required'],
            'quotation_date' => ['required', 'date'],
            "request_proposal_id" => "required",
            'sum_of_subtotal' => 'required',
            'discount' => 'nullable',
            'vat' => 'nullable',
            'gross_price' => 'required',
            'type' => 'required|in:online,manual',
            'validation_days' => 'required',

            'payment_term_id' => 'required',
            'payment_percentages' => 'required',
            'payment_percentages.*' => 'required',
            // 'payment_durations' => 'required',
            // 'payment_durations.*' => 'required',
            'payment_types' => 'required',
            'payment_types.*' => 'required',
            'payment_modes' => 'required',
            'payment_modes.*' => 'required',
        ]);

        $modal = Quotations::findOrFail($id);

        if (!$modal) {
            return $this->backWithError('Quotation not found!!');
        }

        DB::beginTransaction();
        try {
            $this->quotationHistoryStore($modal);

            $quotationFilePath = $modal->quotation_file;
            if ($request->hasFile('quotation_file')) {
                $quotationFilePath = $this->fileUpload($request->file('quotation_file'), 'upload/quotation/pdf-file');
            }

            $technicalFilePath = $modal->technical_specification_file;
            if ($request->hasFile('technical_specification_file')) {
                $technicalFilePath = $this->fileUpload($request->file('technical_specification_file'), 'upload/quotation/technical-file');
            }

            $sl = 0;
            $supplier_payment_terms_id = 0;
            if(isset($request->payment_percentages[0])){
                foreach($request->payment_percentages as $key => $value){
                    $supplierPaymentTerm = SupplierPaymentTerm::create([
                        'supplier_id' => $request->supplier_id,
                        'payment_term_id' => $request->payment_term_id,
                        'payment_percent' => $request->payment_percentages[$key],
                        'day_duration' => 1,
                        // 'day_duration' => $request->payment_durations[$key],
                        'type' => $request->payment_types[$key],
                        'payment_mode' => $request->payment_modes[$key],
                        'parent_id' => isset($parent->id) ? $parent->id : 0,
                        'source' => 'cs',
                    ]);

                    $sl++;

                    if($sl == 1){
                        $parent = $supplierPaymentTerm;
                        $supplier_payment_terms_id = $supplierPaymentTerm->id;
                    }
                }
            }

            $quotation = $modal->update([
                'supplier_id' => $request->supplier_id,
                'quotation_date' => date('Y-m-d', strtotime($request->quotation_date)),
                'exchange_rate_id' => getExchangeRates($request->currency_id)['rate']->id,
                'total_price' => $request->sum_of_subtotal,
                'discount' => $request->discount,
                'vat' => collect($request->sub_total_vat_price)->sum(),
                'gross_price' => $request->gross_price,
                'validation_days' => $request->validation_days,
                'status' => 'active',
                'quotation_file' => $quotationFilePath,
                'technical_specification_file' => $technicalFilePath,
                'delivery_date' => isset($request->delivery_date) ? $request->delivery_date : date('Y-m-d'),
                'supplier_payment_terms_id' => $supplier_payment_terms_id,
            ]);

            foreach ($modal->relQuotationItems as $i => $item) {
                $itemTechnicalFilePath = $item->technical_specification_file;
                if ($request->hasFile('item_technical_specification_file.' . $item->id)) {
                    $itemTechnicalFilePath = $this->fileUpload($request->file('item_technical_specification_file.' . $item->id), 'upload/quotation/item-technical-file');
                }

                $item->update([
                    'product_id' => $item->product_id,
                    'description' => $request->product_description[$item->id],
                    'unit_price' => $request->unit_price[$item->id],
                    'qty' => $request->qty[$item->id],
                    'sub_total_price' => $request->sub_total_price[$item->id],
                    'discount' => $request->item_discount_percent[$item->id] == null ? 0 : $request->item_discount_percent[$item->id],
                    'discount_amount' => $request->item_discount_amount[$item->id],
                    'vat_type' => $request->product_vat_type[$item->id],
                    'vat_percentage' => $request->product_vat[$item->id],
                    'vat' => $request->sub_total_vat_price[$item->id],
                    'total_price' => ($request->sub_total_price[$item->id] - $request->item_discount_amount[$item->id]) + ($request->product_vat_type[$item->id] == 'exclusive' ? $request->sub_total_vat_price[$item->id] : 0),
                    'updated_at' => date('Y-m-d H:i:s'),
                    'technical_specification_file' => $itemTechnicalFilePath,
                ]);
            }

            DB::commit();
            return $this->redirectBackWithSuccess('Quotation Updated Successfully', 'pms.quotation.quotations.index');
        } catch (\Throwable $th) {
            DB::rollback();
            return $this->backWithError($th->getMessage());
        }
    }

    public function quotationHistoryStore($model)
    {
        $quotationHistory = QuotationHistory::create([
            'quotation_id' => $model->id,
            'supplier_payment_terms_id' => $model->supplier_payment_terms_id,
            'quotation_date' => $model->quotation_date,
            'exchange_rate_id' => $model->exchange_rate_id,
            'total_price' => $model->total_price,
            'discount' => $model->discount,
            'vat' => $model->vat,
            'gross_price' => $model->gross_price,
            'validation_days' => $model->validation_days,
            'status' => $model->status,
            'type' => $model->type,
            'quotation_file' => $model->quotation_file,
            'remarks' => $model->remarks,
            'note' => $model->note,
            'delivery_date' => $model->delivery_date,
            'technical_specification_file' => $model->technical_specification_file,
        ]);

        foreach ($model->relQuotationItems as $i => $item) {

            $quotationItemsInput[] = [
                'quotation_history_id' => $quotationHistory->id,
                'uid' => $item->uid,
                'product_id' => $item->product_id,
                'description' => $item->description,
                'unit_price' => $item->unit_price,
                'qty' => $item->qty,
                'sub_total_price' => $item->sub_total_price,
                'discount' => $item->discount,
                'discount_amount' => $item->discount_amount,
                'vat_type' => $item->vat_type,
                'vat_percentage' => $item->vat_percentage,
                'vat' => $item->vat,
                'total_price' => $item->total_price,
                'created_by' => $quotationHistory->created_by,
                'updated_by' => $quotationHistory->updated_by,
                'created_at' => date('Y-m-d h:i'),
                'technical_specification_file' => $item->technical_specification_file,
            ];
        }

        //Quotation items insert.
        QuotationHistoryItem::insert($quotationItemsInput);

        return true;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function compareGridView($request_proposal_id)
    {
        try {

            $title = 'Quotations Compare Analysis';
            $quotations = Quotations::where('status', 'active')
                ->where('is_approved', 'pending')
                ->where('request_proposal_id', $request_proposal_id)
                ->orderby('gross_price', 'asc')
                ->get();

            return view('pms.backend.pages.quotation._compare2', compact('title', 'quotations'));

        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }

    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function compareListView($request_proposal_id)
    {
        try {
            $title = 'Quotations Compare Analysis';
            $quotations = Quotations::where('status', 'active')
            ->with([
                'exchangeRate.currency',
                'relRequestProposal.createdBy',
                'relSuppliers.relPaymentTerms',
                'relSuppliers.SupplierRatings',
                'exchangeRate.currency',
                'relQuotationItems.relProduct.productUnit',
                'relQuotationItems.relProduct.category.category',
                'relQuotationItems.relProduct.attributes.attributeOption.attribute'
            ])
            ->whereIn('is_approved', (auth()->user()->hasRole('Purchase-Department') ? ['pending', 'pre-processing'] : ['pending', 'pre-processing']))
            ->where('request_proposal_id', $request_proposal_id)
            ->orderby('gross_price', 'asc')
            ->get();

            $requisitionItems = RequisitionItem::with([
                'attributes.attributeOption.attribute'
            ])
            ->whereHas('requisition.requestProposalRequisition', function($query) use($request_proposal_id){
                return $query->where('request_proposal_id', $request_proposal_id);
            })
            ->get();

            $systemCurrency = systemCurrency();
            if (isset($quotations[0])) {
                $approvers = User::role(['Department-Head', 'Management'])
                ->whereHas('priorities', function($query) use($quotations){
                    return $query->where('hr_unit_id', $quotations->first()->relRequestProposal->requestProposalRequisition->first()->relRequisition->hr_unit_id);
                })
                ->get();
                return view('pms.backend.pages.quotation._compare', compact('title', 'quotations', 'systemCurrency', 'approvers', 'requisitionItems'));
            }
            return back();
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function compareStore(Request $request)
    {
        if (!isset($request->quotation_id[0])) {
            return response()->json([
                'success' => false,
                'message' => "Please choose at least one quotation to send to the Management.",
            ]);
        }

        if (!isset($request->approvers[0])) {
            return response()->json([
                'success' => false,
                'message' => "Please choose at least one Approvers.",
            ]);
        }

        DB::beginTransaction();
        try {

            foreach ($request->quotation_id as $key => $quotation_id) {
                $modal = Quotations::with([
                    'relQuotationItems'
                ])
                ->where([
                    'id' => $quotation_id,
                    'request_proposal_id' => $request->request_proposal_id
                ])
                ->whereIn('is_approved', (auth()->user()->hasRole('Purchase-Department') ? ['pending', 'pre-processing'] : ['pending', 'pre-processing']))
                ->first();

                if (isset($modal)) {
                    $modal->recommendation = in_array($modal->id, isset($request->quotation_recommendations[0]) ? $request->quotation_recommendations : []) ? 'yes' : 'no';
                    $modal->is_approved = 'processing';
                    $modal->note = $request->note[$quotation_id];

                    if($modal->save()){
                        if($modal->relQuotationItems->count() > 0){
                            foreach($modal->relQuotationItems as $key => $item){
                                $item->recommended_quantity = $request->recommendations[$item->id];
                                $item->save();
                            }
                        }

                        if(isset($request->approvers[0])){
                            $priority = 0;
                            foreach($request->approvers as $key => $user_id){
                                $approval = RequestProposalApproval::where([
                                    'request_proposal_id' => $request->request_proposal_id,
                                    'user_id' => $user_id,
                                ])->first();
                                if(!isset($approval)){
                                    $priority++;
                                    RequestProposalApproval::create([
                                        'request_proposal_id' => $request->request_proposal_id,
                                        'user_id' => $user_id,
                                        'priority' => $priority,
                                        'response' => 'pending',
                                    ]);
                                }
                            }
                        }
                    }
                }
            }

            if (auth()->user()->hasRole('Purchase-Employee')) {
                $message = '<span class="notification-links" data-src="' . url('pms/quotation/cs-compare-view-notification/' . $request->request_proposal_id) . '" data-title="Quotation CS">Reference No:' . $modal->reference_no . '. Watting for Purchase Approval.</span>';

                CreateOrUpdateNotification($message, 'unread', '', getManagerInfo('Purchase-Department', null, true), 'send-to-purchase-department');
            } else {
                $message = '<span class="notification-links" data-src="' . url('pms/quotation/cs-compare-view-notification/' . $request->request_proposal_id) . '" data-title="Quotation CS">Reference No:' . $modal->reference_no . '. Watting for Management Approval.</span>';
                CreateOrUpdateNotification($message, 'unread', '', $request->approvers, 'send-to-manager');
            }

            DB::commit();

            session()->flash('alert-type', 'success');
            session()->flash('message', 'Successfully Send for approval');
            return response()->json([
                'success' => true,
                'url' => route('pms.quotation.quotations.cs.analysis'),
            ]);

        } catch (Throwable $th) {
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage(),
            ]);
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function approvalHeaderColumns($value = '')
    {
        return array(
            ['SL', 'SL'],
            ['CS_number', 'CS_number', 'text-center'],
            ['requisitions', 'requisitions', 'text-center'],
            ['products', 'products', 'text-center'],
            ['suppliers', 'supplier', 'text-left'],
            ['status', 'status', 'text-center'],
            ['approvals', 'approvals', 'text-center'],
            ['actions', 'actions', 'text-center action']
        );
    }

    public function approvalList()
    {
        $title = 'Quotations Request For Approved';

        try {
            $quotations = Quotations::with([
                'relQuotationItems',
                'relRequestProposal',
                'relSuppliers',
                'exchangeRate.currency',
                'relSelfQuotationSupplierByProposalId.relSuppliers',
                'relRequestProposal.approvals.user',

                'relRequestProposal.requestProposalRequisition.relRequisition',
                'relRequestProposal.requestProposalDetails.product.attributes.attributeOption.attribute'
            ])
            ->whereHas('relRequestProposal.approvals', function($query){
                return $query->whereIn('response', ['pending', 'denied'])
                             ->where('user_id', auth()->user()->id);
            })
            ->where([
                'status' => 'active',
                'is_po_generate' => 'no',
            ])
            ->where('is_approved', 'processing')
            ->whereDoesntHave('relRequestProposal.relQuotations', function ($query) {
                return $query->where('is_approved', 'approved');
            })
            ->whereNotIn('type', ['direct-purchase'])
            ->when(!datatableOrdering(), function ($query) {
                return $query->orderby('id', 'desc');
            })
            ->groupBy('request_proposal_id');

            $approvalRange = Auth::user()->relApprovalRange;

            if (request()->ajax()) {
                return DataTables::of($quotations)
                    ->addIndexColumn()
                    ->addColumn('CS_number', function ($values) {
                        return '<a href="javascript:void(0)" class="btn btn-link" onclick="requestProposalDetails(' . $values->relRequestProposal->id . ')">' . (isset($values->relRequestProposal->reference_no) ? $values->relRequestProposal->reference_no : '') . '</a>';
                    })
                    ->filterColumn('CS_number', function ($query, $keyword) {
                        return $query->whereHas('relRequestProposal', function ($query) use ($keyword) {
                            $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('CS_number', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequestProposal::select('request_proposals.reference_no')
                            ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('requisitions', function ($quotation) {
                        $requisitions = '';

                        if ($quotation->relRequestProposal->requestProposalRequisition->count() > 0) {
                            foreach ($quotation->relRequestProposal->requestProposalRequisition as $key => $requisition) {
                                $requisitions .= ($key > 0 ? ', ' : '') . '<a href="javascript:void(0)" data-src="' . route('pms.requisition.list.view.show', $requisition->relRequisition->id) . '" class="text-primary requisition m-1 rounded showRequistionDetails" onclick="requistionDetails($(this))">' . $requisition->relRequisition->reference_no . '</a>';
                            }
                        }

                        return $requisitions;
                    })
                    ->filterColumn('requisitions', function ($query, $keyword) {
                        $query->whereHas('relRequestProposal.requestProposalRequisition.relRequisition', function ($query) use ($keyword) {
                            return $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('requisitions', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequestProposal::select('requisitions.reference_no')
                            ->join('requisitions', 'requisitions.id', '=', 'request_proposal_requisitions.requisition_id')
                            ->join('request_proposal_requisitions', 'request_proposal_requisitions.request_proposal_id', '=', 'request_proposals.id')
                            ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('products', function ($quotation) {
                        $products = '';
                        $sl = 0;
                        if ($quotation->relRequestProposal->requestProposalDetails->count() > 0) {
                            foreach ($quotation->relRequestProposal->requestProposalDetails as $key => $product) {
                                if (isset($product->product->name)) {
                                    $sl++;
                                    $products .= ($sl > 1 ? ', ' : '') . $product->product->name . ' ' . getProductAttributesFaster($product->product);
                                }
                            }
                        }

                        return $products;
                    })
                    ->filterColumn('products', function ($query, $keyword) {
                        return $query->where(function ($query) use ($keyword) {
                            return $query->where(function ($query) use ($keyword) {
                                return $query->whereHas('relRequestProposal.requestProposalDetails.product', function ($query) use ($keyword) {
                                    return $query->where('name', 'LIKE', '%' . $keyword . '%');
                                });
                            })
                                ->orWhere(function ($query) use ($keyword) {
                                    return $query->whereHas('relRequestProposal.requestProposalDetails.product.attributes.attributeOption', function ($query) use ($keyword) {
                                        $query->where('name', 'LIKE', '%' . $keyword . '%');
                                    })
                                        ->orWhereHas('relRequestProposal.requestProposalDetails.product.attributes.attributeOption.attribute', function ($query) use ($keyword) {
                                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                                        });
                                });
                        });

                    })
                    ->orderColumn('products', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequestProposal::select('products.name')
                            ->join('products', 'products.id', '=', 'request_proposal_details.product_id')
                            ->join('request_proposal_details', 'request_proposal_details.request_proposal_id', '=', 'request_proposals.id')
                            ->join('request_proposal_requisitions', 'request_proposal_requisitions.request_proposal_id', '=', 'request_proposals.id')
                            ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('suppliers', function ($values) {
                        $data = '';
                        if ($values->relSelfQuotationSupplierByProposalId) {
                            foreach ($values->relSelfQuotationSupplierByProposalId->whereNotIn('is_approved', ['pending', 'approved', 'halt']) as $supplier) {
                                if (isset($supplier->relSuppliers->name)) {
                                    $data .= '<button class="btn btn-sm btn-xs m-1 ' . ($supplier->is_approved == 'halt' ? ' btn-warning' : ($supplier->recommendation == 'yes' ? 'btn-success' : 'btn-dark')) . '">' . $supplier->relSuppliers->name . ' (' . $supplier->relSuppliers->code . ')</button>';
                                }
                            }
                        }

                        return $data;
                    })
                    ->filterColumn('suppliers', function ($query, $keyword) {
                        return $query->whereHas('relSuppliers', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('suppliers', function ($query, $order) {
                        return pleaseSortMe($query, $order, Suppliers::select('suppliers.name')
                            ->whereColumn('suppliers.id', 'quotations.supplier_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('status', function ($values) {
                        $status = '';
                        $approvedCount = Quotations::where('request_proposal_id', $values->request_proposal_id)->where('is_approved', 'approved')->count();
                        if ($approvedCount > 0) {
                            $status .= '<a class="btn btn-xs btn-success">Approved (' . $approvedCount . ' Supplier)</a>';
                        } else {
                            $status .= '<a class="btn btn-xs btn-warning">Waiting for Approval</a>';
                        }

                        return $status;
                    })

                    ->addColumn('approvals', function ($quotation) {
                        $approvals = '';
                        if(isset($quotation->relRequestProposal->approvals[0])){
                            foreach ($quotation->relRequestProposal->approvals as $key => $approval) {
                                $approvals .= '<button class="btn btn-xs btn-' . ($approval->response == 'pending' ? 'warning' : ($approval->response == 'approved' ? 'success' : 'danger')) . '">' . $approval->user->name . ' [' . ucwords($approval->response) . ']</button>&nbsp;';
                            }
                        }
                        
                        return $approvals;
                    })
                    ->filterColumn('approvals', function ($query, $keyword) {
                        return $query->whereHas('relRequestProposal.approvals.user', function ($query) use ($keyword) {
                                return $query->where('name', 'LIKE', '%' . $keyword . '%');
                            })
                            ->orWhereHas('relRequestProposal.approvals', function ($query) use ($keyword) {
                                return $query->where('status', 'LIKE', '%' . strtolower($keyword) . '%');
                            });
                    })

                    ->addColumn('actions', function ($values) use ($approvalRange) {
                        $myApproval = $values->relRequestProposal->approvals->whereIn('response', ['pending', 'denied'])->where('user_id', auth()->user()->id)->first();
                        $available = (isset($myApproval->id));
                        $available = $available ? ($values->relRequestProposal->approvals->whereIn('response', ['pending', 'denied'])->where('priority', '<', $myApproval->priority)->count() == 0) : false;

                        $actions = '';
                        $count = 0;
                        if (isset($approvalRange[0])) {
                            foreach ($approvalRange as $range) {
                                if ($range->min_amount <= $values->relQuotationItems->sum('total_price') && $range->max_amount >= $values->relQuotationItems->sum('total_price')) {
                                    $count++;
                                }
                            }

                            if ($count >= 0) {
                                if ($values->relSelfQuotationSupplierByProposalId->whereIn('is_approved', ['approved', 'halt'])->count() == 0 && $available) {
                                    $actions .= '<a href="' . route('pms.quotation.quotations.cs.compare.view', ['id' => $values->request_proposal_id, 'slug' => 'list']) . '?type=rfp"  title="Compare Process Analysis"  class="btn btn-success btn-xs"><i class="las la-list"></i></a>';
                                }
                            } else {
                                $actions .= '<a title="Out of Approval Range"  class="btn btn-danger btn-xs"><i class="las la-ban"></i></a>';
                            }
                        } else {
                            if ($values->relSelfQuotationSupplierByProposalId->whereIn('is_approved', ['approved', 'halt'])->count() == 0 && $available) {
                                $actions .= '<a href="' . route('pms.quotation.quotations.cs.compare.view', ['id' => $values->request_proposal_id, 'slug' => 'list']) . '?type=rfp"  title="Compare Process Analysis"  class="btn btn-success btn-xs"><i class="las la-list"></i></a>';
                            }
                        }

                        $actions .= '<a target="_blank" href="' . route('pms.quotation.cs.history', $values->request_proposal_id) . '" class="btn btn-warning btn-xs ml-1" title="CS History"><i class="las la-history"></i></a>';

                        return $actions;
                    })
                    ->rawColumns(['CS_number', 'requisitions', 'suppliers', 'status', 'approvals', 'actions'])
                    ->make(true);
            }

            return view('pms.backend.pages.quotation.approval-index', [
                'title' => $title,
                'headerColumns' => $this->approvalHeaderColumns()
            ]);

        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function estimateApprovalList()
    {
        $title = 'Estimate Request For Approved';

        try {
            $quotations = Quotations::with([
                'relQuotationItems',
                'relRequestProposal',
                'relSuppliers',
                'exchangeRate.currency',
                'relSelfQuotationSupplierByProposalId.relSuppliers'
            ])
            ->when(!auth()->user()->hasAnyRole(['Purchase-Department', 'Audit', 'Billing', 'Management', 'Accounts', 'Department-Head']), function($query){
                return $query->whereHas('relRequestProposal.requestProposalRequisition.relRequisition', function($query){
                    return $query->where('assigned_user_id', auth()->user()->id);
                });
            })
            ->whereHas('relRequestProposal.requestProposalRequisition.relRequisition', function($query){
                return $query->whereIn('hr_unit_id', auth()->user()->priorities->pluck('hr_unit_id')->toArray());
            })
            ->where([
                'status' => 'active',
                'is_po_generate' => 'no',
            ])
            ->where('is_approved', 'processing')
            ->where('type', 'direct-purchase');

            $approvalRange = Auth::user()->relApprovalRange;

            if (request()->ajax()) {
                $options = [
                    'Management' => auth()->user()->hasRole('Management'),
                ];
                return DataTables::of($quotations)
                    ->addIndexColumn()
                    ->addColumn('CS_number', function ($values) {
                        return '<a href="javascript:void(0)" class="btn btn-link" onclick="requestProposalDetails(' . $values->relRequestProposal->id . ')">' . (isset($values->relRequestProposal->reference_no) ? $values->relRequestProposal->reference_no : '') . '</a>';
                    })
                    ->filterColumn('CS_number', function ($query, $keyword) {
                        return $query->whereHas('relRequestProposal', function ($query) use ($keyword) {
                            $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('CS_number', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequestProposal::select('request_proposals.reference_no')
                            ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                            ->take(1)
                        );
                    })

                    ->addColumn('requisitions', function ($quotation) {
                        $requisitions = '';

                        if ($quotation->relRequestProposal->requestProposalRequisition->count() > 0) {
                            foreach ($quotation->relRequestProposal->requestProposalRequisition as $key => $requisition) {
                                $requisitions .= ($key > 0 ? ', ' : '') . '<a href="javascript:void(0)" data-src="' . route('pms.requisition.list.view.show', $requisition->relRequisition->id) . '" class="text-primary requisition m-1 rounded showRequistionDetails" onclick="requistionDetails($(this))">' . $requisition->relRequisition->reference_no . '</a>';
                            }
                        }

                        return $requisitions;
                    })
                    ->filterColumn('requisitions', function ($query, $keyword) {
                        $query->whereHas('relRequestProposal.requestProposalRequisition.relRequisition', function ($query) use ($keyword) {
                            return $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('requisitions', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequestProposal::select('requisitions.reference_no')
                            ->join('requisitions', 'requisitions.id', '=', 'request_proposal_requisitions.requisition_id')
                            ->join('request_proposal_requisitions', 'request_proposal_requisitions.request_proposal_id', '=', 'request_proposals.id')
                            ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('products', function ($quotation) {
                        $products = '';
                        $sl = 0;
                        $array = [];
                        if ($quotation->relRequestProposal->requestProposalDetails->count() > 0) {
                            foreach ($quotation->relRequestProposal->requestProposalDetails as $key => $product) {
                                if (isset($product->product->id) && !in_array($product->product->id, $array)) {
                                    $sl++;
                                    $products .= ($sl > 1 ? ', ' : '') . $product->product->name . ' ' . getProductAttributesFaster($product->product);
                                    array_push($array, $product->product->id);
                                }
                            }
                        }

                        return $products;
                    })
                    ->filterColumn('products', function ($query, $keyword) {
                        return $query->where(function ($query) use ($keyword) {
                            return $query->where(function ($query) use ($keyword) {
                                return $query->whereHas('relRequestProposal.requestProposalDetails.product', function ($query) use ($keyword) {
                                    return $query->where('name', 'LIKE', '%' . $keyword . '%');
                                });
                            })
                            ->orWhere(function ($query) use ($keyword) {
                                return $query->whereHas('relRequestProposal.requestProposalDetails.product.attributes.attributeOption', function ($query) use ($keyword) {
                                    $query->where('name', 'LIKE', '%' . $keyword . '%');
                                })
                                    ->orWhereHas('relRequestProposal.requestProposalDetails.product.attributes.attributeOption.attribute', function ($query) use ($keyword) {
                                        $query->where('name', 'LIKE', '%' . $keyword . '%');
                                    });
                            });
                        });

                    })
                    ->orderColumn('products', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequestProposal::select('products.name')
                            ->join('products', 'products.id', '=', 'request_proposal_details.product_id')
                            ->join('request_proposal_details', 'request_proposal_details.request_proposal_id', '=', 'request_proposals.id')
                            ->join('request_proposal_requisitions', 'request_proposal_requisitions.request_proposal_id', '=', 'request_proposals.id')
                            ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('suppliers', function ($quotation) {
                        $suppliers = '';
                        foreach (collect($quotation->relSelfQuotationSupplierByProposalId) as $key => $supplier) {
                            if (isset($supplier->relSuppliers->id)) {
                                $suppliers .= '<button class="btn btn-xs btn-' . ($supplier->recommendation == 'yes' ? 'success' : 'primary') . '">' . $supplier->relSuppliers->name . ' (' . $supplier->relSuppliers->code . ') [' . ucwords($supplier->is_approved) . ']</button>&nbsp;';
                            }
                        }
                        return $suppliers;
                    })
                    ->filterColumn('suppliers', function ($query, $keyword) {
                        return $query->whereHas('relSelfQuotationSupplierByProposalId', function ($query) use ($keyword) {
                            return $query->whereIn('is_approved', (auth()->user()->hasRole('Purchase-Department') ? ['pending', 'pre-processing'] : ['pending', 'pre-processing']));
                        })
                            ->whereHas('relSelfQuotationSupplierByProposalId.relSuppliers', function ($query) use ($keyword) {
                                return $query->where(function ($query) use ($keyword) {
                                    return $query->where('name', 'LIKE', '%' . $keyword . '%')
                                        ->orWhere('code', 'LIKE', '%' . $keyword . '%');
                                });
                            });
                    })
                    ->orderColumn('suppliers', function ($query, $order) {
                        return pleaseSortMe($query, $order, Suppliers::select('suppliers.name')
                            ->whereColumn('suppliers.id', 'quotations.supplier_id')
                            ->take(1)
                        );
                    })

                    ->addColumn('approvals', function ($quotation) {
                        $approvals = '';
                        if(isset($quotation->relRequestProposal->approvals[0])){
                            foreach ($quotation->relRequestProposal->approvals as $key => $approval) {
                                $approvals .= '<button class="btn btn-xs btn-' . ($approval->response == 'pending' ? 'warning' : ($approval->response == 'approved' ? 'success' : 'danger')) . '">' . $approval->user->name . ' [' . ucwords($approval->response) . ']</button>&nbsp;';
                            }
                        }
                        
                        return $approvals;
                    })
                    ->filterColumn('approvals', function ($query, $keyword) {
                        return $query->whereHas('relRequestProposal.approvals.user', function ($query) use ($keyword) {
                                return $query->where('name', 'LIKE', '%' . $keyword . '%');
                            })
                            ->orWhereHas('relRequestProposal.approvals', function ($query) use ($keyword) {
                                return $query->where('status', 'LIKE', '%' . strtolower($keyword) . '%');
                            });
                    })
                    

                    ->addColumn('status', function ($values) {
                        $status = '';
                        $approvedCount = Quotations::where('request_proposal_id', $values->request_proposal_id)->where('is_approved', 'approved')->count();
                        if ($approvedCount > 0) {
                            $status .= '<a class="btn btn-xs btn-success">Approved Once</a>';
                        } else {
                            $status .= '<a class="btn btn-xs btn-warning">Waiting for Approval</a>';
                        }
                        return $status;
                    })
                    ->addColumn('actions', function ($values) use ($approvalRange, $options) {

                        $myApproval = $values->relRequestProposal->approvals->whereIn('response', ['pending', 'denied'])->where('user_id', auth()->user()->id)->first();
                        $available = (isset($myApproval->id));
                        $available = $available ? ($values->relRequestProposal->approvals->whereIn('response', ['pending', 'denied'])->where('priority', '<', $myApproval->priority)->count() == 0) : false;

                        $actions = '';
                        $count = 0;
                        if (isset($approvalRange[0])) {
                            foreach ($approvalRange as $range) {
                                if ($range->min_amount <= $values->relQuotationItems->sum('total_price') && $range->max_amount >= $values->relQuotationItems->sum('total_price')) {
                                    $count++;
                                }
                            }

                            if ($count >= 0) {
                                // if ($options['Management'] && $available) {
                                if ($available) {
                                    $actions .= '<a href="' . route('pms.quotation.quotations.cs.compare.view', ['id' => $values->request_proposal_id, 'slug' => 'list']) . '?type=direct-purchase"  title="Compare Process Analysis"  class="btn btn-success btn-xs"><i class="las la-list"></i></a>';
                                }
                            } else {
                                $actions .= '<a title="Out of Approval Range"  class="btn btn-danger btn-xs"><i class="las la-ban"></i></a>';
                            }
                        } else {
                            // if ($options['Management'] && $available) {
                            if ($available) {
                                $actions .= '<a href="' . route('pms.quotation.quotations.cs.compare.view', ['id' => $values->request_proposal_id, 'slug' => 'list']) . '?type=direct-purchase"  title="Compare Process Analysis"  class="btn btn-success btn-xs"><i class="las la-list"></i></a>';
                            }
                        }

                        $actions .= '<a target="__blank" href="' . route('pms.quotation.cs.history', $values->request_proposal_id) . '" class="btn btn-warning btn-xs ml-1" title=" CS History"><i class="las la-history"></i></a>';

                        return $actions;
                    })
                    ->rawColumns(['CS_number', 'suppliers', 'status', 'actions', 'requisitions', 'products', 'approvals'])
                    ->make(true);
            }

            return view('pms.backend.pages.quotation.estimate-index', ['title' => $title, 'headerColumns' => $this->approvalHeaderColumns()]);

        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function compareView($id, $slug)
    {
        if(request()->has('get-product-logs')){
            $approvals = RequestProposalApproval::with([
                'user'
            ])
            ->where('request_proposal_id', request()->get('request_proposal_id'))
            ->whereIn('response', ['approved', 'denied'])
            ->get();
            return view('pms.backend.pages.quotation.logs', [
                'approvals' => $approvals,
                'suppliers' => Suppliers::whereHas('relQuotations', function($query){
                    return $query->where('request_proposal_id', request()->get('request_proposal_id'));
                })->get(),
                'uid' => request()->get('uid')
            ]);
        }

        $title = 'Quotations Compare Analysis';
        $requestProposalId = $id;
        try {
            $quotations = Quotations::with([
                'relRequestProposal.createdBy',
                'relSuppliers.SupplierRatings',
                'exchangeRate.currency',
                'relSuppliers',
                'relQuotationItems.relProduct.category.category',
                'relQuotationItems.relProduct.productUnit',
                'relQuotationItems.relProduct.attributes.attributeOption.attribute',
            ])
            ->where([
                'status' => 'active',
                'request_proposal_id' => $id
            ])
            ->whereIn('is_approved', ['processing', 'halt'])
            ->orderby('gross_price', 'asc')
            ->get();

            $requisitionItems = RequisitionItem::with([
                'attributes.attributeOption.attribute'
            ])
            ->whereHas('requisition.requestProposalRequisition', function($query) use($requestProposalId){
                return $query->where('request_proposal_id', $requestProposalId);
            })
            ->get();

            $systemCurrency = systemCurrency();

            if ($slug == 'list') {
                return view('pms.backend.pages.quotation._compare_view_list', compact('title', 'quotations', 'requestProposalId', 'systemCurrency', 'requisitionItems'));
            } else {
                return view('pms.backend.pages.quotation._compare_view_grid', compact('title', 'quotations', 'requestProposalId', 'requisitionItems'));
            }
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function compareViewNotification($id)
    {
        try {
            $quotations = Quotations::with([
                'relRequestProposal.createdBy',
                'relSuppliers.SupplierRatings',
                'exchangeRate.currency',
                'relQuotationItems.relProduct.productUnit',
                'relQuotationItems.relProduct.category.category',
                'relQuotationItems.relProduct.attributes.attributeOption.attribute',
            ])->where([
                'status' => 'active',
                'request_proposal_id' => $id
            ])
                ->whereNotIn('is_approved', ['pending'])
                ->orderby('gross_price', 'asc')->get();

            $systemCurrency = systemCurrency();

            return view('pms.backend.pages.quotation._compare_view_list_notification', compact('quotations', 'systemCurrency'));
        } catch (\Throwable $th) {
            return $th->getMessage();
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function compareViewPdfView($id)
    {
        if(request()->has('get-product-logs')){
            $approvals = RequestProposalApproval::with([
                'user'
            ])
            ->where('request_proposal_id', request()->get('request_proposal_id'))
            ->whereIn('response', ['approved', 'denied'])
            ->get();
            return view('pms.backend.pages.quotation.logs', [
                'approvals' => $approvals,
                'suppliers' => Suppliers::whereHas('relQuotations', function($query){
                    return $query->where('request_proposal_id', request()->get('request_proposal_id'));
                })->get(),
                'uid' => request()->get('uid')
            ]);
        }
        
        try {
            $quotations = Quotations::with([
                'relRequestProposal.createdBy',
                'relSuppliers.SupplierRatings',
                'exchangeRate.currency',
                'relQuotationItems.relProduct.productUnit',
                'relQuotationItems.relProduct.category.category',
                'relQuotationItems.relProduct.attributes.attributeOption.attribute',
                'relRequestProposal.approvals.user'
            ])->where([
                'status' => 'active',
                'request_proposal_id' => $id
            ])
            ->whereNotIn('is_approved', ['pending'])
            ->orderby('gross_price', 'asc')
            ->get();

            $requisitionItems = RequisitionItem::with([
                'attributes.attributeOption.attribute'
            ])
            ->whereHas('requisition.requestProposalRequisition', function($query) use($id){
                return $query->where('request_proposal_id', $id);
            })
            ->get();

            $systemCurrency = systemCurrency();

            $quotationInfo = [];
            if (isset($quotations[0])) {
                foreach ($quotations as $quotation) {
                    $items = [];
                    $q_st = 0;
                    $q_est = 0;
                    $q_d = 0;
                    $q_ed = 0;
                    $q_v = 0;
                    $q_v_ex = 0;
                    $q_ev = 0;
                    $q_ev_ex = 0;
                    $thisExchangeRate = exchangeRate($quotation->exchangeRate, $systemCurrency->id);
                    if (isset($quotation->relQuotationItems[0])) {
                        foreach ($quotation->relQuotationItems as $item) {
                            $st = $item->approved_qty * $item->unit_price;
                            $est = $st * $thisExchangeRate;

                            $d = $st > 0 && $item->discount > 0 ? $st * ($item->discount / 100) : 0;
                            $ed = $d * $thisExchangeRate;

                            $after = $st - $d;

                            $v = $item->vat;
                            $ev = $v * $thisExchangeRate;

                            $q_st += $st;
                            $q_est += $est;
                            $q_d += $d;
                            $q_ed += $ed;
                            $q_v += $v;
                            $q_v_ex += ($item->vat_type == 'exclusive' ? $v : 0);
                            $q_ev += $ev;
                            $q_ev_ex += ($item->vat_type == 'exclusive' ? $ev : 0);

                            $items[$item->uid] = [
                                'approved_qty' => $item->approved_qty,
                                'unit_price' => $item->unit_price,
                                'sub_total' => $st,
                                'exchange_sub_total' => $est,
                            ];
                        }
                    }

                    $quotationInfo[$quotation->id] = [
                        'items' => $items,
                        'sub_total' => $q_st,
                        'exchange_sub_total' => $q_est,
                        'discount' => $q_d,
                        'exchange_discount' => $q_ed,
                        'vat' => $q_v,
                        'exchange_vat' => $q_ev,
                        'gross' => $q_st - $q_d + $q_v_ex,
                        'exchange_gross' => $q_est - $q_ed + $q_ev_ex,
                    ];
                }
            }

            $title = "CS View";
            $purchaseOrderId = $id;

            if (request()->has('downloadpdf')) {
                return viewMPDF('pms.backend.pages.quotation.compare_view_list_pdf_download', [
                    'title' => $title,
                    'quotations' => $quotations,
                    'systemCurrency' => $systemCurrency,
                    'quotationInfo' => $quotationInfo,
                    'requisitionItems' => $requisitionItems
                ], $title, $title, 'a3', 'L');
            }

            return view('pms.backend.pages.quotation.compare_view_list_pdf', compact('quotations', 'systemCurrency', 'title', 'purchaseOrderId', 'quotationInfo', 'requisitionItems'));
        } catch (\Throwable $th) {
            return $th->getMessage();
        }
    }


    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\JsonResponse
     */

    public function approved(Request $request)
    {
        $items = array_keys(collect($request->item_quantities)->filter(function (int $value, int $key) {
            return $value > 0;
        })->all());

        DB::beginTransaction();
        try {
            $proposal = RequestProposal::with([
                'requestProposalDetails', 'relQuotations'
            ])
            ->findOrFail($request->request_proposal_id);

            $quotationItems = QuotationsItems::with([
                'relQuotation.relRequestProposal'
            ])
            ->whereIn('id', $items)
            ->get();
            $quotations = [];
            $references = [];
            if ($quotationItems->count() > 0) {
                foreach ($quotationItems as $key => $quotationItem) {
                    if (isset($request->item_quantities[$quotationItem->id]) && $request->item_quantities[$quotationItem->id] > 0) {
                        $quotationItem->is_approved = 'approved';
                        $quotationItem->approved_qty = $request->item_quantities[$quotationItem->id];
                        $quotationItem->save();

                        RequestProposalApproval::where([
                            'request_proposal_id' => $quotationItem->relQuotation->request_proposal_id,
                            'user_id' => auth()->user()->id,
                        ])
                        ->update([
                            'response' => 'approved',
                            'logs' => json_encode(Quotations::with(['relQuotationItems'])->whereIn('id', $quotationItems->pluck('quotation_id')->toArray())->get()),
                        ]);

                        $count = RequestProposalApproval::where('request_proposal_id', $quotationItem->relQuotation->request_proposal_id)->whereIn('response', ['pending', 'denied'])->count();
                        if($count == 0){
                            $quotationItem->relQuotation->is_approved = 'approved';
                        }

                        $quotationItem->relQuotation->remarks = $request->remarks;
                        $quotationItem->relQuotation->save();

                        if($count == 0){
                            array_push($references, $quotationItem->relQuotation->reference_no);
                            array_push($quotations, $quotationItem->relQuotation->id);
                        }
                    }
                }
            }

            $count = RequestProposalApproval::where('request_proposal_id', $quotationItem->relQuotation->request_proposal_id)->whereIn('response', ['pending', 'denied'])->count();
            if($count == 0){
                $quotations = Quotations::whereIn('id', $quotations)
                ->where('type', 'direct-purchase')
                ->get();
                if (isset($quotations[0])) {
                    foreach ($quotations as $key => $quotation) {
                        $purchaseOrder = $this->directPurchaseStore($quotation, $request->cost_centre_id);
                        if ($purchaseOrder) {
                            $message = '<span class="notification-links" data-src="' . route('pms.purchase.order-list.show', $purchaseOrder->id) . '?view" data-title="Purchase Order Details">Reference No:' . $purchaseOrder->reference_no . '. Request for cash approved.</span>';
                            CreateOrUpdateNotification($message, 'unread', '', getManagerInfo('Accounts', null, true), 'send-to-accounts');
                        }
                    }
                }
            }
            

            if(isset($references[0])){
                $message = '<span class="notification-links" data-src="' . url('pms/quotation/cs-compare-view-notification/' . $request->request_proposal_id) . '" data-title="Quotation CS">References (' . implode(', ', $references) . ') Approved By Management.</span>';
                CreateOrUpdateNotification($message, 'unread', '', getManagerInfo('Purchase-Department', null, true), 'sent-to-purchase');
            }

            DB::commit();
            session()->flash('alert-type', 'success');
            session()->flash('message', 'CS approved successfully.');
            return response()->json([
                'success' => true,
                'url' => (isset($proposal->relQuotations[0]->type) && $proposal->relQuotations[0]->type == 'direct-purchase' ? route('pms.quotation.quotations.estimate.approval.list') : route('pms.quotation.approval.list'))
            ]);
        } catch (Throwable $th) {
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */


    public function rejectAll($id)
    {

        $type = (request()->has('type')) ? request()->get('type') : '';

        DB::beginTransaction();
        try {
            $proposal = RequestProposal::findOrFail($id);

            $quotation = Quotations::where('request_proposal_id', $id)
            ->where('is_po_generate', 'no')
            ->whereNotIn('is_approved', ['pending'])
            ->when($type == 'direct-purchase', function ($query) {
                return $query->where('type', 'direct-purchase');
            })
            ->when($type != 'direct-purchase', function ($query) {
                return $query->whereNotIn('type', ['direct-purchase']);
            })
            ->update([
                'is_approved' => 'halt'
            ]);

            RequestProposalApproval::where([
                'request_proposal_id' => $proposal->id,
                'user_id' => auth()->user()->id,
            ])
            ->update([ 
                'response' => 'denied',
                'updated_by' => auth()->user()->id
            ]);

            $message = '<span class="notification-links" data-src="' . url('pms/quotation/cs-compare-view-notification/' . $id) . '" data-title="Quotation CS">Reference No:' . $proposal->reference_no . '. Rejected All By Management.</span>';

            CreateOrUpdateNotification($message, 'unread', '', getManagerInfo('Purchase-Department', null, true), 'sent-to-purchase');

            DB::commit();

            if ($type == 'direct-purchase') {
                return $this->redirectBackWithSuccess('Successfully Rejected!!', 'pms.quotation.quotations.estimate.reject.list');
            }

            return $this->redirectBackWithSuccess('Successfully Rejected!!', 'pms.quotation.quotations.reject.list');

        } catch (Throwable $th) {
            DB::rollback();
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function directPurchaseStore($quotation, $cost_centre_id)
    {
        $requisition = isset($quotation->relRequestProposal->requestProposalRequisition[0]) ? $quotation->relRequestProposal->requestProposalRequisition[0]->relRequisition : false;

        if ($requisition) {

            $prefix = 'IJO-' . date('y', strtotime(date('Y-m-d'))) . '-' . unitName($requisition->hr_unit_id)->hr_unit_short_name . '-';
            $refNo = uniqueCode(17, $prefix, 'purchase_orders', 'id');

            $po_data = new PurchaseOrder();
            $po_data->quotation_id = $quotation->id;
            $po_data->hr_unit_id = $requisition->hr_unit_id;
            $po_data->reference_no = $refNo;
            $po_data->po_date = date('Y-m-d h:i:s');
            $po_data->remarks = $quotation->remarks;
            $po_data->cost_centre_id = $cost_centre_id;
            $po_data->save();

            $poSubTotal = 0;
            $poVat = 0;
            $poGrossTotal = 0;

            $collectProductId = [];
            if ($quotation->relQuotationItems->where('is_approved', 'approved')->count() > 0) {
                foreach ($quotation->relQuotationItems->where('is_approved', 'approved') as $key => $values) {
                    $discount = ($values->discount > 0 ? $values->unit_price * ($values->discount / 100) : 0);
                    $unit_price = systemDoubleValue($values->unit_price - $discount);

                    $poQty = $values->approved_qty;
                    $subTotal = $unit_price * $poQty;
                    $poSubTotal += $subTotal;

                    $vatAmount = systemDoubleValue($values->vat_percentage > 0 ? $subTotal * ($values->vat_percentage / 100) : 0);
                    $poVat += $vatAmount;

                    $grossTotal = systemDoubleValue($subTotal + ($values->vat_type != 'inclusive' ? $vatAmount : 0));
                    $poGrossTotal += $grossTotal;

                    $po_items = new PurchaseOrderItem();
                    $po_items->po_id = $po_data->id;
                    $po_items->uid = $values->uid;
                    $po_items->product_id = $values->product_id;
                    $po_items->unit_price = $unit_price;
                    $po_items->qty = $poQty;
                    $po_items->sub_total_price = $subTotal;
                    $po_items->discount_percentage = 0;
                    $po_items->discount = 0;
                    $po_items->vat_percentage = $values->vat_percentage;
                    $po_items->vat_type = $values->vat_type;
                    $po_items->vat = $vatAmount;
                    $po_items->total_price = $grossTotal;
                    $po_items->save();

                    array_push($collectProductId, $values->uid);
                }
            }

            //Update Purchase Order
            $po_data->update([
                'total_price' => $poSubTotal,
                'discount' => 0,
                'vat' => $poVat,
                'gross_price' => $poGrossTotal,
            ]);

            if ($quotation->relSupplierPaymentTerm->type == 'paid') {
                //Add Supplier Payments
                $pay_amount = ($quotation->relSupplierPaymentTerm->payment_percent > 0 ? ($poGrossTotal * ($quotation->relSupplierPaymentTerm->payment_percent / 100)) : 0);
                if ($pay_amount > 0) {
                    $duration_date = $quotation->relSupplierPaymentTerm->day_duration;
                    $pay_date = date('Y-m-d h:i:s', strtotime('+' . $duration_date . ' day', strtotime($po_data->po_date)));
                    //Payment date based on advance & due
                    $supplier_payment = new SupplierPayment();
                    $supplier_payment->supplier_id = $quotation->supplier_id;
                    $supplier_payment->purchase_order_id = $po_data->id;
                    $supplier_payment->transection_date = date('Y-m-d h:i:s');
                    $supplier_payment->transection_type = 'purchase';
                    $supplier_payment->exchange_rate_id = $quotation->exchange_rate_id;
                    $supplier_payment->bill_number = $po_data->reference_no;
                    $supplier_payment->pay_amount = $pay_amount;
                    $supplier_payment->pay_date = $pay_date;
                    $supplier_payment->bill_type = 'po-advance';
                    $supplier_payment->save();

                    //Notification send to accounts
                    $message = '<span class="notification-links"  data-title="Purchase Order Details">Reference No:' . $po_data->reference_no . '. A PO has been submitted with an advance amount of TK ' . $supplier_payment->pay_amount . '</span>';

                    CreateOrUpdateNotification($message, 'unread', '', getManagerInfo('Accounts', null, true), 'send-to-accounts');
                }
            }

            //Update requisition
            $requisition->items()->whereIn('uid', $collectProductId)->where('is_send', 'yes')
            ->where('po_generate', 'no')
            ->update([
                'po_generate' => 'yes'
            ]);
            //update quotation
            $quotation->update([
                'is_po_generate' => 'yes'
            ]);

            $uncommon = Category::doesntHave('category')->where('type', 'uncommon')
            ->whereHas('subCategory.products', function ($query) use ($requisition) {
                return $query->where('id', $requisition->items->pluck('product_id')->toArray());
            })
            ->count();

            PurchaseOrderRequisition::updateOrCreate([
                'purchase_order_id' => $po_data->id,
                'requisition_id' => $requisition->id,
            ], [
                'hr_department_id' => $uncommon > 0 ? $requisition->relUsersList->employee->as_department_id : 0,
            ]);

            //Requisition tracking with requisition id
            RequisitionTracking::storeRequisitionTracking($requisition->id, 'PO-Issue');

            return $po_data;
        }

        return false;

    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     * @return \Illuminate\Http\Response
     */

    public function toggleQuotationStatus(Request $request)
    {
        $quotation = Quotations::where('id', $request->id)->first();

        if (isset($quotation->id)) {
            $newStatus = $request->status;
            $newText = $newStatus == 'approved' ? 'Approved' : (($newStatus == 'halt') ? 'Halt' : 'Pending');
            $update = $quotation->update(['is_approved' => $newStatus, 'updated_at' => date('Y-m-d H:i:s'), 'updated_by' => Auth::user()->id]);
            if ($update) {
                return response()->json([
                    'success' => true,
                    'new_text' => $newText,
                    'message' => 'Data has been updated!'
                ]);
            }
            return response()->json([
                'success' => false,
                'message' => 'Something Went Wrong!'
            ]);
        }
        return response()->json([
            'success' => false,
            'message' => 'Data not found!'
        ]);
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */


    public function haltStatus(Request $request)
    {
        $quotation = Quotations::findOrFail($request->id);
        try {
            $quotation->update([
                'remarks' => $request->remarks,
                'is_approved' => 'halt',
                'updated_at' => date('Y-m-d H:i:s'),
                'updated_by' => Auth::user()->id
            ]);
            return $this->backWithSuccess('Quotation Successfully Halt!!');
        } catch (\Throwable $th) {

            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function search(Request $request)
    {
        $response = [];

        $from_date = date('Y-m-d', strtotime($request->from_date));
        $to_date = date('Y-m-d', strtotime($request->to_date));

        $is_approved = $request->is_approved;
        $is_po_generate = $request->is_po_generate;

        $datas = Quotations::whereDate('quotation_date', '>=', $from_date)
            ->whereDate('quotation_date', '<=', $to_date)
            ->when($is_approved, function ($query) use ($is_approved) {
                return $query->where('is_approved', $is_approved);
            })
            ->when($is_po_generate, function ($query) use ($is_po_generate) {
                return $query->where('is_po_generate', $is_po_generate);
            })
            ->where('status', 'active')
            ->where('type', '!=', 'direct-purchase')
            ->orderBy('id', 'desc')
            ->paginate(100);

        $quotationList = [];
        foreach ($datas as $data) {
            foreach (Auth::user()->relApprovalRange as $range) {
                if ($range->min_amount <= $data->relQuotationItems->sum('total_price') && $range->max_amount >= $data->relQuotationItems->sum('total_price')) {
                    $quotationList[] = $data;
                }
            }
        }
        $quotationList = $this->paginate($quotationList, 100);

        try {
            if (count($quotationList) > 0) {
                $body = \Illuminate\Support\Facades\View::make('pms.backend.pages.quotation._quotation-list-search',
                    ['quotationList' => $quotationList]);
                $contents = $body->render();

                $response['result'] = 'success';
                $response['body'] = $contents;
            } else {

                $response['result'] = 'error';
                $response['message'] = 'Data not found.!!';
            }

        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }

        return $response;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function gpListHeaderColumns($value = '')
    {
        return array(
            ['SL', 'SL'],
            ['date', 'quotation_date', 'text-center'],
            ['delivery_date', 'delivery_date', 'text-center'],
            ['CS_number', 'CS_number', 'text-center'],
            ['requisitions', 'requisitions', 'text-center'],
            ['products', 'products', 'text-center'],
            ['reference_no', 'reference_no'],
            ['supplier', 'supplier', 'text-left'],
            ['approvals', 'approvals', 'text-center'],
            ['actions', 'actions', 'text-center action']
        );
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function generatePoList()
    {
        $title = 'Quotations Approved List';

        try {

            $quotationList = Quotations::with([
                'relRequestProposal.approvals.user',
                'relSuppliers',
                'relSelfQuotationSupplierByProposalId.relSuppliers',
                'exchangeRate.currency'
            ])
            ->whereHas('relSuppliers', function($query){
                return $query->whereNotIn('name', ignoreSuppliers());
            })
            ->when(auth()->user()->hasRole(['Purchase-Department', 'Purchase-Employee']), function($query){
                return $query->whereHas('relRequestProposal.requestProposalRequisition.relRequisition', function($query){
                    return $query->where('assigned_user_id', auth()->user()->id);
                });
            })
            ->whereHas('relRequestProposal.requestProposalRequisition.relRequisition', function($query){
                return $query->whereIn('hr_unit_id', auth()->user()->priorities->pluck('hr_unit_id')->toArray());
            })
            ->where([
                'status' => 'active',
                'is_approved' => 'approved',
                'is_po_generate' => 'no'
            ])
            ->whereNotIn('type', ['direct-purchase'])
            ->when(!datatableOrdering(), function ($query) {
                return $query->orderby('id', 'desc');
            });

            $options = [
                'quotation-halt' => auth()->user()->hasPermissionTo('quotation-halt'),
                'generate-po' => auth()->user()->hasPermissionTo('generate-po')
            ];

            if (request()->ajax()) {
                return DataTables::of($quotationList)
                    ->addIndexColumn()
                    ->addColumn('date', function ($values) {
                        return date('Y-m-d', strtotime($values->quotation_date));
                    })
                    ->filterColumn('date', function ($query, $keyword) {
                        return $query->where('quotation_date', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('date', function ($query, $order) {
                        return $query->orderBy('quotation_date', $order);
                    })
                    ->addColumn('delivery_date', function ($values) {
                        return !empty($values->delivery_date) ? date('Y-m-d', strtotime($values->delivery_date)) : '';
                    })
                    ->filterColumn('delivery_date', function ($query, $keyword) {
                        return $query->where('delivery_date', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('delivery_date', function ($query, $order) {
                        return $query->orderBy('delivery_date', $order);
                    })
                    ->addColumn('CS_number', function ($values) {
                        return '<a href="javascript:void(0)" class="btn btn-link" onclick="requestProposalDetails(' . $values->relRequestProposal->id . ')">' . (isset($values->relRequestProposal->reference_no) ? $values->relRequestProposal->reference_no : '') . '</a>';
                    })
                    ->filterColumn('CS_number', function ($query, $keyword) {
                        return $query->whereHas('relRequestProposal', function ($query) use ($keyword) {
                            $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('CS_number', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequestProposal::select('request_proposals.reference_no')
                            ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('requisitions', function ($quotation) {
                        $requisitions = '';

                        if ($quotation->relRequestProposal->requestProposalRequisition->count() > 0) {
                            foreach ($quotation->relRequestProposal->requestProposalRequisition as $key => $requisition) {
                                $requisitions .= ($key > 0 ? ', ' : '') . '<a href="javascript:void(0)" data-src="' . route('pms.requisition.list.view.show', $requisition->relRequisition->id) . '" class="text-primary requisition m-1 rounded showRequistionDetails" onclick="requistionDetails($(this))">' . $requisition->relRequisition->reference_no . '</a>';
                            }
                        }

                        return $requisitions;
                    })
                    ->filterColumn('requisitions', function ($query, $keyword) {
                        $query->whereHas('relRequestProposal.requestProposalRequisition.relRequisition', function ($query) use ($keyword) {
                            return $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('requisitions', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequestProposal::select('requisitions.reference_no')
                            ->join('requisitions', 'requisitions.id', '=', 'request_proposal_requisitions.requisition_id')
                            ->join('request_proposal_requisitions', 'request_proposal_requisitions.request_proposal_id', '=', 'request_proposals.id')
                            ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('products', function ($quotation) {
                        $products = '';
                        $sl = 0;
                        $array = [];
                        if ($quotation->relRequestProposal->requestProposalDetails->count() > 0) {
                            foreach ($quotation->relRequestProposal->requestProposalDetails as $key => $product) {
                                if(!in_array($product->product->id, $array)){
                                    $sl++;
                                    $products .= ($sl > 1 ? ', ' : '') . $product->product->name . ' ' . getProductAttributesFaster($product->product);
                                    array_push($array, $product->product->id);
                                }
                            }
                        }

                        return $products;
                    })
                    ->filterColumn('products', function ($query, $keyword) {
                        return $query->where(function ($query) use ($keyword) {
                            return $query->where(function ($query) use ($keyword) {
                                return $query->whereHas('relRequestProposal.requestProposalDetails.product', function ($query) use ($keyword) {
                                    return $query->where('name', 'LIKE', '%' . $keyword . '%');
                                });
                            })
                                ->orWhere(function ($query) use ($keyword) {
                                    return $query->whereHas('relRequestProposal.requestProposalDetails.product.attributes.attributeOption', function ($query) use ($keyword) {
                                        $query->where('name', 'LIKE', '%' . $keyword . '%');
                                    })
                                        ->orWhereHas('relRequestProposal.requestProposalDetails.product.attributes.attributeOption.attribute', function ($query) use ($keyword) {
                                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                                        });
                                });
                        });

                    })
                    ->orderColumn('products', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequestProposal::select('products.name')
                            ->join('products', 'products.id', '=', 'request_proposal_details.product_id')
                            ->join('request_proposal_details', 'request_proposal_details.request_proposal_id', '=', 'request_proposals.id')
                            ->join('request_proposal_requisitions', 'request_proposal_requisitions.request_proposal_id', '=', 'request_proposals.id')
                            ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('reference_no', function ($values) {
                        return '<a href="javascript:void(0)" onclick="openModal(' . $values->id . ')"  class="btn btn-link">' . $values->reference_no . '</a>';
                    })
                    ->filterColumn('reference_no', function ($query, $keyword) {
                        return $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                    })
                    ->addColumn('supplier', function ($values) {
                        return '<button class="btn btn-sm btn-xs mr-1 ' . ($values->is_approved == 'halt' ? ' btn-warning' : 'btn-success') . '">' . $values->relSuppliers->name . ' (' . $values->relSuppliers->code . ')</button>';
                    })
                    ->filterColumn('supplier', function ($query, $keyword) {
                        return $query->whereHas('relSuppliers', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%')->orWhere('code', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('supplier', function ($query, $order) {
                        return pleaseSortMe($query, $order, Suppliers::select('suppliers.name')
                            ->whereColumn('suppliers.id', 'quotations.supplier_id')
                            ->take(1)
                        );
                    })

                    ->addColumn('approvals', function ($quotation) {
                        $approvals = '';
                        if(isset($quotation->relRequestProposal->approvals[0])){
                            foreach ($quotation->relRequestProposal->approvals as $key => $approval) {
                                $approvals .= '<button class="btn btn-xs btn-' . ($approval->response == 'pending' ? 'warning' : ($approval->response == 'approved' ? 'success' : 'danger')) . ' mb-1">' . $approval->user->name . ' [' . ucwords($approval->response) . ']</button>&nbsp;';
                            }
                        }
                        
                        return $approvals;
                    })
                    ->filterColumn('approvals', function ($query, $keyword) {
                        return $query->whereHas('relRequestProposal.approvals.user', function ($query) use ($keyword) {
                                return $query->where('name', 'LIKE', '%' . $keyword . '%');
                            })
                            ->orWhereHas('relRequestProposal.approvals', function ($query) use ($keyword) {
                                return $query->where('status', 'LIKE', '%' . strtolower($keyword) . '%');
                            });
                    })

                    ->addColumn('actions', function ($values) use ($options) {
                        $actions = '';

                        $actions .= '<div class="btn-group"><button class="btn dropdown-toggle" data-toggle="dropdown"><span id="statusName' . $values->id . '">' . ucfirst($values->is_approved) . '</span></button><ul class="dropdown-menu">';

                        $actions .= '<li><a href="javascript:void(0)" onclick="openModal(' . $values->id . ')">Show</a></li>';

                        if ($values->is_approved === 'approved') {
                            if ($options['quotation-halt']) {
                                $actions .= '<li><a class="requisitionApprovedBtn" onclick="requisitionApprovedBtn($(this))" data-id="' . $values->id . '" data-status="halt">Halt</a></li>';
                            }

                            if ($options['generate-po']) {
                                $actions .= '<li><a href="' . route('pms.quotation.generate.po.process', $values->id) . '">Generate PO</a></li>';
                                if ($values->relPurchaseOrder) {

                                    $actions .= '<li><a class="completeQuotation" onclick="completeQuotation($(this))" data-id="' . $values->id . '" data-status="completeQuotation">Complete</a></li>';
                                }
                            }
                        }

                        $actions .= '<li><a target="__blank" href="' . url('pms/quotation/cs-compare-view-pdf/' . $values->request_proposal_id) . '" data-title="Quotation CS">CS View</a></li>';

                        $actions .= '<li><a target="__blank" href="' . route('pms.quotation.cs.history', $values->request_proposal_id) . '" data-title="Quotation CS">CS History</a></li>';

                        $actions .= '</ul></div>';

                        return $actions;
                    })
                    ->rawColumns(['CS_number', 'requisitions', 'supplier', 'reference_no', 'approvals', 'actions'])
                    ->make(true);
            }

            return view('pms.backend.pages.quotation.generate-po-list', ['title' => $title, 'headerColumns' => $this->gpListHeaderColumns()]);

        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function quotationRejectList()
    {
        $title = 'Quotations Rejected List';

        try {

            $quotationList = Quotations::with([
                'relRequestProposal',
                'relSelfQuotationSupplierByProposalId.relSuppliers',
                'relSuppliers',
                'relRequestProposal.approvals.user',

                'relRequestProposal.requestProposalRequisition.relRequisition',
                'relRequestProposal.requestProposalDetails.product.attributes.attributeOption.attribute'
            ])
            ->when(!auth()->user()->hasAnyRole(['Purchase-Department', 'Audit', 'Billing', 'Management', 'Accounts']), function($query){
                return $query->whereHas('relRequestProposal.requestProposalRequisition.relRequisition', function($query){
                    return $query->where('assigned_user_id', auth()->user()->id);
                });
            })
            ->where([
                'status' => 'active', 'is_approved' => 'halt', 'is_po_generate' => 'no'
            ])
            ->where('type', '!=', 'direct-purchase')
            ->when(!datatableOrdering(), function ($query) {
                return $query->orderby('id', 'desc');
            })
            ->groupBy('request_proposal_id');

            if (request()->ajax()) {
                $options = [
                    'quotation-halt' => auth()->user()->hasPermissionTo('quotation-halt')
                ];

                return DataTables::of($quotationList)
                    ->addIndexColumn()
                    ->addColumn('date', function ($values) {
                        return date('Y-m-d', strtotime($values->quotation_date));
                    })
                    ->filterColumn('date', function ($query, $keyword) {
                        return $query->where('quotation_date', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('date', function ($query, $order) {
                        return $query->orderBy('quotation_date', $order);
                    })
                    ->addColumn('delivery_date', function ($values) {
                        return !empty($values->delivery_date) ? date('Y-m-d', strtotime($values->delivery_date)) : '';
                    })
                    ->filterColumn('delivery_date', function ($query, $keyword) {
                        return $query->where('delivery_date', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('delivery_date', function ($query, $order) {
                        return $query->orderBy('delivery_date', $order);
                    })
                    ->addColumn('CS_number', function ($values) {
                        return '<a href="javascript:void(0)" class="btn btn-link" onclick="requestProposalDetails(' . $values->relRequestProposal->id . ')">' . (isset($values->relRequestProposal->reference_no) ? $values->relRequestProposal->reference_no : '') . '</a>';
                    })
                    ->filterColumn('CS_number', function ($query, $keyword) {
                        return $query->whereHas('relRequestProposal', function ($query) use ($keyword) {
                            $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('CS_number', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequestProposal::select('request_proposals.reference_no')
                            ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('reference_no', function ($values) {
                        return '<a href="javascript:void(0)" onclick="openModal(' . $values->id . ')"  class="btn btn-link">' . $values->reference_no . '</a>';
                    })
                    ->filterColumn('reference_no', function ($query, $keyword) {
                        return $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                    })
                    ->addColumn('supplier', function ($values) {
                        $data = '';
                        if ($values->relSelfQuotationSupplierByProposalId) {
                            foreach ($values->relSelfQuotationSupplierByProposalId->where('is_approved', 'halt') as $supplier) {

                                $data .= '<button class="btn btn-sm btn-xs mr-1 ' . ($supplier->is_approved == 'halt' ? ' btn-warning' : 'btn-success') . '">' . $supplier->relSuppliers->name . ' (' . $supplier->relSuppliers->code . ')</button>';
                            }
                        }

                        return $data;
                    })
                    ->filterColumn('supplier', function ($query, $keyword) {
                        return $query->whereHas('relSuppliers', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%')->orWhere('code', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('supplier', function ($query, $order) {
                        return pleaseSortMe($query, $order, Suppliers::select('suppliers.name')
                            ->whereColumn('suppliers.id', 'quotations.supplier_id')
                            ->take(1)
                        );
                    })

                    ->addColumn('requisitions', function ($quotation) {
                        $requisitions = '';

                        if ($quotation->relRequestProposal->requestProposalRequisition->count() > 0) {
                            foreach ($quotation->relRequestProposal->requestProposalRequisition as $key => $requisition) {
                                $requisitions .= ($key > 0 ? ', ' : '') . '<a href="javascript:void(0)" data-src="' . route('pms.requisition.list.view.show', $requisition->relRequisition->id) . '" class="text-primary requisition m-1 rounded showRequistionDetails" onclick="requistionDetails($(this))">' . $requisition->relRequisition->reference_no . '</a>';
                            }
                        }

                        return $requisitions;
                    })
                    ->filterColumn('requisitions', function ($query, $keyword) {
                        $query->whereHas('relRequestProposal.requestProposalRequisition.relRequisition', function ($query) use ($keyword) {
                            return $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('requisitions', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequestProposal::select('requisitions.reference_no')
                            ->join('requisitions', 'requisitions.id', '=', 'request_proposal_requisitions.requisition_id')
                            ->join('request_proposal_requisitions', 'request_proposal_requisitions.request_proposal_id', '=', 'request_proposals.id')
                            ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('products', function ($quotation) {
                        $products = '';
                        $sl = 0;
                        if ($quotation->relRequestProposal->requestProposalDetails->count() > 0) {
                            foreach ($quotation->relRequestProposal->requestProposalDetails as $key => $product) {
                                if (isset($product->product->name)) {
                                    $sl++;
                                    $products .= ($sl > 1 ? ', ' : '') . $product->product->name . ' ' . getProductAttributesFaster($product->product);
                                }
                            }
                        }

                        return $products;
                    })
                    ->filterColumn('products', function ($query, $keyword) {
                        return $query->where(function ($query) use ($keyword) {
                            return $query->where(function ($query) use ($keyword) {
                                return $query->whereHas('relRequestProposal.requestProposalDetails.product', function ($query) use ($keyword) {
                                    return $query->where('name', 'LIKE', '%' . $keyword . '%');
                                });
                            })
                                ->orWhere(function ($query) use ($keyword) {
                                    return $query->whereHas('relRequestProposal.requestProposalDetails.product.attributes.attributeOption', function ($query) use ($keyword) {
                                        $query->where('name', 'LIKE', '%' . $keyword . '%');
                                    })
                                        ->orWhereHas('relRequestProposal.requestProposalDetails.product.attributes.attributeOption.attribute', function ($query) use ($keyword) {
                                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                                        });
                                });
                        });

                    })
                    ->orderColumn('products', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequestProposal::select('products.name')
                            ->join('products', 'products.id', '=', 'request_proposal_details.product_id')
                            ->join('request_proposal_details', 'request_proposal_details.request_proposal_id', '=', 'request_proposals.id')
                            ->join('request_proposal_requisitions', 'request_proposal_requisitions.request_proposal_id', '=', 'request_proposals.id')
                            ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                            ->take(1)
                        );
                    })

                    ->addColumn('approvals', function ($quotation) {
                        $approvals = '';
                        if(isset($quotation->relRequestProposal->approvals[0])){
                            foreach ($quotation->relRequestProposal->approvals as $key => $approval) {
                                $approvals .= '<button class="btn btn-xs btn-' . ($approval->response == 'pending' ? 'warning' : ($approval->response == 'approved' ? 'success' : 'danger')) . '">' . $approval->user->name . ' [' . ucwords($approval->response) . ']</button>&nbsp;';
                            }
                        }
                        
                        return $approvals;
                    })
                    ->filterColumn('approvals', function ($query, $keyword) {
                        return $query->whereHas('relRequestProposal.approvals.user', function ($query) use ($keyword) {
                                return $query->where('name', 'LIKE', '%' . $keyword . '%');
                            })
                            ->orWhereHas('relRequestProposal.approvals', function ($query) use ($keyword) {
                                return $query->where('status', 'LIKE', '%' . strtolower($keyword) . '%');
                            });
                    })

                    ->addColumn('actions', function ($values) use ($options) {

                        $myApproval = $values->relRequestProposal->approvals->whereIn('response', ['pending', 'denied'])->where('user_id', auth()->user()->id)->first();
                        $available = (isset($myApproval->id));
                        $available = $available ? ($values->relRequestProposal->approvals->whereIn('response', ['pending', 'denied'])->where('priority', '<', $myApproval->priority)->count() == 0) : false;

                        $actions = '';

                        $actions .= '<div class="btn-group"><button class="btn dropdown-toggle" data-toggle="dropdown"><span id="statusName' . $values->id . '">' . ucfirst($values->is_approved) . '</span></button><ul class="dropdown-menu">';

                        $actions .= '<li><a target="__blank" href="' . url('pms/quotation/cs-compare-view-pdf/' . $values->request_proposal_id) . '" data-title="Quotation CS">CS View</a></li>';

                        $actions .= '<li><a target="__blank" href="' . route('pms.quotation.cs.history', $values->request_proposal_id) . '" data-title="Quotation CS">CS History</a></li>';

                        $actions .= '</ul></div>';

                        if ($options['quotation-halt'] && $available) {
                            $actions .= '<a href="' . route('pms.quotation.quotations.cs.compare.view', ['id' => $values->relRequestProposal->id, 'slug' => 'list']) . '?type=rfp"  title="Compare Process Analysis" class="btn btn-success btn-xs"><i class="las la-list"></i></a>';
                        }

                        return $actions;
                    })
                    ->rawColumns(['CS_number', 'supplier', 'reference_no', 'requisitions', 'approvals', 'actions'])
                    ->make(true);
            }

            return view('pms.backend.pages.quotation.rejected-list', ['title' => $title, 'headerColumns' => $this->gpListHeaderColumns()]);

        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function estimateRejectList()
    {
        $title = 'Estimate Rejected List';

        try {
            $quotationList = Quotations::with([
                'relQuotationItems',
                'relRequestProposal',
                'relSuppliers',
                'exchangeRate.currency',
                'relSelfQuotationSupplierByProposalId.relSuppliers'
            ])
                ->where([
                    'status' => 'active',
                    'is_approved' => 'halt',
                    'is_po_generate' => 'no'
                ])
                ->whereHas('relRequestProposal.requestProposalRequisition.relRequisition', function($query){
                    return $query->whereIn('hr_unit_id', auth()->user()->priorities->pluck('hr_unit_id')->toArray());
                })
                ->where('type', 'direct-purchase')
                ->when(!datatableOrdering(), function ($query) {
                    return $query->orderby('id', 'desc');
                });

            if (request()->ajax()) {
                $options = [
                    'quotation-halt' => auth()->user()->hasPermissionTo('quotation-halt')
                ];

                return DataTables::of($quotationList)
                    ->addIndexColumn()
                    ->addColumn('date', function ($values) {
                        return date('Y-m-d', strtotime($values->quotation_date));
                    })
                    ->filterColumn('date', function ($query, $keyword) {
                        $query->where('quotation_date', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('date', function ($query, $order) {
                        return $query->orderBy('quotation_date', $order);
                    })
                    ->addColumn('delivery_date', function ($values) {
                        return !empty($values->delivery_date) ? date('Y-m-d', strtotime($values->delivery_date)) : '';
                    })
                    ->filterColumn('delivery_date', function ($query, $keyword) {
                        $query->where('delivery_date', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('delivery_date', function ($query, $order) {
                        return $query->orderBy('delivery_date', $order);
                    })
                    ->addColumn('CS_number', function ($values) {
                        return '<a href="javascript:void(0)" class="btn btn-link" onclick="requestProposalDetails(' . $values->relRequestProposal->id . ')">' . (isset($values->relRequestProposal->reference_no) ? $values->relRequestProposal->reference_no : '') . '</a>';
                    })
                    ->filterColumn('CS_number', function ($query, $keyword) {
                        return $query->whereHas('relRequestProposal', function ($query) use ($keyword) {
                            $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('CS_number', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequestProposal::select('request_proposals.reference_no')
                            ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('requisitions', function ($quotation) {
                        $requisitions = '';

                        if ($quotation->relRequestProposal->requestProposalRequisition->count() > 0) {
                            foreach ($quotation->relRequestProposal->requestProposalRequisition as $key => $requisition) {
                                $requisitions .= ($key > 0 ? ', ' : '') . '<a href="javascript:void(0)" data-src="' . route('pms.requisition.list.view.show', $requisition->relRequisition->id) . '" class="text-primary requisition m-1 rounded showRequistionDetails" onclick="requistionDetails($(this))">' . $requisition->relRequisition->reference_no . '</a>';
                            }
                        }

                        return $requisitions;
                    })
                    ->filterColumn('requisitions', function ($query, $keyword) {
                        $query->whereHas('relRequestProposal.requestProposalRequisition.relRequisition', function ($query) use ($keyword) {
                            return $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('requisitions', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequestProposal::select('requisitions.reference_no')
                            ->join('requisitions', 'requisitions.id', '=', 'request_proposal_requisitions.requisition_id')
                            ->join('request_proposal_requisitions', 'request_proposal_requisitions.request_proposal_id', '=', 'request_proposals.id')
                            ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('products', function ($quotation) {
                        $products = '';
                        if ($quotation->relRequestProposal->requestProposalDetails->count() > 0) {
                            foreach ($quotation->relRequestProposal->requestProposalDetails as $key => $product) {
                                $products .= ($key > 0 ? ', ' : '') . $product->product->name . ' ' . getProductAttributesFaster($product->product);
                            }
                        }

                        return $products;
                    })
                    ->filterColumn('products', function ($query, $keyword) {
                        return $query->where(function ($query) use ($keyword) {
                            return $query->where(function ($query) use ($keyword) {
                                return $query->whereHas('relRequestProposal.requestProposalDetails.product', function ($query) use ($keyword) {
                                    return $query->where('name', 'LIKE', '%' . $keyword . '%');
                                });
                            })
                                ->orWhere(function ($query) use ($keyword) {
                                    return $query->whereHas('relRequestProposal.requestProposalDetails.product.attributes.attributeOption', function ($query) use ($keyword) {
                                        $query->where('name', 'LIKE', '%' . $keyword . '%');
                                    })
                                        ->orWhereHas('relRequestProposal.requestProposalDetails.product.attributes.attributeOption.attribute', function ($query) use ($keyword) {
                                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                                        });
                                });
                        });

                    })
                    ->orderColumn('products', function ($query, $order) {
                        return pleaseSortMe($query, $order, RequestProposal::select('products.name')
                            ->join('products', 'products.id', '=', 'request_proposal_details.product_id')
                            ->join('request_proposal_details', 'request_proposal_details.request_proposal_id', '=', 'request_proposals.id')
                            ->join('request_proposal_requisitions', 'request_proposal_requisitions.request_proposal_id', '=', 'request_proposals.id')
                            ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('reference_no', function ($values) {
                        return '<a href="javascript:void(0)" onclick="openModal(' . $values->id . ')"  class="btn btn-link">' . $values->reference_no . '</a>';
                    })
                    ->filterColumn('reference_no', function ($query, $keyword) {
                        return $query->where('reference_no', 'LIKE', '%' . $keyword . '%');;
                    })
                    ->addColumn('supplier', function ($values) {
                        $data = '';
                        if ($values->relSelfQuotationSupplierByProposalId) {
                            foreach ($values->relSelfQuotationSupplierByProposalId->where('is_approved', 'halt') as $supplier) {
                                $data .= '<button class="btn btn-sm btn-xs mr-1 ' . ($supplier->is_approved == 'halt' ? ' btn-warning' : 'btn-success') . '">' . $supplier->relSuppliers->name . ' (' . $supplier->relSuppliers->code . ')</button>';
                            }
                        }
                        return $data;
                    })
                    ->filterColumn('supplier', function ($query, $keyword) {
                        return $query->whereHas('relSuppliers', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%')->orWhere('code', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('supplier', function ($query, $order) {
                        return pleaseSortMe($query, $order, Suppliers::select('suppliers.name')
                            ->whereColumn('suppliers.id', 'quotations.supplier_id')
                            ->take(1)
                        );
                    })

                    ->addColumn('approvals', function ($quotation) {
                        $approvals = '';
                        if(isset($quotation->relRequestProposal->approvals[0])){
                            foreach ($quotation->relRequestProposal->approvals as $key => $approval) {
                                $approvals .= '<button class="btn btn-xs btn-' . ($approval->response == 'pending' ? 'warning' : ($approval->response == 'approved' ? 'success' : 'danger')) . '">' . $approval->user->name . ' [' . ucwords($approval->response) . ']</button>&nbsp;';
                            }
                        }
                        
                        return $approvals;
                    })
                    ->filterColumn('approvals', function ($query, $keyword) {
                        return $query->whereHas('relRequestProposal.approvals.user', function ($query) use ($keyword) {
                                return $query->where('name', 'LIKE', '%' . $keyword . '%');
                            })
                            ->orWhereHas('relRequestProposal.approvals', function ($query) use ($keyword) {
                                return $query->where('status', 'LIKE', '%' . strtolower($keyword) . '%');
                            });
                    })

                    ->addColumn('actions', function ($values) use ($options) {
                        $myApproval = $values->relRequestProposal->approvals->whereIn('response', ['pending', 'denied'])->where('user_id', auth()->user()->id)->first();
                        $available = (isset($myApproval->id));
                        $available = $available ? ($values->relRequestProposal->approvals->whereIn('response', ['pending', 'denied'])->where('priority', '<', $myApproval->priority)->count() == 0) : false;

                        $actions = '';
                        if ($values->relSelfQuotationSupplierByProposalId->whereIn('is_approved', ['approved'])->count() == 0) {
                            $actions .= '<div class="btn-group"><button class="btn dropdown-toggle" data-toggle="dropdown"><span id="statusName' . $values->id . '">' . ucfirst($values->is_approved) . '</span></button><ul class="dropdown-menu">';

                            $actions .= '<li><a target="__blank" href="' . url('pms/quotation/cs-compare-view-pdf/' . $values->request_proposal_id) . '" data-title="Quotation CS">CS View</a></li>';

                            $actions .= '<li><a target="__blank" href="' . route('pms.quotation.cs.history', $values->request_proposal_id) . '" data-title="Quotation CS">CS History</a></li>';

                            $actions .= '</ul></div>';

                            if ($options['quotation-halt'] && $available) {
                                $actions .= '<a href="' . route('pms.quotation.quotations.cs.compare.view', ['id' => $values->relRequestProposal->id, 'slug' => 'list']) . '?type=direct-purchase"  title="Compare Process Analysis" class="btn btn-success btn-xs"><i class="las la-list"></i></a>';
                            }
                        }
                        return $actions;
                    })
                    ->rawColumns(['CS_number', 'supplier', 'reference_no', 'actions', 'requisitions', 'products', 'approvals'])
                    ->make(true);
            }

            return view('pms.backend.pages.quotation.estimate-rejected-list', ['title' => $title, 'headerColumns' => $this->gpListHeaderColumns()]);

        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\RedirectResponse
     */

    public function generatePoProcess($id)
    {
        $title = 'Generate Purchase Order';
        $quotation = Quotations::with([
            'relQuotationItems',
            'relRequestProposal.requestProposalRequisition',
            'relSuppliers'
        ])->where([
            'status' => 'active',
            'is_approved' => 'approved',
            'is_po_generate' => 'no'
        ])->findOrFail($id);
        $requisitionItems = RequisitionItem::with([
            'attributes.attributeOption.attribute'
        ])
        ->whereHas('requisition.requestProposalRequisition', function($query) use($quotation){
            return $query->where('request_proposal_id', $quotation->request_proposal_id);
        })
        ->get();

        $uncommon = Category::whereHas('subCategory.products', function ($query) use ($quotation) {
            return $query->whereIn('id', $quotation->relQuotationItems->pluck('product_id')->toArray());
        })->where('type', 'uncommon')->count();

        $requisitions = Requisition::with([
            'relUsersList.employee'
        ])
        ->whereHas('requestProposalRequisition.relRequestProposal.relQuotations', function ($query) use ($quotation) {
            return $query->where('id', $quotation->id);
        })
        ->whereHas('items', function ($query) use ($quotation) {
            return $query->whereIn('product_id', $quotation->relQuotationItems->where('is_approved', 'approved')->pluck('product_id')->toArray());
        })
        ->get();

        $unit_ids = $requisitions->pluck('hr_unit_id')->toArray();
        $department_ids = [];
        if ($requisitions->count() > 0) {
            foreach ($requisitions as $key => $requisition) {
                array_push($department_ids, $requisition->relUsersList->employee->as_department_id);
            }
        }

        try {

            $units = Unit::whereIn('hr_unit_id', $unit_ids)->get();
            $departments = Department::whereIn('hr_department_id', $department_ids)->get();

            $systemCurrency = systemCurrency();
            $currency = $quotation->exchangeRate->currency->code;
            $exchangeRate = exchangeRate($quotation->exchangeRate, $systemCurrency->id);
            $same = ($systemCurrency->id == $quotation->exchangeRate->currency_id ? true : false);

            return view('pms.backend.pages.quotation.generate-po-process', compact('title', 'quotation', 'units', 'departments', 'uncommon', 'systemCurrency', 'exchangeRate', 'currency', 'same', 'requisitionItems'));

        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function unitWiseRequisition($unitId, $quotationId)
    {
        try {

            $productIds = QuotationsItems::where('quotation_id', $quotationId)->where('is_po_generate', 'no')
                ->pluck('product_id')->toArray();

            $array1 = Requisition::where([
                'hr_unit_id' => $unitId,
                'is_po_generate' => 'no',
                'is_send_to_rfp' => 'yes',
                'delivery_status' => 'rfp',
                'approved_id' => 1,
                'status' => 1,
            ])
                ->whereHas('requisitionItems', function ($query) use ($productIds) {
                    return $query->where('is_send', 'yes')
                        // ->where('po_generate', 'no')
                        ->whereIn('product_id', $productIds);
                })
                ->whereHas('requestProposalRequisition.relRequestProposal.relQuotations', function ($query) use ($quotationId) {
                    return $query->where('id', $quotationId);
                })
                ->when(request()->get('uncommon') > 0, function ($query) {
                    return $query->whereHas('relUsersList.employee', function ($query) {
                        return $query->where('as_department_id', request()->get('hr_department_id'));
                    });
                })
                ->pluck('id')->toArray();

            $array2 = Requisition::where([
                'hr_unit_id' => $unitId,
                'approved_id' => 1,
                'status' => 1,
                'is_po_generate' => 'no',
                'is_send_to_rfp' => 'yes',
                'request_status' => 'send_rfp',
                'delivery_status' => 'partial-delivered',
            ])
                ->whereHas('requisitionItems', function ($query) use ($productIds) {
                    return $query->where('is_send', 'yes')
                        // ->where('po_generate', 'no')
                        ->whereIn('product_id', $productIds);
                })
                ->whereHas('requestProposalRequisition.relRequestProposal.relQuotations', function ($query) use ($quotationId) {
                    return $query->where('id', $quotationId);
                })
                ->when(request()->get('uncommon') > 0, function ($query) {
                    return $query->whereHas('relUsersList.employee', function ($query) {
                        return $query->where('as_department_id', request()->get('hr_department_id'));
                    });
                })
                ->pluck('id')->toArray();

            $array = array_unique(array_merge($array1, $array2));

            return Requisition::whereIn('id', $array)->get(['id', 'reference_no']);

        } catch (\Throwable $th) {
            return response()->json($th->getMessage());
        }
    }

    public function getCostCentres(Request $request)
    {
        $requisitions = Requisition::with([
            'relUsersList.employee',
        ])
        ->whereIn('id', $request->requisitions)
        ->get();
        $departments = [];
        if (isset($requisitions[0])) {
            foreach ($requisitions as $key => $requisition) {
                array_push($departments, $requisition->relUsersList->employee->as_department_id);
            }
        }

        $costCentres = CostCentre::with([
            'profitCentre.company'
        ])
        ->where('hr_unit_id', $request->hr_unit_id)
        ->where(function ($query) use ($departments, $requisitions){
            return $query->where(function ($query) use ($departments, $requisitions) {
                return $query->where(function ($query) use ($departments, $requisitions) {
                    return $query->whereIn('hr_department_id', $departments);
                })->orWhere('hr_department_id', 0);
            })
            ->orWhere(function ($query) use ($departments, $requisitions){
                return  $query->whereIn('id', $requisitions->pluck('relUsersList.cost_centre_id')->toArray());
            });
        })
        ->get();

        $centres = '';
        if (isset($costCentres[0])) {
            foreach ($costCentres as $key => $costCentre) {
                $centres .= '<option value="' . $costCentre->id . '">[' . $costCentre->code . '] ' .
                    $costCentre->name . ' (' . $costCentre->profitCentre->company->name . ')</option>';
            }
        }

        return $centres;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function requisitionWiseItemsQty(Request $request)
    {
        try {

            $items = QuotationsItems::where('quotation_id', $request->quotationId)->get();
            $data = [];
            if (isset($items[0])) {
                foreach ($items as $key => $item) {
                    $qty = RequisitionItem::whereIn('requisition_id', $request->requisitionId)
                        ->where('product_id', $item->product_id)
                        ->where('is_send', 'yes')
                        ->where('po_generate', 'no')
                        ->sum('qty');

                    $deliveryQty = RequisitionItem::whereIn('requisition_id', $request->requisitionId)
                        ->where('product_id', $item->product_id)
                        ->where('is_send', 'yes')
                        ->where('po_generate', 'no')
                        ->sum('delivery_qty');

                    $data[$item->id] = $item->approved_qty - $deliveryQty;
                }
            }

            return $data;
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    public function generatePoStore(Request $request)
    {
        $this->validate($request, [
            'quotation_id' => 'required',
            'po_qty' => 'required',
            'requisition_id' => 'required',
            'hr_unit_id' => 'required',
            'cost_centre_id' => 'required',
        ]);

        $filterPoQty = array_diff($request->po_qty, [0]);
        $collectProductId = array_keys($filterPoQty);
        if (array_sum($filterPoQty) <= 0) {
            return $this->backWithError('Please po qty can not be 0');
        }

        $modal = Quotations::where('id', $request->quotation_id)->first();
        $prefix = 'PO-' . date('y', strtotime(date('Y-m-d'))) . '-' . unitName($request->hr_unit_id)->hr_unit_short_name . '-';
        $refNo = uniqueCode(16, $prefix, 'purchase_orders', 'id');

        DB::beginTransaction();
        try {
            $po_data = new PurchaseOrder();
            $po_data->quotation_id = $modal->id;
            $po_data->hr_unit_id = $request->hr_unit_id;
            $po_data->reference_no = $refNo;
            $po_data->po_date = date('Y-m-d', strtotime($request->po_date));
            $po_data->remarks = $request->remarks;
            $po_data->terms = $request->terms;
            $po_data->cost_centre_id = $request->cost_centre_id;
            $po_data->save();

            $poSubTotal = 0;
            $poVat = 0;
            $poGrossTotal = 0;

            $items = QuotationsItems::where('quotation_id', $modal->id)
            ->whereIn('uid', $collectProductId)
            ->where('is_approved', 'approved')
            ->get();
            foreach ($items as $key => $values) {
                $discount_amount = $values->unit_price > 0 && $values->approved_qty > 0 && $request->discount_percentage[$values->id] > 0 ? ($values->unit_price*$values->approved_qty)*($request->discount_percentage[$values->id]/100) : 0;
                $after_discount = ($values->unit_price*$values->approved_qty)-$discount_amount;
                
                $values->discount = $request->discount_percentage[$values->id];
                $values->discount_amount = $discount_amount;
                $values->vat_percentage = $request->vat_percentage[$values->id];
                $values->vat = $after_discount > 0 && $request->vat_percentage[$values->id] > 0 ? $after_discount*($request->vat_percentage[$values->id]/100) : 0;
                $values->save();

                $discounted = ($values->discount > 0 ? ($values->unit_price * ($values->discount / 100)) : 0);
                $unit_price = ($values->unit_price - $discounted);

                $poQty = $filterPoQty[$values->uid];
                $subTotal = $unit_price * $poQty;
                $poSubTotal += $subTotal;

                if($values->vat_type == 'inclusive'){
                    $vatAmount = ($values->vat_percentage > 0 && $subTotal > 0 ? (($subTotal*$values->vat_percentage)/(100+$values->vat_percentage)) : 0);
                    $grossTotal = $subTotal;
                }else if($values->vat_type == 'exclusive'){
                    $vatAmount = ($values->vat_percentage > 0 && $subTotal > 0 ? ($subTotal * ($values->vat_percentage / 100)) : 0);
                    $grossTotal = ($subTotal + $vatAmount);
                }else{
                    $vatAmount = 0;
                    $grossTotal = $subTotal;
                }

                $poVat += $vatAmount;
                $poGrossTotal += $grossTotal;

                $po_items = new PurchaseOrderItem();
                $po_items->po_id = $po_data->id;
                $po_items->uid = $values->uid;
                $po_items->product_id = $values->product_id;
                $po_items->unit_price = $unit_price;
                $po_items->qty = $poQty;
                $po_items->sub_total_price = $subTotal;
                $po_items->discount_percentage = 0;
                $po_items->discount = 0;
                $po_items->vat_type = $values->vat_type;
                $po_items->vat_percentage = $values->vat_percentage;
                $po_items->vat = $vatAmount;
                $po_items->total_price = $grossTotal;
                $po_items->save();

                $values->is_po_generate = 'yes';
                $values->save();

                //update latest product price
                latestProductPriceUpdate($values->product_id, $unit_price);
            }

            //Update Purchase Order
            PurchaseOrder::where('id', $po_data->id)->update([
                'total_price' => PurchaseOrderItem::where('po_id', $po_data->id)->sum('sub_total_price'),
                'discount' => 0,
                'vat' => PurchaseOrderItem::where('po_id', $po_data->id)->sum('vat'),
                'gross_price' => PurchaseOrderItem::where('po_id', $po_data->id)->sum('total_price'),
            ]);

            if ($modal->relSupplierPaymentTerm->type == 'paid') {
                //Add Supplier Pyaments
                $duration_date = $modal->relSupplierPaymentTerm->day_duration;
                $pay_date = date('Y-m-d h:i:s', strtotime('+' . $duration_date . ' day', strtotime($po_data->po_date)));
                //Payment date based on advance & due
                $pay_amount = ($modal->relSupplierPaymentTerm->payment_percent > 0 && $poGrossTotal > 0 ? ($modal->relSupplierPaymentTerm->payment_percent * $poGrossTotal) / 100 : 0);
                if ($pay_amount > 0) {
                    $supplier_payment = new SupplierPayment();
                    $supplier_payment->supplier_id = $modal->supplier_id;
                    $supplier_payment->purchase_order_id = $po_data->id;
                    $supplier_payment->transection_date = date('Y-m-d h:i:s');
                    $supplier_payment->transection_type = 'purchase';
                    $supplier_payment->exchange_rate_id = $modal->exchange_rate_id;
                    $supplier_payment->bill_number = $po_data->reference_no;
                    $supplier_payment->pay_amount = $pay_amount;
                    $supplier_payment->pay_date = $pay_date;
                    $supplier_payment->bill_type = 'po-advance';
                    $supplier_payment->save();

                    //Notification send to accounts
                    $message = '<span class="notification-links"  data-title="Purchase Order Details">Reference No:' . $po_data->reference_no . '. A PO has been submitted with an advance amount of TK ' . $supplier_payment->pay_amount . '</span>';

                    CreateOrUpdateNotification($message, 'unread', '', getManagerInfo('Accounts', null, true), 'send-to-accounts');
                }
            }

            //Update requisition
            RequisitionItem::whereIn('requisition_id', $request->requisition_id)
            ->whereIn('uid', $collectProductId)
            ->where('is_send', 'yes')
            ->where('po_generate', 'no')
            ->update([
                'po_generate' => 'yes'
            ]);

            if (isset($request->requisition_id[0])) {
                foreach ($request->requisition_id as $key => $requisition_id) {
                    PurchaseOrderRequisition::updateOrCreate([
                        'purchase_order_id' => $po_data->id,
                        'requisition_id' => $requisition_id,
                    ], [
                        'hr_department_id' => isset($request->hr_department_id) ? $request->hr_department_id : 0,
                    ]);
                    //Requisition tracking with requisiton id
                    RequisitionTracking::storeRequisitionTracking($requisition_id, 'PO-Issue');

                    //Notification generate
                    $requisitionUser = Requisition::where('id', $requisition_id)->first();
                    $message = '<span class="notification-links"  data-title="Purchase Order Details">PO Reference No #' . $po_data->reference_no . '. A PO has been Issued against your requisition #' . $requisitionUser->reference_no . '</span>';
                    CreateOrUpdateNotification($message, 'unread', '', [$requisitionUser->author_id], 'requisition');
                }
            }

            $array = [];

            //PO Generate Equally distribute
            if (isset($request->product_id[0])) {
                foreach ($request->product_id as $key => $uid) {
                    $requisition_qty = (isset($request->requisition_qty[$uid]) ? $request->requisition_qty[$uid] : 0);
                    $po_qty = (isset($request->po_qty[$uid]) ? $request->po_qty[$uid] : 0);
                    $percentage = ($requisition_qty > 0 && $po_qty > 0 ? (($po_qty / $requisition_qty) * 100) : 0);

                    if (isset($request->requisition_id[0])) {
                        foreach ($request->requisition_id as $key => $requisition_id) {
                            $requisitionItems = RequisitionItem::where('requisition_id', $requisition_id)->where('uid', $uid)->get();
                            if (isset($requisitionItems[0])) {
                                foreach ($requisitionItems as $key => $requisitionItem) {
                                    if ($po_qty > 0) {
                                        $this_po_qty = round(($percentage > 0 ? ($requisitionItem->qty * ($percentage / 100)) : 0));
                                        $this_po_qty = ($this_po_qty > $po_qty ? $po_qty : $this_po_qty);

                                        $requisitionItem->purchase_qty = $this_po_qty;
                                        $requisitionItem->save();

                                        $po_qty = ($po_qty - $this_po_qty);
                                    }
                                }
                            }
                        }

                        if ($po_qty > 0) {
                            $requisitionItem = RequisitionItem::where('requisition_id', $requisition_id)->where('uid', $uid)->first();
                            $requisitionItem->purchase_qty = ($requisitionItem->purchase_qty + round($po_qty));
                            $requisitionItem->save();

                        }
                    }
                }
            }


            $milestones = [];
            if(isset($request->milestone_names[0])){
                foreach($request->milestone_names as $key => $milestone){
                    array_push($milestones, [
                        'purchase_order_id' => $po_data->id,
                        'name' => $request->milestone_names[$key],
                        'percentage' => $request->milestone_percentages[$key],
                    ]);
                }
            }
            if(isset($milestones[0])){
                PurchaseOrderMilestone::insert($milestones);
            }

            DB::commit();

            return $this->redirectBackWithSuccess('Purchase Order has been generated successfully!', 'pms.purchase.order-index');

        } catch (\Throwable $th) {
            DB::rollback();
            return $this->backWithError($th->getMessage());
        }
        return back();
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function completeQuotation(Request $request)
    {
        $response = [];
        $data = Quotations::where('id', $request->quotation_id)->first();
        //Start transaction
        DB::beginTransaction();
        try {
            if (!empty($data)) {
                $data->is_po_generate = 'yes';
                $data->save();
                //Commit data
                DB::commit();

                $response['result'] = 'success';
                $response['message'] = 'Successfully Complete This Quotation!!';
            } else {
                $response['result'] = 'error';
                $response['message'] = 'Data not found.!!';
            }

        } catch (\Throwable $th) {
            //If process has any problem then rollback the data
            DB::rollback();
            $response['result'] = 'error';
            $response['message'] = $th->getMessage();
        }
        return $response;
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     * @return \Illuminate\Http\Response
     */


    public function proposalDetailsView($id)
    {
        $title = 'Requests Proposal Details';

        try {
            $requestProposal = RequestProposal::with([
                'defineToSupplier',
                'requestProposalDetails.product.category.category',
                'requestProposalDetails.product.productUnit',
                'requestProposalDetails.product.attributes.attributeOption.attribute',
                'createdBy'
            ])->findOrFail($id);

            $requisitionItems = RequisitionItem::with([
                'attributes.attributeOption.attribute'
            ])
            ->whereHas('requisition.requestProposalRequisition', function($query) use($requestProposal){
                return $query->where('request_proposal_id', $requestProposal->id);
            })
            ->get();

            return view('pms.backend.pages.rfp.request-proposal-details', compact('title', 'requestProposal', 'requisitionItems'));
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     * @return \Illuminate\Http\Response
     */

    public function csHistory($id)
    {
        try {

            $title = "CS History";
            $proposals = RequestProposal::with('relQuotations')->where('id', $id)->orderby('id', 'desc')->first();

            if (count($proposals->relQuotations) > 0) {
                $purchase = $proposals->relQuotations()->with('relPurchaseOrder')->first();
            }

            $purchaseOrder = isset($purchase) ? (!empty($purchase->relPurchaseOrder) ? $purchase->relPurchaseOrder : '') : '';

            if (!empty($purchaseOrder)) {
                $billManage = PurchaseOrder::with([
                    'relGoodReceiveNote',
                    'relGoodsReceivedItemStockIn',
                    'relQuotation.relSuppliers',
                    'relQuotation.exchangeRate.currency',
                    'relPurchaseOrderItems',
                    'relPoAttachment'
                ])
                    ->where('is_send', 'yes')
                    ->whereHas('relGoodReceiveNote', function ($query) {
                        $query->whereRaw('purchase_orders.id=goods_received_notes.purchase_order_id');
                    })
                    ->whereHas('relGoodsReceivedItemStockIn', function ($query) {
                        return $query->where('is_grn_complete', 'yes')->where('total_amount', '>', 0);
                    })
                    ->where('id', $purchaseOrder->id)
                    ->first();
            } else {
                $billManage = '';
            }

            return view('pms.backend.pages.rfp.rfp-history', compact('title', 'purchaseOrder', 'proposals', 'billManage'));
        } catch (\Throwable $th) {
            return $this->backWithWarning($th->getMessage());
        }
    }


    public function bargainHeaderColumns($value = '')
    {
        return array(
            ['SL', 'SL'],
            ['quotation_date', 'quotation_date', 'text-center'],
            ['reference_no', 'reference_no', 'text-center'],
            ['supplier', 'supplier', 'text-left'],
            ['currency', 'currency', 'text-center'],
            ['total_price', 'total_price', 'text-right'],
            ['discount', 'discount', 'text-right'],
            ['vat', 'vat', 'text-right'],
            ['gross_price', 'gross_price', 'text-right'],
            ['actions', 'actions', 'text-center']
        );
    }

    public function bargainHistory($id)
    {
        $title = 'Quotations List';
        try {

            $quotations = QuotationHistory::with([
                'quotation.relRequestProposal',
                'quotation.relSuppliers',
                'quotation.exchangeRate.currency',
            ])
                ->where('quotation_id', $id)
                ->when(!datatableOrdering(), function ($query) {
                    return $query->orderby('id', 'desc');
                });

            if (request()->ajax()) {
                return DataTables::of($quotations)
                    ->addIndexColumn()
                    ->editColumn('quotation_date', function ($values) {
                        return date('Y-m-d', strtotime($values->quotation_date));
                    })
                    ->filterColumn('quotation_date', function ($query, $keyword) {
                        $query->where('quotation_date', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('quotation_date', function ($query, $order) {
                        return $query->orderBy('quotation_date', $order);
                    })
                    ->addColumn('reference_no', function ($values) {
                        return '<a href="javascript:void(0)" onclick="openModal(' . $values->id . ')"  class="btn btn-link">' . $values->quotation->reference_no . '</a>';
                    })
                    ->filterColumn('reference_no', function ($query, $keyword) {
                        return $query->whereHas('quotation', function ($query) use ($keyword) {
                            $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->addColumn('supplier', function ($values) {
                        return $values->quotation->relSuppliers->name . ' (' . $values->quotation->relSuppliers->code
                            . ')';
                    })
                    ->filterColumn('supplier', function ($query, $keyword) {
                        return $query->whereHas('quotation.relSuppliers', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->addColumn('currency', function ($values) {
                        return isset($values->quotation->exchangeRate->currency->code) ?
                            $values->exchangeRate->currency->code : '';
                    })
                    ->filterColumn('currency', function ($query, $keyword) {
                        return $query->whereHas('quotation.exchangeRate.currency', function ($query) use ($keyword) {
                            $query->where('code', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->editColumn('total_price', function ($values) {
                        return number_format($values->total_price, 2);
                    })
                    ->editColumn('gross_price', function ($values) {
                        return number_format($values->gross_price, 2);
                    })
                    ->editColumn('status', function ($values) {
                        return ucfirst($values->status);
                    })
                    ->editColumn('type', function ($values) {
                        return ucfirst($values->type);
                    })
                    ->addColumn('actions', function ($values) {
                        $actions = '';
                        $actions .= '<a href="javascript:void(0)" onclick="openModal(' . $values->id . ')"  class="btn btn-xs btn-info"><i class="las la-eye"></i></a>';
                        return $actions;
                    })
                    ->rawColumns(['reference_no', 'actions'])
                    ->make(true);
            }

            return view('pms.backend.pages.quotation.bargain-history', [
                'title' => $title,
                'headerColumns' => $this->bargainHeaderColumns()
            ]);
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    public function quotationHistoryItems($id)
    {
        $title = "Quotation wise items";
        $quotation = QuotationHistory::with([
            'quotation',
            'items.relProduct.attributes.attributeOption.attribute'
        ])->findOrFail($id);

        $requisitionItems = RequisitionItem::with([
            'attributes.attributeOption.attribute'
        ])
        ->whereHas('requisition.requestProposalRequisition', function($query) use($quotation){
            return $query->where('request_proposal_id', $quotation->quotation->request_proposal_id);
        })
        ->get();

        $systemCurrency = systemCurrency();
        $exchangeRate = exchangeRate($quotation->quotation->exchangeRate, $systemCurrency->id);
        $same = ($quotation->quotation->exchangeRate->currency_id == $systemCurrency->id ? true : false);

        try {
            return view('pms.backend.pages.quotation.history-item-show', compact('quotation', 'title', 'systemCurrency','exchangeRate', 'same', 'requisitionItems'));
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

}
