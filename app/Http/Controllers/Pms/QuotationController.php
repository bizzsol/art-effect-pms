<?php
bolt_decrypt( __FILE__ , 'GJEi9s'); return 0;
##!!!##