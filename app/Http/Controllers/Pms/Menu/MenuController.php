<?php
bolt_decrypt( __FILE__ , 'BPOZmO'); return 0;
##!!!##