<?php
bolt_decrypt( __FILE__ , '1rUeEI'); return 0;
##!!!##