<?php
bolt_decrypt( __FILE__ , '9GOxiP'); return 0;
##!!!##

namespace App\Http\Controllers\Pms;

use App\Http\Controllers\Controller;
use App\Models\PmsModels\ProductUnit;
use App\Models\PmsModels\ProductUnitMatrix;
use Illuminate\Http\Request;
use DataTables, DB;

class ProductUnitController extends Controller
{   

    public function headerColumns($value='')
    {
        $row = array(
            ['SL', 'SL'], 
            ['unit_code', 'unit_code', 'text-center'],
            ['unit_name', 'unit_name', 'text-center'],
            ['round_policy', 'round_policy', 'text-center'],
            ['status', 'status', 'text-center'], 
            ['actions', 'actions', 'text-center','width:15%']
        );
        return $row;
    }
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        try {
            $title = 'Product Unit';
            $status=status();
            $prefix='PU-'.date('y', strtotime(date('Y-m-d'))).'-MBM-';
            $unit_code=uniqueCode(14,$prefix,'product_units','id');
            $headerColumns=$this->headerColumns();
            $product_units = ProductUnit::when(!datatableOrdering(), function($query){
                return $query->orderby('id', 'desc');
            });

            if (request()->ajax()) {
                    return Datatables::of($product_units)
                    ->addIndexColumn()
                    ->editColumn('status', function($unit){
                        return ucfirst($unit->status);
                    })
                    ->editColumn('round_policy', function($unit){
                        return '<strong>'.roundPolicies()[$unit->round_policy]['title'].'</strong><br>'.roundPolicies()[$unit->round_policy]['description'];
                    })
                    ->addColumn('actions', function($unit){
                        $actions = '';
                        $actions.='<a href="javascript:void(0)" onclick="unitConversions($(this))" data-unit-id="'.$unit->id.'" class="btn btn-success btn-xs mr-1">Unit Conversions</a>';
                        $actions.='<a href="javascript:void(0)" data-role="put" data-src="'.route('pms.product-management.product-unit.show', $unit->id).'" onclick="editBtn($(this))" class="btn btn-info btn-xs mr-1 editBtn"><i class="las la-edit"></i></a>';
                        $actions.='<a href="javascript:void(0)" data-role="delete" onclick="deleteBtn($(this))" data-src="'.route('pms.product-management.product-unit.destroy', $unit->id).'" class="btn btn-danger btn-xs mr-1 deleteBtn"><i class="las la-trash"></i></a>';
                        return $actions;
                    })
                    ->rawColumns(['round_policy', 'actions'])
                    ->make(true);
                }

            return view('pms.backend.pages.product-unit.index', compact('title', 'headerColumns','status','unit_code'));
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'unit_name' => ['required', 'string', 'max:255'],
            'unit_code' => ['required', 'string', 'max:255'],
            'round_policy' => ['required', 'string', 'max:255'],
            'status' => ['required', 'string', 'max:255'],
        ]);

        try {

            $inputs = $request->all();
            unset($inputs['_token']);
            unset($inputs['_method']);
            
            $productUnit = ProductUnit::create($inputs);
            
            return $this->backWithSuccess('Product Unit has been added successfully');
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\ProductUnit  $productUnit
     * @return \Illuminate\Http\Response
     */
    public function show(ProductUnit $productUnit)
    {
        try {
            $productUnit->src = route('pms.product-management.product-unit.update',$productUnit->id);
            $productUnit->req_type = 'put';
            
            $data = [
                'status' => 'success',
                'info' => $productUnit
            ];

            return response()->json($data);
        }catch (\Throwable $th){
            $data = [
                'status' => null,
                'info' => $th->getMessage()
            ];
            return response()->json($data);
        }
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\ProductUnit  $productUnit
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, ProductUnit $productUnit)
    {
        $this->validate($request, [
            'unit_name' => ['required', 'string', 'max:255'],
            'unit_code' => ['required', 'string', 'max:255'],
            'round_policy' => ['required', 'string', 'max:255'],
            'status' => ['required', 'string', 'max:255'],
        ]);

        try {
         
            $inputs = $request->all();
            unset($inputs['_token']);
            unset($inputs['_method']);

            $productUnit->update($inputs);

            return $this->backWithSuccess('Product Unit has been updated successfully');
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\ProductUnit  $productUnit
     * @return \Illuminate\Http\Response
     */
    public function destroy(ProductUnit $productUnit)
    {
        try {
            $productUnit->delete();
        }catch (\Throwable $th){
            return response()->json($th->getMessage());
        }
    }


    public function unitConversions($id)
    {
        return view('pms.backend.pages.product-unit.unit-conversions', [
            'unit' => ProductUnit::with([
                'matrixes'
            ])->findOrFail($id),
            'units' => ProductUnit::where('id', '!=', $id)->get(),
        ]);
    }

    public function updateUnitConversions(Request $request, $id)
    {
        DB::beginTransaction();
        try{
            $units = ProductUnit::where('id', '!=', $id)->get();
            if(isset($units[0])){
                foreach($units as $unit){
                    ProductUnitMatrix::updateOrCreate([
                        'product_unit_id' => $id,
                        'conversion_unit_id' => $unit->id
                    ], [
                        'conversion_rate' => isset($request->units[$unit->id]) && $request->units[$unit->id] >= 0 ? $request->units[$unit->id] : 0,
                    ]);
                }
            }

            DB::commit();
            return response()->json([
                'success' => true,
                'message' => "Unit Conversions has been updated successfully."
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }
}
