<?php
bolt_decrypt( __FILE__ , '8u8ZwB'); return 0;
##!!!##