<?php
bolt_decrypt( __FILE__ , 'JAZXv8'); return 0;
##!!!##