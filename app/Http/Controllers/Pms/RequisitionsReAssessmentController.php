<?php
bolt_decrypt( __FILE__ , 'OZV5Sp'); return 0;
##!!!##