<?php
bolt_decrypt( __FILE__ , 'duCcDE'); return 0;
##!!!##