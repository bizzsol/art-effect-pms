<?php
bolt_decrypt( __FILE__ , 'QszB74'); return 0;
##!!!##