<?php
bolt_decrypt( __FILE__ , '14IjTv'); return 0;
##!!!##