<?php
bolt_decrypt( __FILE__ , 'UBiGOL'); return 0;
##!!!##