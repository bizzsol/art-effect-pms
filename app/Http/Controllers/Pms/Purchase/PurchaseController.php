<?php
bolt_decrypt( __FILE__ , 'Z3LyaU'); return 0;
##!!!##