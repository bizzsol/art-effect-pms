<?php
bolt_decrypt( __FILE__ , '0aHrx4'); return 0;
##!!!##