<?php
bolt_decrypt( __FILE__ , 'IhDs5k'); return 0;
##!!!##