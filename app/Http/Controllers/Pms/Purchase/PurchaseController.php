<?php
bolt_decrypt( __FILE__ , 'tB4r4x'); return 0;
##!!!##