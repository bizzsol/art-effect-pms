<?php
bolt_decrypt( __FILE__ , 'jOKWw6'); return 0;
##!!!##