<?php
bolt_decrypt( __FILE__ , '55MmnP'); return 0;
##!!!##