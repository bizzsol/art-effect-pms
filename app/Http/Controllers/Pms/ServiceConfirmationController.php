<?php
bolt_decrypt( __FILE__ , 'LZUM5z'); return 0;
##!!!##