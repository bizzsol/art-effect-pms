<?php
bolt_decrypt( __FILE__ , 'dXKDpE'); return 0;
##!!!##

namespace App\Http\Controllers\Pms;

use App\Http\Controllers\Controller;
use App\Models\PmsModels\InventoryModels\InventoryActionControl;
use App\Models\PmsModels\Product;
use App\Models\PmsModels\Warehouses;
use Illuminate\Http\Request;
use App\Models\PmsModels\Purchase\PurchaseOrder;
use App\Models\PmsModels\Purchase\PurchaseOrderItem;
use App\Models\PmsModels\Grn\GoodsReceivedNote;
use App\Models\PmsModels\Grn\GoodsReceivedItem;
use App\Models\PmsModels\Grn\GoodsReceivedItemStockIn;
use App\Models\PmsModels\PurchaseReturn;
use App\Models\PmsModels\PurchaseReturnGateOut;
use App\Models\PmsModels\Purchase\PurchaseOrderRequisition;
use App\Models\PmsModels\RequisitionItem;
use App\Models\PmsModels\RequisitionTracking;
use Illuminate\Support\Facades\Mail;
use DB, Auth, DataTables;

class ServiceConfirmationController extends Controller
{
    public function headerColumns($value = '')
    {
        return $array = array(
            ['SL', 'SL'],
            ['approval_date', 'approval_date', 'text-center'],
            ['reference_no', 'reference_no', 'text-center'],
            ['supplier', 'supplier', 'text-center'],
            ['quotation_ref_no', 'quotation_ref_no', 'text-center'],
            ['services', 'services'],
            // ['total_price', 'total_price', 'text-right'], 
            // ['vat', 'vat', 'text-right'],
            // ['gross_price', 'gross_price', 'text-right'],
            ['actions', 'actions', 'text-center', 'width:15%']
        );
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        try {
            $title = 'Service Confirmation';
            $purchaseOrders = PurchaseOrder::with([
                'relPurchaseOrderItems.relProduct',
                'relGoodReceiveNote.relGoodsReceivedItems',
                'relQuotation',
                'purchaseOrderRequisitions.requisition.requisitionItems.product'
            ])
//                ->when(!auth()->user()->hasRole('Gate Permission'), function ($query) {
//                    return $query->when(auth()->user()->hasRole('Department-Head') && !auth()->user()->hasRole('Store-Manager'), function ($query) {
//                        return $query->whereHas('purchaseOrderRequisitions', function ($query) {
//                            return $query->whereIn('hr_department_id', auth()->user()->priorities->pluck('hr_department_id')->toArray());
//                        });
//                    })
//                        ->when(!auth()->user()->hasRole('Department-Head') || auth()->user()->hasRole('Store-Manager'), function ($query) {
//                            return $query->whereHas('purchaseOrderRequisitions', function ($query) {
//                                return $query->where('hr_department_id', 0);
//                            });
//                        });
//                })
//                ->when(auth()->user()->hasRole('Gate Permission'), function ($query) {
//                    return $query->whereIn('hr_unit_id', auth()->user()->priorities->pluck('hr_unit_id')->toArray());
//                })

//            ->whereHas('relQuotation', function($query){
//                return $query->whereNotIn('type',['direct-purchase']);
//            })
                ->whereHas('purchaseOrderRequisitions.requisition', function ($query) {
                    return $query->where('author_id', auth()->user()->id);
                })
                ->whereHas('purchaseOrderRequisitions.requisition.requisitionItems.product', function ($query) {
                    return $query->where('is_service', 1);
                })
                ->whereIn('is_send', ['yes'])
                ->get();

            $ids = [];
            if ($purchaseOrders->count() > 0) {
                foreach ($purchaseOrders as $key => $purchaseOrder) {
                    if ($purchaseOrder->relPurchaseOrderItems->count() > 0) {
                        foreach ($purchaseOrder->relPurchaseOrderItems as $key => $item) {
                            if ($item->relProduct->is_service == 1) {
                                $received_qty = 0;
                                if ($purchaseOrder->relGoodReceiveNote->count() > 0) {
                                    foreach ($purchaseOrder->relGoodReceiveNote as $key => $grn) {
                                        $received_qty += $grn->relGoodsReceivedItems->where('product_id', $item->product_id)->sum('received_qty');
                                    }
                                }

                                if ($item->qty > $received_qty && !in_array($purchaseOrder->id, $ids)) {
                                    array_push($ids, $purchaseOrder->id);
                                }
                            }
                        }
                    }
                }
            }

            $purchaseOrders = PurchaseOrder::whereIn('id', $ids)
                ->with([
                    'relQuotation.relSuppliers',
                    'relQuotation.exchangeRate.currency',
                    'relPoAttachment',
                    'relSupplierPayments',
                    'relPurchaseOrderItems.relProduct.attributes.attributeOption.attribute',
                    'relGoodReceiveNote.relGoodsReceivedItems'
                ])
                ->when(!datatableOrdering(), function ($query) {
                    return $query->orderby('id', 'desc');
                });

            if (request()->ajax()) {
                return DataTables::of($purchaseOrders)
                    ->addIndexColumn()
                    ->addColumn('approval_date', function ($po) {
                        return date('Y-m-d', strtotime($po->po_date));
                    })
                    ->filterColumn('approval_date', function ($query, $keyword) {
                        $query->where('po_date', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('approval_date', function ($query, $order) {
                        return $query->orderBy('po_date', $order);
                    })
                    ->editColumn('reference_no', function ($po) {
                        return '<a href="javascript:void(0)" onclick="purchaseOrderDetails($(this))" class="btn btn-link" data-src="' . route('pms.purchase.order-list.show', $po->id) . '">' . $po->reference_no . '</a>';
                    })
                    ->addColumn('supplier', function ($po) {
                        return isset($po->relQuotation->relSuppliers) ? (isset($po->relQuotation->relSuppliers->name) ? $po->relQuotation->relSuppliers->name . ' (' . $po->relQuotation->relSuppliers->code . ')' : '') : '';
                    })
                    ->filterColumn('supplier', function ($query, $keyword) {
                        return $query->whereHas('relQuotation.relSuppliers', function ($query) use ($keyword) {
                            $query->where('name', 'LIKE', '%' . $keyword . '%')
                                ->orWhere('code', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('supplier', function ($query, $order) {
                        return pleaseSortMe($query, $order, Quotations::select('suppliers.name')
                            ->join('suppliers', 'suppliers.id', '=', 'quotations.supplier_id')
                            ->whereColumn('quotations.id', 'purchase_orders.quotation_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('quotation_ref_no', function ($po) {
                        return isset($po->relQuotation->reference_no) ? $po->relQuotation->reference_no : '';
                    })
                    ->filterColumn('quotation_ref_no', function ($query, $keyword) {
                        return $query->whereHas('relQuotation', function ($query) use ($keyword) {
                            $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('quotation_ref_no', function ($query, $order) {
                        return pleaseSortMe($query, $order, Quotations::select('quotations.reference_no')
                            ->whereColumn('quotations.id', 'purchase_orders.quotation_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('services', function ($po) {
                        $services = '';
                        $count = 0;
                        if ($po->relPurchaseOrderItems->count() > 0) {
                            foreach ($po->relPurchaseOrderItems as $key => $item) {
                                if ($item->relProduct->is_service == 1) {
                                    $count++;
                                    $services .= ($count > 1 ? ', ' : '') . $item->relProduct->name . ' ' . getProductAttributesFaster($item->relProduct);
                                }
                            }
                        }

                        return $services;
                    })
                    ->filterColumn('services', function ($query, $keyword) {
                        return $query->whereHas('relPurchaseOrderItems.relProduct', function ($query) use ($keyword) {
                            return $query->where('name', 'LIKE', '%' . $keyword . '%');
                        })
                            ->orWhere(function ($query) use ($keyword) {
                                return $query->whereHas('relPurchaseOrderItems.relProduct.attributes.attributeOption', function ($query) use ($keyword) {
                                    $query->where('name', 'LIKE', '%' . $keyword . '%');
                                })
                                    ->orWhereHas('relPurchaseOrderItems.relProduct.attributes.attributeOption.attribute', function ($query) use ($keyword) {
                                        $query->where('name', 'LIKE', '%' . $keyword . '%');
                                    });
                            });
                    })
                    ->orderColumn('services', function ($query, $order) {
                        return pleaseSortMe($query, $order, PurchaseOrderItem::select('products.name')
                            ->join('products', 'products.id', '=', 'purchase_order_items.product_id')
                            ->whereColumn('purchase_order_items.id', 'purchase_orders.id')
                            ->take(1)
                        );
                    })
                    // ->editColumn('total_price', function($po){
                    //     return ((isset($po->relQuotation->exchangeRate->currency->symbol)?$po->relQuotation->exchangeRate->currency->symbol:'').' '.systemMoneyFormat($po->total_price));
                    // })
                    // ->editColumn('vat', function($po){
                    //     return ((isset($po->relQuotation->exchangeRate->currency->symbol)?$po->relQuotation->exchangeRate->currency->symbol:'').' '.systemMoneyFormat($po->vat));
                    // })
                    // ->editColumn('gross_price', function($po){
                    //     return ((isset($po->relQuotation->exchangeRate->currency->symbol)?$po->relQuotation->exchangeRate->currency->symbol:'') .' '.systemMoneyFormat($po->gross_price));
                    // })
                    ->addColumn('actions', function ($po) {
                        return '<a href="' . url('pms/grn/service-confirmation/' . $po->id) . '"  title="Service Confirmation" class="btn btn-xs btn-success m-1"><i class="las la-check"></i>&nbsp;Confirm</a>';
                    })
                    ->rawColumns(['reference_no', 'supplier', 'total_price', 'vat', 'gross_price', 'actions'])
                    ->make(true);
            }

            return view('pms.backend.pages.service.index', [
                'title' => $title,
                'headerColumns' => $this->headerColumns()
            ]);
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    public function show($id)
    {
        try {
            $purchaseOrder = PurchaseOrder::with([
                'relQuotation.relSuppliers',
                'relGoodReceiveNote',
                'relQuotation.exchangeRate.currency',
                'relPoAttachment',
                'relSupplierPayments',

                'relQuotation.relQuotationItems.relProduct.attributes.attributeOption.attribute',
            ])
//                ->whereHas('relQuotation', function ($query) {
//                    return $query->whereNotIn('type', ['direct-purchase']);
//                })
                ->whereHas('purchaseOrderRequisitions.requisition.requisitionItems.product', function ($query) {
                    return $query->where('is_service', 1);
                })
                ->whereIn('is_send', ['yes'])
                ->where('id', $id)
                ->first();

            $requisitionItems = RequisitionItem::with([
                'attributes.attributeOption.attribute'
            ])
                ->whereHas('requisition.requestProposalRequisition.relRequestProposal', function ($query) use ($purchaseOrder) {
                    return $query->where('request_proposal_id', $purchaseOrder->relQuotation->request_proposal_id);
                })
                ->groupBy('product_id')
                ->get();

            return view('pms.backend.pages.service.confirmation', [
                'title' => 'Service Confirmation for #' . $purchaseOrder->reference_no,
                'purchaseOrder' => $purchaseOrder,
                'requisitionItems' => $requisitionItems
            ]);
        } catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    public function update(Request $request, $purchase_order_id)
    {
        $request->validate([
            'date' => 'required',
            'received_qty' => 'required',
            'received_qty.*' => 'required',
            // 'challan' => 'required',
        ]);

        DB::beginTransaction();
        try {
            if (array_sum(array_values($request->received_qty)) <= 0) {
                return response()->json([
                    'success' => false,
                    'message' => "Please enter some quantity of service for confirmation."
                ]);
            }

            $purchaseOrder = PurchaseOrder::whereHas('purchaseOrderRequisitions.requisition.requisitionItems.product', function ($query) {
                return $query->where('is_service', 1);
            })
                ->where('is_send', 'yes')
                ->where('id', $purchase_order_id)
                ->first();

            $stockIns = [];

            $total_price = 0;
            $total_vat = 0;
            $exclusive_vat = 0;
            if ($purchaseOrder->relPurchaseOrderItems->whereIn('id', array_keys($request->received_qty))->count() > 0) {
                foreach ($purchaseOrder->relPurchaseOrderItems->whereIn('id', array_keys($request->received_qty)) as $key => $item) {
                    if (isset($request->received_qty[$item->id]) && $request->received_qty[$item->id] > 0) {
                        $price = $item->unit_price * $request->received_qty[$item->id];
                        $total_price += $price;
                        $total_vat += ($item->vat_percentage > 0 && $price > 0 ? ($price * ($item->vat_percentage / 100)) : 0);
                        $exclusive_vat += ($item->vat_percentage > 0 && $price > 0 && $item->vat_type == 'exclusive' ? ($price * ($item->vat_percentage / 100)) : 0);
                    }
                }
            }

            // $challanFile = '';
            // if ($request->hasFile('challan_file')){
            //     $challanFile = $this->fileUpload($request->file('challan_file'), 'upload/grn/challan-file');
            // }

            $goodsReceivedNote = GoodsReceivedNote::create([
                'purchase_order_id' => $purchaseOrder->id,
                'reference_no' => uniqueCode(20, ('GATE-IN-' . date('y', strtotime($request->date)) . '-' . $purchaseOrder->Unit->hr_unit_short_name . '-'), 'goods_received_notes', 'id'),
                'grn_reference_no' => uniqueCode(16, ('GRN-' . date('y', strtotime($request->date)) . '-SSLZ-'), 'goods_received_notes', 'id'),
                'challan' => 'service-confirmation',
                'challan_file' => '',
                'total_price' => $total_price,
                'discount' => 0,
                'vat' => $total_vat,
                'gross_price' => $total_price + $exclusive_vat,
                'received_date' => date('Y-m-d', strtotime($request->date)),
                'delivery_by' => auth()->user()->id,
                'receive_by' => auth()->user()->id,
                'note ' => $request->note,
                'created_by' => auth()->user()->id,
                'received_status' => 'full'
            ]);

            if ($purchaseOrder->relPurchaseOrderItems->whereIn('id', array_keys($request->received_qty))->count() > 0) {
                foreach ($purchaseOrder->relPurchaseOrderItems->whereIn('id', array_keys($request->received_qty)) as $key => $item) {
                    $qty = isset($request->received_qty[$item->id]) ? $request->received_qty[$item->id] : 0;
                    $sub_total = $item->unit_price * $qty;
                    $vat = ($item->vat_percentage > 0 && $sub_total > 0 ? ($sub_total * ($item->vat_percentage / 100)) : 0);
                    $exclusive_vat = ($item->vat_percentage > 0 && $sub_total > 0 && $item->vat_type == 'exclusive' ? ($sub_total * ($item->vat_percentage / 100)) : 0);
                    $goodsReceivedItem = GoodsReceivedItem::create([
                        'goods_received_note_id' => $goodsReceivedNote->id,
                        'product_id' => $item->product_id,
                        'unit_amount' => $item->unit_price,
                        'qty' => $qty,
                        'sub_total' => $sub_total,
                        'discount_percentage' => 0,
                        'discount' => 0,
                        'vat_type' => $item->vat_type,
                        'vat_percentage' => $item->vat_percentage,
                        'vat' => $vat,
                        'total_amount' => $sub_total + $exclusive_vat,
                        'quality_ensure' => 'approved',
                        'received_qty' => $qty,
                        'updated_at' => date('Y-m-d H:i:s'),
                        'updated_by' => auth()->user()->id
                    ]);

                    $stockIn = GoodsReceivedItemStockIn::create([
                        'purchase_order_id' => $purchaseOrder->id,
                        'goods_received_item_id' => $goodsReceivedItem->id,
                        'reference_no' => uniqueCode(18, ('QE-AP-' . date('y', strtotime($request->date)) . '-' . (auth()->user()->employee->unit->hr_unit_short_name) . '-'), 'goods_received_items_stock_in', 'id'),
                        'unit_amount' => $item->unit_price,
                        'received_qty' => $qty,
                        'sub_total' => $sub_total,
                        'discount_percentage' => 0,
                        'discount' => 0,
                        'vat_type' => $item->vat_type,
                        'vat_percentage' => $item->vat_percentage,
                        'vat' => $vat,
                        'total_amount' => $sub_total + $exclusive_vat,
                        'is_grn_complete' => 'yes',
                        'warehouse_id' => auth()->user()->relUsersWarehouse->pluck('id')->toArray()[0],
                    ]);

                    array_push($stockIns, $stockIn->id);

                    $this->updateQCQuantity($goodsReceivedItem->id, $qty);
                }
            }

            $entry = $this->runLedgerQueries($stockIns, $goodsReceivedNote, $request->date);
            if ($entry['success']) {
                \App\Models\PmsModels\Purchase\PurchaseOrderEntry::updateOrCreate([
                    'supplier_id' => $purchaseOrder->relQuotation->supplier_id,
                    'purchase_order_id' => $purchaseOrder->id,
                    'type' => 'grn',
                    'entry_id' => $entry['entry']['id'],
                ], [
                    'updated_at' => date('Y-m-d H:i:s')
                ]);
            }

            if (isset($stockIns[0])) {
                $project = isset($goodsReceivedNote->relPurchaseOrder->purchaseOrderRequisitions[0]->requisition->projectTask->id);
                foreach ($stockIns as $key => $stock_in_id) {
                    $stockIn = GoodsReceivedItemStockIn::where('id', $stock_in_id)->where('is_grn_complete', 'yes')->first();
                    $capitalize = true;
                    if ($project) {
                        if ($stockIn->relGoodsReceivedItems->relProduct->is_cwip == 1) {
                            $capitalize = false;
                        }
                    } else {
                        if ($stockIn->relGoodsReceivedItems->relProduct->is_fixed_asset == 0) {
                            $capitalize = false;
                        }
                    }

                    if ($capitalize && $stockIn->received_qty > 0) {
                        $batch = FixedAssetBatch::create([
                            'goods_received_items_stock_in_id' => $stockIn->id,
                            'batch' => uniqueCodeWithoutPrefix(8, 'fixed_asset_batches', 'batch'),

                            'depreciation_method_id' => $stockIn->relGoodsReceivedItems->relProduct->depreciation_method_id,
                            'base_rate' => $stockIn->relGoodsReceivedItems->relProduct->base_rate,
                            'rate_multiplier' => $stockIn->relGoodsReceivedItems->relProduct->rate_multiplier,
                            'depreciation_rate' => $stockIn->relGoodsReceivedItems->relProduct->depreciation_rate,
                            'is_yearly' => $stockIn->relGoodsReceivedItems->relProduct->is_yearly,
                            'years' => $stockIn->relGoodsReceivedItems->relProduct->years,
                            'is_onetime' => $stockIn->relGoodsReceivedItems->relProduct->is_onetime,
                            'depreciation_start_date' => date('Y-m-d', strtotime($stockIn->updated_at)),
                        ]);
                        if ($batch) {
                            for ($i = 1; $i <= $stockIn->received_qty; $i++) {
                                FixedAssetBatchItem::create([
                                    'fixed_asset_batch_id' => $batch->id,
                                    'asset_code' => $batch->batch . '-' . $i,

                                    'depreciation_method_id' => $stockIn->relGoodsReceivedItems->relProduct->depreciation_method_id,
                                    'base_rate' => $stockIn->relGoodsReceivedItems->relProduct->base_rate,
                                    'rate_multiplier' => $stockIn->relGoodsReceivedItems->relProduct->rate_multiplier,
                                    'depreciation_rate' => $stockIn->relGoodsReceivedItems->relProduct->depreciation_rate,
                                    'is_yearly' => $stockIn->relGoodsReceivedItems->relProduct->is_yearly,
                                    'years' => $stockIn->relGoodsReceivedItems->relProduct->years,
                                    'is_onetime' => $stockIn->relGoodsReceivedItems->relProduct->is_onetime,
                                    'depreciation_start_date' => date('Y-m-d', strtotime($stockIn->updated_at)),
                                ]);
                            }
                        }
                    }
                }
            }


            if ($purchaseOrder->purchaseOrderRequisitions->count() > 0) {
                foreach ($purchaseOrder->purchaseOrderRequisitions as $key => $purchaseOrderRequisition) {
                    RequisitionTracking::storeRequisitionTracking($purchaseOrderRequisition->requisition_id, 'delivered');
                    RequisitionTracking::storeRequisitionTracking($purchaseOrderRequisition->requisition_id, 'received');
                }
            }

            DB::commit();
            session()->flash('alert-type', 'success');
            session()->flash('message', 'Service has been confirmed successfully.');
            return response()->json([
                'success' => true,
                'supplier_id' => $purchaseOrder->relQuotation->supplier_id,
                'grn_id' => $goodsReceivedNote->id
            ]);
        } catch (\Throwable $th) {
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    public function updateQCQuantity($goods_received_item_id, $qc_qty)
    {
        if ($qc_qty > 0) {
            $array = [];

            //PO Generate Equally distribute
            $goodsReceivedItem = GoodsReceivedItem::find($goods_received_item_id);
            $requisition_qty = RequisitionItem::where('product_id', $goodsReceivedItem->product_id)
                ->whereHas('requisition.purchaseOrders.purchaseOrder.relGoodReceiveNote', function ($query) use ($goodsReceivedItem) {
                    return $query->where('id', $goodsReceivedItem->goods_received_note_id);
                })
                ->sum('qty');
            $percentage = ($requisition_qty > 0 && $qc_qty > 0 ? (($qc_qty / $requisition_qty) * 100) : 0);

            //array_push($array, $percentage);

            $requisitions = $goodsReceivedItem->relGoodsReceivedNote->relPurchaseOrder->purchaseOrderRequisitions->pluck('requisition_id')->toArray();
            $requisitionItems = RequisitionItem::whereIn('requisition_id', $requisitions)->where('product_id', $goodsReceivedItem->product_id)->get();
            if (isset($requisitionItems[0])) {
                foreach ($requisitionItems as $key => $requisitionItem) {
                    if ($qc_qty > 0) {
                        $this_qc_qty = round(($percentage > 0 ? ($requisitionItem->qty * ($percentage / 100)) : 0));
                        $this_qc_qty = ($this_qc_qty > $qc_qty ? $qc_qty : $this_qc_qty);

                        // array_push($array, [
                        //     'percentage' => $percentage,
                        //     'r' => $requisitionItem->qty,
                        //     'q' => $this_qc_qty
                        // ]);

                        $requisitionItem->qc_qty = $this_qc_qty;
                        $requisitionItem->save();

                        $qc_qty = ($qc_qty - $this_qc_qty);
                    }
                }
                if ($qc_qty > 0) {
                    $requisitionItem = RequisitionItem::whereIn('requisition_id', $requisitions)->where('product_id', $goodsReceivedItem->product_id)->first();
                    $requisitionItem->qc_qty = ($requisitionItem->qc_qty + round($qc_qty));
                    $requisitionItem->save();

                    // array_push($array, [
                    //     'percentage' => $percentage,
                    //     'r' => $requisitionItem->qty,
                    //     'q' => round($qc_qty),
                    //     'e' => true
                    // ]);
                }
            }
            //PO Generate Equally distribute
            //return $array;
        }
    }

    public function runLedgerQueries($ids, $grn, $date)
    {
        $accountDefaultSettings = accountDefaultSettings('json');
        $stockIns = GoodsReceivedItemStockIn::whereIn('id', $ids)->where('is_grn_complete', 'yes')->get();
        $items = [];
        $cost_centre_id = 0;
        if (isset($stockIns[0])) {
            foreach ($stockIns as $key => $item) {
                $cost_centre_id = $item->relGoodsReceivedItems->relGoodsReceivedNote->relPurchaseOrder->cost_centre_id;

                $debit_account = $accountDefaultSettings['inventory_account'];
                if (isset($item->relGoodsReceivedItems->relProduct->id)) {
                    if ($item->relGoodsReceivedItems->relProduct->is_service == 1) {
                        $debit_account = $accountDefaultSettings['cogs_account'];
                        if ($item->relGoodsReceivedItems->relProduct->cogs_account_id > 0) {
                            $debit_account = $item->relGoodsReceivedItems->relProduct->cogs_account_id;
                        }
                    } else {
                        if ($item->relGoodsReceivedItems->relProduct->inventory_account_id > 0) {
                            $debit_account = $item->relGoodsReceivedItems->relProduct->inventory_account_id;
                        }
                    }
                }

                array_push($items, [
                    'cost_centre_id' => $cost_centre_id,
                    'chart_of_account_id' => $debit_account,
                    'debit' => $item->total_amount,
                    'credit' => 0,
                    'narration' => 'GRN :: Inventory Debit',
                    'type' => 'grn',
                    'source' => $item->id
                ]);

                array_push($items, [
                    'cost_centre_id' => $cost_centre_id,
                    // 'chart_of_account_id' => (isset($item->relPurchaseOrder->relQuotation->relSuppliers->payable_account_id) && $item->relPurchaseOrder->relQuotation->relSuppliers->payable_account_id > 0 ? $item->relPurchaseOrder->relQuotation->relSuppliers->payable_account_id : $accountDefaultSettings['supplier_payable_account']),
                    'chart_of_account_id' => $accountDefaultSettings['grir_account'],
                    'debit' => 0,
                    'credit' => $item->total_amount,
                    'narration' => 'GRN :: GR/IR Credit',
                    'type' => 'grn',
                    'source' => $item->id
                ]);

                // array_push($items, [
                //     'cost_centre_id' => 2,
                //     'chart_of_account_id' => (isset($item->relPurchaseOrder->relQuotation->relSuppliers->payable_discount_id) && $item->relPurchaseOrder->relQuotation->relSuppliers->payable_discount_id > 0 ? $item->relPurchaseOrder->relQuotation->relSuppliers->payable_discount_id : $accountDefaultSettings['supplier_payable_discount_account']),
                //     'debit' => $item->discount,
                //     'credit' => 0,
                //     'narration' => 'GRN :: Supplier Discount Payable Debit',
                // ]);
            }
        }

        return saveLedgerEntries(5, date('Y-m-d H:i:s', strtotime($date . ' ' . date('H:i:s'))), 1, '', 'GRN', $items, $grn->relPurchaseOrder->relQuotation->exchange_rate_id, 0, 0, 0, getCostCentreCompany($cost_centre_id), false, 'json');
    }
}
