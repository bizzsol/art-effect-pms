<?php
bolt_decrypt( __FILE__ , '1Wl9rC'); return 0;
##!!!##