<?php
bolt_decrypt( __FILE__ , '4mVxS5'); return 0;
##!!!##