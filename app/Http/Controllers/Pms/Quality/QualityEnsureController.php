<?php
bolt_decrypt( __FILE__ , 'Hvk5eE'); return 0;
##!!!##