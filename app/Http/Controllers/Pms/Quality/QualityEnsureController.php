<?php
bolt_decrypt( __FILE__ , 'mLO1vQ'); return 0;
##!!!##

namespace App\Http\Controllers\Pms\Quality;

use App\Http\Controllers\Controller;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Http\Request;

use App\Models\PmsModels\InventoryModels\InventoryActionControl;
use App\Models\PmsModels\Product;
use App\Models\PmsModels\Warehouses;
use App\Models\PmsModels\PurchaseReturn;
use App\Models\PmsModels\Purchase\PurchaseOrder;
use App\Models\PmsModels\Purchase\PurchaseOrderItem;
use App\Models\PmsModels\Grn\GoodsReceivedNote;
use App\Models\PmsModels\Grn\GoodsReceivedSummary;
use App\Models\PmsModels\Grn\GoodsReceivedItem;
use App\Models\PmsModels\Grn\GoodsReceivedItemStockIn;
use App\Models\PmsModels\Grn\Faq;
use App\Models\PmsModels\Grn\ReturnChangeFaq;
use App\Models\PmsModels\RequisitionItem;

use App\Models\FixedAssets\FixedAssetBatch;
use App\Models\FixedAssets\FixedAssetBatchItem;
use App\Models\PmsModels\Accounts\CostCentre;
use App\Models\PmsModels\RequisitionDelivery;
use App\Models\PmsModels\RequisitionTracking;
use App\Models\PmsModels\Requisition;
use App\Models\PmsModels\RequisitionDeliveryItem;

use Illuminate\Support\Facades\Mail;
use DataTables;
use DB,Auth,Session,redirect;


class QualityEnsureController extends Controller
{
    public function approvedHeaderColumns($value='')
    {
        return array(
            ['SL', 'SL'],
            ['PO_reference', 'PO_reference', 'text-center'],
            ['PO_date', 'PO_date', 'text-center'],
            ['requisitions', 'requisitions', 'text-center'],
            ['challan', 'challan', 'text-center'],
            ['gate_in_reference', 'gate_in_reference', 'text-center'],
            ['gate_in_date', 'gate_in_date', 'text-center'],
            ['gate_in_qty', 'gate_in_qty', 'text-right'],
            ['received_status', 'received_status', 'text-center'],
            ['approved_qty', 'approved_qty', 'text-right'],
            ['options', 'options','text-center'],
        );
    }

    /**
     * Display a approved listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        try{

            $userUnits = auth()->user()->priorities->pluck('hr_unit_id')->toArray();
            $userDepartments = auth()->user()->priorities->pluck('hr_department_id')->toArray();
            $items = GoodsReceivedNote::with([
                'relPurchaseOrder.purchaseOrderRequisitions',
                'relPurchaseOrder.purchaseOrderRequisitions.requisition',
                'relGoodsReceivedItems'
            ])
            ->whereHas('relPurchaseOrder.relQuotation.relSuppliers', function($query){
                return $query->whereNotIn('name', ignoreSuppliers());
            })
            ->whereHas('relPurchaseOrder', function($query){
                return $query->where('is_send', 'yes');
            })
            ->when(isset(auth()->user()->employee->as_unit_id), function($query) use($userUnits){
                return $query->whereHas('relPurchaseOrder', function($query) use($userUnits){
                    return $query->where('hr_unit_id', $userUnits);
                });
            })
            // ->when(auth()->user()->hasRole('Department-Head'), function($query) use($userDepartments){
            //     return $query->whereHas('relPurchaseOrder.purchaseOrderRequisitions', function($query) use($userDepartments){
            //         return $query->where('hr_department_id', $userDepartments);
            //     });
            // })
            ->when(!auth()->user()->hasRole('Department-Head'), function($query){
                if (auth()->user()->hasRole('Employee')) {
                    return $query->where('is_sent_to_requisitor', 'yes')->whereHas('relPurchaseOrder.purchaseOrderRequisitions.requisition',
                        function ($query) {
                            return $query->where('author_id', auth()->user()->id);
                        });
                }
                return $query->whereHas('relPurchaseOrder.purchaseOrderRequisitions', function($query){
                    return $query->where('hr_department_id', 0);
                });
            })
            ->when(auth()->user()->hasRole('Employee'), function ($query) {
                return $query->whereHas('relPurchaseOrder.purchaseOrderRequisitions.requisition', function ($query) {
                    return $query->where('author_id', auth()->user()->id);
                });
            })
            ->whereHas('relGoodsReceivedItems', function($query){
                return $query->where('quality_ensure','approved');
            })
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('received_date', 'desc');
            });
                
            if (request()->ajax()) {
                return DataTables::of($items)
                    ->addIndexColumn()
                    ->addColumn('PO_reference', function($grn){
                        return '<a href="javascript:void(0)" class="btn btn-link" onclick="purchaseOrderDetails($(this))" data-src="'.route('pms.purchase.order-list.show', $grn->relPurchaseOrder->id).'" data-title="Purchase Order Details">'.$grn->relPurchaseOrder->reference_no.'
                                        </a>';
                    })
                    ->filterColumn('PO_reference', function ($query, $keyword) {
                        return $query->whereHas('relPurchaseOrder', function ($query) use($keyword) {
                            $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                        });
                    })
                    ->orderColumn('PO_reference', function ($query, $order) {
                        return pleaseSortMe($query, $order, PurchaseOrder::select('purchase_orders.reference_no')
                            ->whereColumn('purchase_orders.id', 'goods_received_notes.purchase_order_id')
                        );
                    })
                    ->addColumn('PO_date', function($grn){
                        return date('Y-m-d', strtotime($grn->relPurchaseOrder->po_date));
                    })
                    ->filterColumn('PO_date', function ($query, $keyword) {
                        return $query->whereHas('relPurchaseOrder', function ($query) use($keyword) {
                            $query->where('po_date', 'LIKE', '%'.$keyword.'%');
                        });
                    })
                    ->orderColumn('PO_reference', function ($query, $order) {
                        return pleaseSortMe($query, $order, PurchaseOrder::select('purchase_orders.po_date')
                            ->whereColumn('purchase_orders.id', 'goods_received_notes.purchase_order_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('requisitions', function ($grn) {
                        return $grn->relPurchaseOrder->purchaseOrderRequisitions->pluck('requisition.reference_no')->implode(', ');
                    })
                    ->filterColumn('requisitions', function ($query, $keyword) {
                        return $query->whereHas('relPurchaseOrder.purchaseOrderRequisitions.requisition', function ($query) use ($keyword) {
                            $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('requisitions', function ($query, $order) {
                        return pleaseSortMe($query, $order, PurchaseOrder::select('requisitions.reference_no')
                            ->join('requisitions', 'requisitions.id', '=', 'purchase_order_requisitions.requisition_id')
                            ->join('purchase_order_requisitions', 'purchase_order_requisitions.purchase_order_id', '=', 'purchase_orders.id')
                            ->whereColumn('purchase_orders.id', 'goods_received_notes.purchase_order_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('gate_in_reference', function($grn){
                        return '<div style="width: 100%">
                                    <div style="width: 90%;float: left;clear:right">
                                        <a href="javascript:void(0)" class="btn btn-link" onclick="showQEPODetails($(this))" data-src="'.route('pms.grn.grn-process.show',$grn->id).'" data-title="Gate In Details">'.$grn->reference_no.'</a>
                                    </div>
                                    <div style="width: 10%;float: left;clear:right">
                                        <a class="btn btn-primary btn-xs" href="'. url('pms/grn/gate-in-slip/'.$grn->purchase_order_id.'?grn='.$grn->id) .'" target="_blank" style="margin-top: 7.5px" title="Gate In Slip"><i class="la la-print"></i></a>
                                    </div>
                                </div>';
                    })
                    ->filterColumn('gate_in_reference', function ($query, $keyword) {
                        $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                    })
                    ->orderColumn('gate_in_reference', function ($query, $order) {
                        return $query->orderBy('reference_no', $order);
                    })
                    ->addColumn('gate_in_date', function($grn){
                        return date('Y-m-d', strtotime($grn->received_date));
                    })
                    ->filterColumn('gate_in_date', function ($query, $keyword) {
                        $query->where('received_date', 'LIKE', '%'.$keyword.'%');
                    })
                    ->orderColumn('gate_in_date', function ($query, $order) {
                        return $query->orderBy('received_date', $order);
                    })
                    ->addColumn('gate_in_qty', function($grn){
                        return $grn->relGoodsReceivedItems->sum('qty');
                    })
                    ->editColumn('received_status', function($grn){
                        if($grn->received_status == 'partial'){
                            return '<a class="btn btn-warning btn-xs">Partial Received</a>';
                        }elseif($grn->received_status == 'full'){
                            return '<a class="btn btn-success btn-xs">Full Received</a>';
                        }else{
                            return '<a class="btn btn-dark btn-xs">'.ucwords($grn->received_status).'</a>';
                        }
                    })
                    ->addColumn('approved_qty', function($grn){
                        return $grn->relGoodsReceivedItems->where('quality_ensure','approved')->sum('qty');
                    })
                    ->addColumn('options', function($grn){
                        $options = '';
                        $count = $grn->relGoodsReceivedItems()->where('quality_ensure','approved')->count();
                        if($count > 0){
                            $options .= '<a href="'.route('pms.quality.ensure.approved.single.list',$grn->id).'" class="btn btn-xs btn-info">Items ('.$count.')</a>';
                        }
                        $options .= '&nbsp;&nbsp;<a target="_blank" href="'.route('pms.quality.approved.item.print',['id'=>$grn->id,'type'=>'approved']).'" title="Quality Ensure Approved Print View" class="btn btn-xs btn-success"><i class="las la-print"></i></a>';

                        return $options;
                    })
                    ->rawColumns(['PO_reference', 'gate_in_reference', 'received_status', 'options'])
                    ->make(true);
            }

            return view('pms.backend.pages.quality.approved-index', [
                'title' => "Quality Ensure Approval List",
                'headerColumns' => $this->approvedHeaderColumns()
            ]);
        }catch(\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

   /**
     * Show the Grn Wise Approved Item List.
     *
     * @return \Illuminate\Http\Response
     */

    public function ensureCheck($id)
    {
        try{
            $title = "Quality Ensure Check";

            $grn = GoodsReceivedNote::with([
                'relPurchaseOrder.relQuotation.relSuppliers.SupplierRatings',
                'relPurchaseOrder.relQuotation.exchangeRate.currency',
                'relPurchaseOrder.relQuotation',
                'relGoodsReceivedItems.relProduct.productUnit',
                'relGoodsReceivedItems.relProduct.category.category',
                'relGoodsReceivedItems.relProduct.attributes.attributeOption.attribute',
                'relGoodsReceivedItems.attributes.attributeOption.attribute',
                'relGoodsReceivedItems.relPurchaseOrderReturns'
            ])
            ->findOrFail($id);
            
            $grn->rel_goods_received_items = $grn->relGoodsReceivedItems->whereIn('quality_ensure',['pending']);
            $wareHouses = Warehouses::select('name','id')->get();
            $faqs = Faq::where('status','active')->get();
            return view('pms.backend.pages.quality.pending-index',compact('title','grn','wareHouses','faqs'));
        }catch(\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function getFaqs($category_id)
    {
        $questions = Faq::where('category_id', $category_id)->where('status','active')->get();
        $data = '';
        if(isset($questions[0])){
            foreach($questions as $key => $question){
                $data .='<li>
                    <input class="form-check-input" type="checkbox" name="faq_id[]" id="faq_'.$question->id.'" value="'.$question->id.'" required>
                    <label class="form-check-label" for="faq_'.$question->id.'"><strong>'.$question->name.'</strong>
                    </label>
                </li>';
            }
        }

        return $data;
    }
    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function save(Request $request)
    {
        $model = GoodsReceivedItem::with([
            'relGoodsReceivedNote.relPurchaseOrder.purchaseOrderRequisitions.requisition'
        ])->findOrFail($request->id);
        $product = Product::findOrFail($model->product_id);
        if(isset($model->id) && $request->quality_ensure === 'approved'){

            DB::beginTransaction();
            try{
                
                $newText = 'Approved';
                $update=$model->update([
                    'quality_ensure' => $request->quality_ensure,
                    'received_qty' =>  $model->qty,
                    'updated_at' => date('Y-m-d H:i:s'),
                    'updated_by' => Auth::user()->id
                ]);

                $model = GoodsReceivedItem::findOrFail($request->id);

                $prefix='QE-AP-'.date('y', strtotime(date('Y-m-d'))).'-'.(auth()->user()->employee->unit->hr_unit_short_name).'-';
                $refNo=uniqueCode(18,$prefix,'goods_received_items_stock_in','id');

                $GRItemsStockIn = new GoodsReceivedItemStockIn();
                $GRItemsStockIn->purchase_order_id = $model->relGoodsReceivedNote->purchase_order_id;
                $GRItemsStockIn->goods_received_item_id = $model->id;
                $GRItemsStockIn->reference_no = $refNo;
                $GRItemsStockIn->unit_amount = $model->unit_amount;
                $GRItemsStockIn->received_qty = $model->qty;
                $GRItemsStockIn->sub_total = $model->sub_total;
                $GRItemsStockIn->discount_percentage = $model->discount_percentage;
                $GRItemsStockIn->discount = $model->discount;
                $GRItemsStockIn->vat_percentage = $model->vat_percentage;
                $GRItemsStockIn->vat = $model->vat;
                $GRItemsStockIn->total_amount = $model->total_amount;
                $GRItemsStockIn->is_grn_complete = 'no';
                $GRItemsStockIn->save();

                if($model->relGoodsReceivedNote->relPurchaseOrder->purchaseOrderRequisitions->first()->requisition->author_id == auth()->user()->id){
                    $this->processSelfGRN($GRItemsStockIn);
                }

                $message = '<span class="notification-links" data-src="'.route('pms.grn.grn-process.show',$model->relGoodsReceivedNote->id).'?view" data-title="Gate-In Details">Reference No:'.$model->relGoodsReceivedNote->reference_no.'. Waiting for the GRN.</span>';

                CreateOrUpdateNotification($message,'unread','',getManagerInfo('Store-Manager',$model->relGoodsReceivedNote->relPurchaseOrder->hr_unit_id),'send-to-store');

                CreateOrUpdateNotification($message,'unread','',getManagerInfo('Purchase-Department'),'sent-to-purchase','');

                $this->updateQCQuantity($model->id, $model->qty);

                DB::commit();

                return response()->json([
                    'success' => true,
                    'new_text' => $newText,
                    'message' => 'Successfully Updated this Item Quality Status!!'
                ]);
            }catch (\Throwable $th){
                DB::rollback();
                return response()->json([
                    'success' => false,
                    'message' => $th->getMessage()
                ]);
            }

        }elseif(isset($model->id) && $request->quality_ensure === 'return-change' || $request->quality_ensure === 'return'){

            if (($model->qty) < $request->return_qty) {
                return $this->backWithWarning('Your return qty is greater then maximum qty');
            }

            if ($request->return_qty <= 0) {
               return $this->backWithWarning('Minimum One item is required');
            }

            $code=($request->quality_ensure=='return-change'?'QE-RP-':'QE-RT-');

            $prefix=$code.date('y', strtotime(date('Y-m-d'))).'-'.(auth()->user()->employee->unit->hr_unit_short_name).'-';
            $refNo=uniqueCode(18,$prefix,'goods_received_items_stock_in','id');

            if($request->quality_ensure=='return-change'){
                $purchaseReturnCodePrefix = 'RP-'.date('y', strtotime(date('Y-m-d'))).'-'.(auth()->user()->employee->unit->hr_unit_short_name).'-';
                $prev = PurchaseReturn::whereHas('relGoodsReceivedItems.relGoodsReceivedNote', function($query) use($model){
                    return $query->where('id', $model->goods_received_note_id);
                })
                ->where('status', 'return-change')
                ->first();
                if(isset($prev->id)){
                    $purchaseReturnCode = $prev->code;
                }else{
                    $purchaseReturnCode = uniqueCode(16,$purchaseReturnCodePrefix,'purchase_returns','id');
                }
            }else{
                $purchaseReturnCodePrefix = 'RT-'.date('y', strtotime(date('Y-m-d'))).'-'.(auth()->user()->employee->unit->hr_unit_short_name).'-';
                $prev = PurchaseReturn::whereHas('relGoodsReceivedItems.relGoodsReceivedNote', function($query) use($model){
                    return $query->where('id', $model->goods_received_note_id);
                })
                ->where('status', 'return')
                ->first();
                if(isset($prev->id)){
                    $purchaseReturnCode = $prev->code;
                }else{
                    $purchaseReturnCode = uniqueCode(16,$purchaseReturnCodePrefix,'purchase_returns','id');
                }
            }

            DB::beginTransaction();
            try{
                $update = $model->update([
                    'quality_ensure' => $request->quality_ensure,
                    'received_qty' =>  $model->qty-$request->return_qty,
                    'updated_at' => date('Y-m-d H:i:s'),
                    'updated_by' => Auth::user()->id
                ]);

                if ($update) {
                    PurchaseReturn::create([
                        'goods_received_item_id'=>$model->id,
                        'code' => $purchaseReturnCode,
                        'return_note' => $request->return_note,
                        'return_qty' => $request->return_qty,
                        'status' => $request->quality_ensure,
                    ]);

                    //subtotal,received_qty,discount_amount,vat_amount
                    $receivedQty=$model->qty-$request->return_qty;
                    if($receivedQty > 0){
                        $subtotal=$receivedQty*$model->unit_amount;
                        $discountAmount= ($model->discount_percentage * $subtotal)/100;
                        $vatAmount= ($model->vat_percentage * $subtotal)/100;

                        $GRItemsStockIn = new GoodsReceivedItemStockIn();
                        $GRItemsStockIn->purchase_order_id = $model->relGoodsReceivedNote->purchase_order_id;
                        $GRItemsStockIn->reference_no = $refNo;
                        $GRItemsStockIn->goods_received_item_id = $model->id;
                        $GRItemsStockIn->unit_amount = $model->unit_amount;
                        $GRItemsStockIn->received_qty = $receivedQty;
                        $GRItemsStockIn->sub_total = $subtotal;
                        $GRItemsStockIn->discount_percentage = $model->discount_percentage;
                        $GRItemsStockIn->discount = $discountAmount;
                        $GRItemsStockIn->vat_percentage = $model->vat_percentage;
                        $GRItemsStockIn->vat = $vatAmount;
                        $GRItemsStockIn->total_amount = ($subtotal-$discountAmount)+$vatAmount;
                        $GRItemsStockIn->is_grn_complete = 'no';
                        $GRItemsStockIn->save();

                        if($model->relGoodsReceivedNote->relPurchaseOrder->purchaseOrderRequisitions->first()->requisition->author_id == auth()->user()->id){
                            $this->processSelfGRN($GRItemsStockIn);
                        }
                    }

                    if (!empty($request->faq_id)) {
                        foreach ($request->faq_id as $key => $faq_id) {
                            ReturnChangeFaq::create([
                                'faq_id'=>$faq_id,
                                'goods_received_item_id'=>$model->id
                            ]);
                        }
                    }
                }
                
                $message = '<span class="notification-links" data-src="'.route('pms.grn.grn-process.show',$model->relGoodsReceivedNote->id).'?view" data-title="Gate-In Details">Reference No:'.$model->relGoodsReceivedNote->reference_no.'. Waiting for the GRN.</span>';

                CreateOrUpdateNotification($message,'unread','',getManagerInfo('Store-Manager',$model->relGoodsReceivedNote->relPurchaseOrder->hr_unit_id),'send-to-store');

                CreateOrUpdateNotification($message,'unread','',getManagerInfo('Purchase-Department'),'sent-to-purchase','');

                $this->updateQCQuantity($model->id, $receivedQty);
                DB::commit();

                return $this->backWithSuccess('Successfully Updated this Item Quality Status!!');

            }catch (Throwable $th){
                DB::rollback();
                return $this->backWithError($th->getMessage());
            }
        }

        return back();
    }

    public function updateQCQuantity($goods_received_item_id, $qc_qty)
    {
        if($qc_qty > 0){
            $array = [];

            //PO Generate Equally distribute
            $goodsReceivedItem = GoodsReceivedItem::find($goods_received_item_id);
            $requisition_qty = RequisitionItem::where('product_id', $goodsReceivedItem->product_id)
            ->where('uid', $goodsReceivedItem->uid)
            ->whereHas('requisition.purchaseOrders.purchaseOrder.relGoodReceiveNote', function($query) use($goodsReceivedItem){
                return $query->where('id', $goodsReceivedItem->goods_received_note_id);
            })
            ->sum('qty');
            $percentage = ($requisition_qty > 0 && $qc_qty > 0 ? (($qc_qty/$requisition_qty)*100) : 0);

            //array_push($array, $percentage);

            $requisitions = $goodsReceivedItem->relGoodsReceivedNote->relPurchaseOrder->purchaseOrderRequisitions->pluck('requisition_id')->toArray();
            $requisitionItems = RequisitionItem::whereIn('requisition_id', $requisitions)
            ->where('product_id', $goodsReceivedItem->product_id)
            ->where('uid', $goodsReceivedItem->uid)
            ->get();
            if(isset($requisitionItems[0])){
                foreach($requisitionItems as $key => $requisitionItem){
                    if($qc_qty>0){
                        $this_qc_qty = round(($percentage > 0 ? ($requisitionItem->qty*($percentage/100)) : 0));
                        $this_qc_qty = ($this_qc_qty > $qc_qty ? $qc_qty : $this_qc_qty);

                        // array_push($array, [
                        //     'percentage' => $percentage,
                        //     'r' => $requisitionItem->qty,
                        //     'q' => $this_qc_qty
                        // ]);
                        
                        $requisitionItem->qc_qty = $this_qc_qty;
                        $requisitionItem->save();

                        $qc_qty = ($qc_qty - $this_qc_qty);
                    }
                }
                if($qc_qty>0){
                    $requisitionItem = RequisitionItem::whereIn('requisition_id', $requisitions)->where('product_id', $goodsReceivedItem->product_id)->where('uid', $goodsReceivedItem->uid)->first();
                    $requisitionItem->qc_qty = ($requisitionItem->qc_qty+round($qc_qty));
                    $requisitionItem->save();

                    // array_push($array, [
                    //     'percentage' => $percentage,
                    //     'r' => $requisitionItem->qty,
                    //     'q' => round($qc_qty),
                    //     'e' => true
                    // ]);
                }
            }
            //PO Generate Equally distribute
            //return $array;
        }
    }


    /**
    * Show the Grn Wise Approved Item List.
    *
    * @return \Illuminate\Http\Response
    */

    public function grnWiseApprovedItemList($id)
    {
        try{
            $title="Quality Ensure Approval List";
            $grn = GoodsReceivedNote::find($id);
            $goodsReceivedItemId = GoodsReceivedItem::where('goods_received_note_id',$id)->where('quality_ensure','approved')->pluck('id')->all();

            $approval_list = GoodsReceivedItemStockIn::with([
                'relGoodsReceivedItems.relProduct.attributes.attributeOption.attribute',
                'relGoodsReceivedItems.attributes.attributeOption.attribute',
            ])->whereIn('goods_received_item_id',$goodsReceivedItemId)->orderBy('id','desc')->paginate(30);
            return view('pms.backend.pages.quality.approved-list',compact('title','approval_list', 'grn'));
        }catch(\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function returnListHeaderColumns($value='')
    {
        return array(
            ['SL', 'SL'],
            ['PO_reference', 'PO_reference', 'text-center'],
            ['PO_date', 'PO_date', 'text-center'],
            ['requisitions', 'requisitions', 'text-center'],
            ['challan', 'challan', 'text-center'],
            ['gate_in_reference', 'gate_in_reference', 'text-center'],
            ['gate_in_qty', 'gate_in_qty', 'text-right'],
            ['return_qty', 'return_qty', 'text-right'],
            ['received_status', 'received_status', 'text-center'],
            ['options', 'options','text-center'],
        );
    }

    /**
    * Show the Grn Wise Return List.
    *
    * @return \Illuminate\Http\Response
    */
    public function returnlList()
    {
        try{
            if (request()->ajax()) {
                $userUnits = auth()->user()->priorities->pluck('hr_unit_id')->toArray();
                $userDepartments = auth()->user()->priorities->pluck('hr_department_id')->toArray();
                $items = GoodsReceivedNote::with([
                    'relPurchaseOrder.relPurchaseOrderItems',
                    'relPurchaseOrder.purchaseOrderRequisitions.requisition',
                    'relGoodsReceivedItems',
                ])
                ->whereHas('relPurchaseOrder', function($query){
                    return $query->where('is_send', 'yes');
                })
                ->when(isset(auth()->user()->employee->as_unit_id), function($query) use($userUnits){
                    return $query->whereHas('relPurchaseOrder', function($query) use($userUnits){
                        return $query->where('hr_unit_id', $userUnits);
                    });
                })
                // ->when(auth()->user()->hasRole('Department-Head'), function($query) use($userDepartments){
                //     return $query->whereHas('relPurchaseOrder.purchaseOrderRequisitions', function($query) use($userDepartments){
                //         return $query->where('hr_department_id', $userDepartments);
                //     });
                // })
                ->when(!auth()->user()->hasRole('Department-Head'), function($query){
                    if (auth()->user()->hasRole('Employee')) {
                        return $query->where('is_sent_to_requisitor', 'yes')->whereHas('relPurchaseOrder.purchaseOrderRequisitions.requisition',
                            function ($query) {
                                return $query->where('author_id', auth()->user()->id);
                            });
                    }
                    return $query->whereHas('relPurchaseOrder.purchaseOrderRequisitions', function($query){
                        return $query->where('hr_department_id', 0);
                    });
                })
                ->when(auth()->user()->hasRole('Employee'), function ($query) {
                    return $query->whereHas('relPurchaseOrder.purchaseOrderRequisitions.requisition', function ($query) {
                        return $query->where('author_id', auth()->user()->id);
                    });
                })
                ->whereHas('relGoodsReceivedItems', function($query){
                    return $query->where('quality_ensure','return');
                })
                ->when(!datatableOrdering(), function($query){
                    return $query->orderby('received_date', 'desc');
                });

                return DataTables::of($items)
                    ->addIndexColumn()
                    ->addColumn('PO_reference', function($grn){
                        return '<a href="javascript:void(0)" class="btn btn-link" onclick="purchaseOrderDetails($(this))" data-src="'.route('pms.purchase.order-list.show', $grn->relPurchaseOrder->id).'" data-title="Purchase Order Details">'.$grn->relPurchaseOrder->reference_no.'
                                        </a>';
                    })
                    ->filterColumn('PO_reference', function ($query, $keyword) {
                        return $query->whereHas('relPurchaseOrder', function ($query) use($keyword) {
                            $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                        });
                    })
                    ->orderColumn('PO_reference', function ($query, $order) {
                        return pleaseSortMe($query, $order, PurchaseOrder::select('purchase_orders.reference_no')
                            ->whereColumn('purchase_orders.id', 'goods_received_notes.purchase_order_id')
                        );
                    })
                    ->addColumn('PO_date', function($grn){
                        return date('Y-m-d', strtotime($grn->relPurchaseOrder->po_date));
                    })
                    ->filterColumn('PO_date', function ($query, $keyword) {
                        return $query->whereHas('relPurchaseOrder', function ($query) use($keyword) {
                            $query->where('po_date', 'LIKE', '%'.$keyword.'%');
                        });
                    })
                    ->filterColumn('PO_date', function ($query, $keyword) {
                        return $query->whereHas('relPurchaseOrder', function ($query) use($keyword) {
                            $query->where('po_date', 'LIKE', '%'.$keyword.'%');
                        });
                    })
                    ->addColumn('requisitions', function ($grn) {
                        return $grn->relPurchaseOrder->purchaseOrderRequisitions->pluck('requisition.reference_no')->implode(', ');
                    })
                    ->filterColumn('requisitions', function ($query, $keyword) {
                        return $query->whereHas('relPurchaseOrder.purchaseOrderRequisitions.requisition', function ($query) use ($keyword) {
                            $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('requisitions', function ($query, $order) {
                        return pleaseSortMe($query, $order, PurchaseOrder::select('requisitions.reference_no')
                            ->join('requisitions', 'requisitions.id', '=', 'purchase_order_requisitions.requisition_id')
                            ->join('purchase_order_requisitions', 'purchase_order_requisitions.purchase_order_id', '=', 'purchase_orders.id')
                            ->whereColumn('purchase_orders.id', 'goods_received_notes.purchase_order_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('gate_in_reference', function($grn){
                        return '<div style="width: 100%">
                                    <div style="width: 90%;float: left;clear:right">
                                        <a href="javascript:void(0)" class="btn btn-link" onclick="showQEPODetails($(this))" data-src="'.route('pms.grn.grn-process.show',$grn->id).'" data-title="Gate In Details">'.$grn->reference_no.'</a>
                                    </div>
                                    <div style="width: 10%;float: left;clear:right">
                                        <a class="btn btn-primary btn-xs" href="'. url('pms/grn/gate-in-slip/'.$grn->purchase_order_id.'?grn='.$grn->id) .'" target="_blank" style="margin-top: 7.5px"><i class="la la-print"></i></a>
                                    </div>
                                </div>';
                    })
                    ->filterColumn('gate_in_reference', function ($query, $keyword) {
                        $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                    })
                    ->orderColumn('gate_in_reference', function ($query, $order) {
                        return $query->orderBy('reference_no', $order);
                    })
                    ->addColumn('gate_in_qty', function($grn){
                        return $grn->relGoodsReceivedItems->sum('qty');
                    })
                    ->addColumn('return_qty', function($grn){
                        return $grn->relGoodsReceivedItems->sum('qty');
                    })
                    ->editColumn('received_status', function($grn){
                        if($grn->received_status == 'partial'){
                            return '<a class="btn btn-warning btn-xs">Partial Received</a>';
                        }elseif($grn->received_status == 'full'){
                            return '<a class="btn btn-success btn-xs">Full Received</a>';
                        }else{
                            return '<a class="btn btn-dark btn-xs">'.ucwords($grn->received_status).'</a>';
                        }
                    })
                    ->addColumn('options', function($grn){
                        $returned = PurchaseReturn::whereHas('relGoodsReceivedItems', function($query) use($grn){
                            return $query->where('goods_received_note_id', $grn->id);
                        })->where('status', 'return')->sum('return_qty');

                        $returnedCount = PurchaseReturn::whereHas('relGoodsReceivedItems', function($query) use($grn){
                            return $query->where('goods_received_note_id', $grn->id);
                        })->where('status', 'return')->count();
                        
                        $approved = PurchaseReturn::whereHas('relGoodsReceivedItems', function($query) use($grn){
                            return $query->where('goods_received_note_id', $grn->id);
                        })->where('status', 'return')->sum('received_qty');
                        $options = '';
                        if($returned > 0){
                            $options .= '<a href="'.route('pms.quality.ensure.return.single.list',$grn->id).'" class="btn btn-xs btn-info">Items ('.$returnedCount.')</a>';
                            $options .= '&nbsp;&nbsp;<a target="__blank" href="'.route('pms.quality.return.item.print',['id'=>$grn->id,'type'=>'return']).'" class="btn btn-xs btn-warning" title="Return List"><i class="las la-print"></i></a>';
                        }
                            
                        if($approved > 0){
                            $options .= '&nbsp;&nbsp;<a target="__blank" href="'.route('pms.quality.return.item.print',['id'=>$grn->id,'type'=>'return-approved-list']).'" class="btn btn-xs btn-success" title="Return Approved List"><i class="las la-print"></i></a>';
                        }
                        return $options;
                    })
                    ->rawColumns(['PO_reference', 'gate_in_reference', 'received_status', 'options'])
                    ->make(true);
            }

            return view('pms.backend.pages.quality.return-index', [
                'title' => "Quality Ensure Return List",
                'headerColumns' => $this->returnListHeaderColumns()
            ]);
        }catch(\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
    * Show the Grn Wise Single Return Item List.
    *
    * @return \Illuminate\Http\Response
    */

    public function grnWiseReturnItemList($id)
    {
        try{

            $title="Quality Ensure Return List";
            $grn = GoodsReceivedNote::find($id);
            $goodsReceivedItemId = GoodsReceivedItem::where('goods_received_note_id',$id)->where('quality_ensure','return')->pluck('id')->all();
            $returnList = PurchaseReturn::with([
                'relGoodsReceivedItems.relProduct.category.category',
                'relGoodsReceivedItems.relProduct.attributes.attributeOption.attribute',
                'relGoodsReceivedItems.attributes.attributeOption.attribute',
            ])->whereIn('goods_received_item_id',$goodsReceivedItemId)->orderBy('id','desc')->paginate(30);

            return view('pms.backend.pages.quality.return-list',compact('title','returnList', 'grn'));
        }catch(\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function returnChangeListHeaderColumns($value='')
    {
        return array(
            ['SL', 'SL'],
            ['PO_reference', 'PO_reference', 'text-center'],
            ['PO_date', 'PO_date', 'text-center'],
            ['requisitions', 'requisitions', 'text-center'],
            ['challan', 'challan', 'text-center'],
            ['gate_in_reference', 'gate_in_reference', 'text-center'],
            ['gate_in_qty', 'gate_in_qty', 'text-right'],
            ['return_qty', 'return_qty', 'text-right'],
            ['received_status', 'received_status', 'text-center'],
            ['options', 'options','text-center'],
        );
    }

    /**
    * Show the Grn Wise Return Change List.
    *
    * @return \Illuminate\Http\Response
    */

    public function returnChangeList()
    {
        try{
            if (request()->ajax()) {
                $userUnits = auth()->user()->priorities->pluck('hr_unit_id')->toArray();
                $userDepartments = auth()->user()->priorities->pluck('hr_department_id')->toArray();
                $items = GoodsReceivedNote::with([
                    'relPurchaseOrder.relPurchaseOrderItems',
                    'relPurchaseOrder.purchaseOrderRequisitions.requisition',
                    'relGoodsReceivedItems'
                ])
                ->whereHas('relPurchaseOrder', function($query){
                    return $query->where('is_send', 'yes');
                })
                ->when(isset(auth()->user()->employee->as_unit_id), function($query) use($userUnits){
                    return $query->whereHas('relPurchaseOrder', function($query) use($userUnits){
                        return $query->where('hr_unit_id', $userUnits);
                    });
                })
                // ->when(auth()->user()->hasRole('Department-Head'), function($query) use($userDepartments){
                //     return $query->whereHas('relPurchaseOrder.purchaseOrderRequisitions', function($query) use($userDepartments){
                //         return $query->where('hr_department_id', $userDepartments);
                //     });
                // })
                ->when(!auth()->user()->hasRole('Department-Head'), function($query){
                    if (auth()->user()->hasRole('Employee')) {
                        return $query->where('is_sent_to_requisitor', 'yes')->whereHas('relPurchaseOrder.purchaseOrderRequisitions.requisition',
                            function ($query) {
                                return $query->where('author_id', auth()->user()->id);
                            });
                    }
                    return $query->whereHas('relPurchaseOrder.purchaseOrderRequisitions', function($query){
                        return $query->where('hr_department_id', 0);
                    });
                })
                ->when(auth()->user()->hasRole('Employee'), function ($query) {
                    return $query->whereHas('relPurchaseOrder.purchaseOrderRequisitions.requisition', function ($query) {
                        return $query->where('author_id', auth()->user()->id);
                    });
                })
                ->whereHas('relGoodsReceivedItems', function($query){
                    return $query->where('quality_ensure','return-change');
                })
                ->when(!datatableOrdering(), function($query){
                    return $query->orderby('received_date', 'desc');
                });

                return DataTables::of($items)
                    ->addIndexColumn()
                    ->addColumn('PO_reference', function($grn){
                        return '<a href="javascript:void(0)" class="btn btn-link" onclick="purchaseOrderDetails($(this))" data-src="'.route('pms.purchase.order-list.show', $grn->relPurchaseOrder->id).'" data-title="Purchase Order Details">'.$grn->relPurchaseOrder->reference_no.'
                                        </a>';
                    })
                    ->filterColumn('PO_reference', function ($query, $keyword) {
                        return $query->whereHas('relPurchaseOrder', function ($query) use($keyword) {
                            $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                        });
                    })
                    ->orderColumn('PO_reference', function ($query, $order) {
                        return pleaseSortMe($query, $order, PurchaseOrder::select('purchase_orders.reference_no')
                            ->whereColumn('purchase_orders.id', 'goods_received_notes.purchase_order_id')
                        );
                    })
                    ->addColumn('PO_date', function($grn){
                        return date('Y-m-d', strtotime($grn->relPurchaseOrder->po_date));
                    })
                    ->filterColumn('PO_date', function ($query, $keyword) {
                        return $query->whereHas('relPurchaseOrder', function ($query) use($keyword) {
                            $query->where('po_date', 'LIKE', '%'.$keyword.'%');
                        });
                    })
                    ->orderColumn('PO_reference', function ($query, $order) {
                        return pleaseSortMe($query, $order, PurchaseOrder::select('purchase_orders.po_date')
                            ->whereColumn('purchase_orders.id', 'goods_received_notes.purchase_order_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('requisitions', function ($grn) {
                        return $grn->relPurchaseOrder->purchaseOrderRequisitions->pluck('requisition.reference_no')->implode(', ');
                    })
                    ->filterColumn('requisitions', function ($query, $keyword) {
                        return $query->whereHas('relPurchaseOrder.purchaseOrderRequisitions.requisition', function ($query) use ($keyword) {
                            $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('requisitions', function ($query, $order) {
                        return pleaseSortMe($query, $order, PurchaseOrder::select('requisitions.reference_no')
                            ->join('requisitions', 'requisitions.id', '=', 'purchase_order_requisitions.requisition_id')
                            ->join('purchase_order_requisitions', 'purchase_order_requisitions.purchase_order_id', '=', 'purchase_orders.id')
                            ->whereColumn('purchase_orders.id', 'goods_received_notes.purchase_order_id')
                            ->take(1)
                        );
                    })
                    ->addColumn('gate_in_reference', function($grn){
                        return '<div style="width: 100%">
                                    <div style="width: 90%;float: left;clear:right">
                                        <a href="javascript:void(0)" class="btn btn-link" onclick="showQEPODetails($(this))" data-src="'.route('pms.grn.grn-process.show',$grn->id).'" data-title="Gate In Details">'.$grn->reference_no.'</a>
                                    </div>
                                    <div style="width: 10%;float: left;clear:right">
                                        <a class="btn btn-primary btn-xs" href="'. url('pms/grn/gate-in-slip/'.$grn->purchase_order_id.'?grn='.$grn->id) .'" target="_blank" style="margin-top: 7.5px"><i class="la la-print"></i></a>
                                    </div>
                                </div>';
                    })
                    ->filterColumn('gate_in_reference', function ($query, $keyword) {
                        $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                    })
                    ->orderColumn('gate_in_reference', function ($query, $order) {
                        return $query->orderBy('reference_no', $order);
                    })
                    ->addColumn('gate_in_qty', function($grn){
                        return $grn->relGoodsReceivedItems->sum('qty');
                    })
                    ->addColumn('return_qty', function($grn){
                        return $grn->relGoodsReceivedItems->where('quality_ensure','return-change')->sum('qty')-$grn->relGoodsReceivedItems->where('quality_ensure','return-change')->sum('received_qty');
                    })
                    ->editColumn('received_status', function($grn){
                        if($grn->received_status == 'partial'){
                            return '<a class="btn btn-warning btn-xs">Partial Received</a>';
                        }elseif($grn->received_status == 'full'){
                            return '<a class="btn btn-success btn-xs">Full Received</a>';
                        }else{
                            return '<a class="btn btn-dark btn-xs">'.ucwords($grn->received_status).'</a>';
                        }
                    })
                    ->addColumn('options', function($grn){
                        $returned = PurchaseReturn::whereHas('relGoodsReceivedItems', function($query) use($grn){
                            return $query->where('goods_received_note_id', $grn->id);
                        })->where('status', 'return-change')->sum('return_qty');

                        $returnedCount = PurchaseReturn::whereHas('relGoodsReceivedItems', function($query) use($grn){
                            return $query->where('goods_received_note_id', $grn->id);
                        })->where('status', 'return-change')->count();
                        
                        $approved = PurchaseReturn::whereHas('relGoodsReceivedItems', function($query) use($grn){
                            return $query->where('goods_received_note_id', $grn->id);
                        })->where('status', 'return-change')->sum('received_qty');
                        $count = $grn->relGoodsReceivedItems()->where('quality_ensure','return-change')->count();

                        $options = '';
                        if(auth()->user()->hasPermissionTo('quality-ensure-return-change-received-list')){
                            if($count > 0){
                                $options .= '<a href="'.route('pms.quality.ensure.return.change.single.list',$grn->id).'" class="btn btn-xs btn-info">'.__('Items').' ('.$count.')</a>';
                            }
                        }

                        if($returned > 0){
                            $options .= '&nbsp;&nbsp;<a target="__blank" href="'.route('pms.quality.return.replace.item.print',['id'=>$grn->id,'type'=>'return-change-list']).'" title="Return Replace List" class="btn btn-xs btn-warning"><i class="las la-print"></i></a>';
                        }
                        

                        if($approved > 0){
                            $options .= '&nbsp;&nbsp;<a target="__blank" href="'.route('pms.quality.return.replace.item.print',['id'=>$grn->id,'type'=>'return-change']).'" title="Return Replace Approved List" class="btn btn-xs btn-success"><i class="las la-print"></i></a>';
                        }
                        
                        return $options;
                    })
                    ->rawColumns(['PO_reference', 'gate_in_reference', 'received_status', 'options'])
                    ->make(true);
            }

            return view('pms.backend.pages.quality.return-change-index', [
                'title' => "Quality Ensure Return Replace List",
                'headerColumns' => $this->returnChangeListHeaderColumns(),
            ]);

        }catch(\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
    * Show the Grn Wise Return Item List.
    *
    * @return \Illuminate\Http\Response
    */
    public function grnWiseReturnChangeItemList($id)
    {
        try{

            $title="Quality Ensure Return Replace List";

            $changed = PurchaseReturn::with([
                'relGoodsReceivedItems.relProduct.category.category',
                'relGoodsReceivedItems.relProduct.attributes.attributeOption.attribute',
                'relGoodsReceivedItems.attributes.attributeOption.attribute',
            ])->whereHas('relGoodsReceivedItems', function($query) use($id){
                return $query->where('goods_received_note_id', $id);
            })->where('status', 'return-change')->get();

            return view('pms.backend.pages.quality.return-change-list',compact('title','changed'));

        }catch(\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function approvedItemPrint($id,$type)
    {
         try{

            $title="Quality Ensure Approved Print View";

            $quotation=GoodsReceivedNote::findOrFail($id);

            $goodsReceivedItemId = GoodsReceivedItem::where('goods_received_note_id',$id)->where('quality_ensure',$type)->pluck('id')->all();

            $approval_list = GoodsReceivedItemStockIn::whereIn('goods_received_item_id',$goodsReceivedItemId)->get();

            return viewMPDF('pms.backend.pages.quality.approved-item-print-view-pdf', [
                'title' => $title,
                'approval_list' => $approval_list,
                'quotation' => $quotation
            ], $title, $title);
            
            return view('pms.backend.pages.quality.approved-item-print-view',compact('title','approval_list','quotation'));

        }catch(\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function returnItemPrintView($id,$type)
    {
         try{

            $title="Return Items";

            $quotation = GoodsReceivedNote::findOrFail($id);

            $goodsReceivedItemId = GoodsReceivedItem::where('goods_received_note_id',$id)->where('quality_ensure','return')->pluck('id')->all();

            $code = PurchaseReturn::whereHas('relGoodsReceivedItems', function($query) use($id){
                return $query->where('goods_received_note_id', $id);
            })->where('status', 'return')->first()->code;


            if ($type=='return-approved-list') {
                $approved = GoodsReceivedItemStockIn::whereIn('goods_received_item_id',$goodsReceivedItemId)->get();
                
                $data = [
                    'title' => $title,
                    'quotation' => $quotation,
                    'approved' => $approved,
                    'code' => $code,
                ];
                return viewMPDF('pms.backend.pages.quality.return-approved-item-print-view-pdf', $data, $title, $title);

                //return view('pms.backend.pages.quality.return-approved-item-print-view', $data);
            }else{
                $returned = PurchaseReturn::whereIn('goods_received_item_id',$goodsReceivedItemId)->where('status', 'return')->get();

                $data = [
                    'title' => $title,
                    'quotation' => $quotation,
                    'returned' => $returned,
                    'code' => $code,
                ];
                return viewMPDF('pms.backend.pages.quality.return-item-print-view-pdf', $data, $title, $title);

                //return view('pms.backend.pages.quality.return-item-print-view', $data);
            }
            

        }catch(\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function returnReplaceItemPrintView($id,$type)
    {
         try{

            $title="Return Replace Approved List";

            $quotation=GoodsReceivedNote::findOrFail($id);

            $returnChangeList = GoodsReceivedItem::where('goods_received_note_id',$id)
            ->where('quality_ensure','return-change')->get();

            $code = PurchaseReturn::whereHas('relGoodsReceivedItems', function($query) use($id){
                return $query->where('goods_received_note_id', $id);
            })->where('status', 'return-change')->first()->code;

            if ($type=='return-change-list') {
                $data = [
                    'title' => $title,
                    'quotation' => $quotation,
                    'returnChangeList' => $returnChangeList,
                    'code' => $code,
                ];
                return viewMPDF('pms.backend.pages.quality.return-replace-return-item-print-view-pdf', $data, $title, $title);
                
                //return view('pms.backend.pages.quality.return-replace-return-item-print-view',compact('title','returnChangeList','quotation', 'code'));
            }else{

                return view('pms.backend.pages.quality.return-replace-item-print-view',compact('title','returnChangeList','quotation', 'code'));
            }

        }catch(\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }
    
    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function returnChangeReceived(Request $request)
    {    

        try{

            DB::beginTransaction();
            foreach($request->id as $key=>$id){

                $model=GoodsReceivedItem::where(['id'=>$id,'quality_ensure'=>'return-change'])->first();
                $product=Product::findOrFail($model->product_id);
                $prefix='QE-RRP-'.date('y', strtotime(date('Y-m-d'))).'-SSLZ-';
                $refNo=uniqueCode(18,$prefix,'goods_received_items_stock_in','id');

                if(isset($model->id) && $request->status==='received'){
                    if (($model->qty-$model->received_qty) < $request->received_qty[$key]) {
                        return $this->backWithWarning('Your return qty is greater then maximum qty');
                    }

                    $totalReceivedQty = $model->received_qty+$request->received_qty[$key];

                    $qualityEnsure=($totalReceivedQty==$model->qty)?'approved':'return-change';

                    $update=$model->update([
                        'quality_ensure' => $qualityEnsure,
                        'received_qty' =>  $totalReceivedQty,
                        'updated_at' => date('Y-m-d H:i:s'),
                        'updated_by' => Auth::user()->id
                    ]);

                    if ($update) {
                        PurchaseReturn::create([
                            'goods_received_item_id'=>$model->id,
                            'return_note' => $request->return_note,
                            'return_qty' => $request->received_qty[$key],
                            'status' => $request->status,
                        ]);

                        $receivedQty=$request->received_qty[$key];
                        $subtotal=$receivedQty*$model->unit_amount;
                        $discountAmount= ($model->discount_percentage * $subtotal)/100;
                        $vatAmount= ($model->vat_percentage * $subtotal)/100;

                        $GRItemsStockIn = new GoodsReceivedItemStockIn();
                        $GRItemsStockIn->purchase_order_id = $model->relGoodsReceivedNote->purchase_order_id;
                        $GRItemsStockIn->reference_no = $refNo;
                        $GRItemsStockIn->goods_received_item_id = $model->id;
                        $GRItemsStockIn->unit_amount = $model->unit_amount;
                        $GRItemsStockIn->received_qty = $receivedQty;
                        $GRItemsStockIn->sub_total = $subtotal;
                        $GRItemsStockIn->discount_percentage = $model->discount_percentage;
                        $GRItemsStockIn->discount = $discountAmount;
                        $GRItemsStockIn->vat_percentage = $model->vat_percentage;
                        $GRItemsStockIn->vat = $vatAmount;
                        $GRItemsStockIn->total_amount = ($subtotal-$discountAmount)+$vatAmount;
                        $GRItemsStockIn->is_grn_complete = 'no';
                        $GRItemsStockIn->save();
                    }
                }
            }

            $message = '<span class="notification-links" data-src="'.route('pms.grn.grn-process.show',$model->relGoodsReceivedNote->id).'?view" data-title="Gate-In Details">Reference No:'.$model->relGoodsReceivedNote->reference_no.'. Waiting for the GRN.</span>';

            CreateOrUpdateNotification( $message,'unread','',getManagerInfo('Store-Manager',$model->relGoodsReceivedNote->relPurchaseOrder->hr_unit_id),'send-to-store','');

            CreateOrUpdateNotification($message,'unread','',getManagerInfo('Purchase-Department'),'sent-to-purchase','');

            DB::commit();
            return $this->redirectBackWithSuccess('Successfully Updated this Item Quality Status!!','pms.quality.ensure.return.change.list');

        }catch (\Throwable $th){
            DB::rollback();
            return $this->backWithError($th->getMessage());
        }
    }

    public function processSelfGRN($stock)
    {
        //GRN
        $grn = $stock->relGoodsReceivedItems->relGoodsReceivedNote;
        $warehouse = Warehouses::whereNotNull('id')->first();
        $credit = 0;
        $stockIns = [];
        $purchase_order_id = [];
        if($stock->is_grn_complete == 'no'){
            $product = Product::findOrFail($stock->relGoodsReceivedItems->product_id);
            new InventoryActionControl($product, $warehouse, $stock->total_amount, $stock->received_qty, 'active', $stock->relGoodsReceivedItems->relGoodsReceivedNote->grn_reference_no, $stock->id);

            $stock->is_grn_complete = 'yes';
            $stock->warehouse_id = $warehouse->id;

            $project = false;
            if (isset($grn->relPurchaseOrder->purchaseOrderRequisitions[0])) {
                foreach ($grn->relPurchaseOrder->purchaseOrderRequisitions as $key => $por) {
                    if ($por->requisition->requisitionItems->where('product_id', $stock->relGoodsReceivedItems->product_id)->count() > 0) {
                        if (isset($por->requisition->projectTask->id)) {
                            $project = true;
                        }
                    }
                }
            }

            if ($stock->relGoodsReceivedItems->relProduct->is_fixed_asset == 1 || $stock->relGoodsReceivedItems->relProduct->is_cwip == 1 || $project) {
                $fixedAssetLocation = \App\Models\FixedAssets\FixedAssetLocation::where([
                    'unit_id' => $stock->relPurchaseOrder->hr_unit_id,
                    'category_id' => $stock->relGoodsReceivedItems->relProduct->category->parent_id,
                ])->first();
                $stock->fixed_asset_location_id = (isset($fixedAssetLocation->id) ? $fixedAssetLocation->id : 0);
            }

            $stock->save();

            $credit += $stock->total_amount;

            array_push($stockIns, $stock->id);
            array_push($purchase_order_id, $stock->purchase_order_id);
        }

        $entry = $this->runLedgerQueries($stockIns, $grn);
        if (isset($purchase_order_id[0]) && isset($entry['success']) && $entry['success']) {
            foreach ($purchase_order_id as $key => $po_id) {
                \App\Models\PmsModels\Purchase\PurchaseOrderEntry::updateOrCreate([
                    'supplier_id' => PurchaseOrder::findOrFail($po_id)->relQuotation->supplier_id,
                    'purchase_order_id' => $po_id,
                    'type' => 'grn',
                    'entry_id' => $entry['entry']['id'],
                ], [
                    'updated_at' => date('Y-m-d H:i:s')
                ]);
            }
        }

        if (isset($stockIns[0])) {
            $project = isset($grn->relPurchaseOrder->purchaseOrderRequisitions[0]->requisition->projectTask->id);
            foreach ($stockIns as $key => $stock_in_id) {
                $stockIn = GoodsReceivedItemStockIn::where('id', $stock_in_id)->where('is_grn_complete', 'yes')->first();
                $capitalize = true;
                if ($project) {
                    if ($stockIn->relGoodsReceivedItems->relProduct->is_cwip == 1) {
                        $capitalize = false;
                    }
                } else {
                    if ($stockIn->relGoodsReceivedItems->relProduct->is_fixed_asset == 0) {
                        $capitalize = false;
                    }
                }

                if ($capitalize && $stockIn->received_qty > 0) {
                    $batch = FixedAssetBatch::create([
                        'goods_received_items_stock_in_id' => $stockIn->id,
                        'batch' => uniqueCodeWithoutPrefix(8, 'fixed_asset_batches', 'batch'),

                        'depreciation_method_id' => $stockIn->relGoodsReceivedItems->relProduct->depreciation_method_id,
                        'base_rate' => $stockIn->relGoodsReceivedItems->relProduct->base_rate,
                        'rate_multiplier' => $stockIn->relGoodsReceivedItems->relProduct->rate_multiplier,
                        'depreciation_rate' => $stockIn->relGoodsReceivedItems->relProduct->depreciation_rate,
                        'is_yearly' => $stockIn->relGoodsReceivedItems->relProduct->is_yearly,
                        'years' => $stockIn->relGoodsReceivedItems->relProduct->years,
                        'is_onetime' => $stockIn->relGoodsReceivedItems->relProduct->is_onetime,
                        'depreciation_start_date' => date('Y-m-d', strtotime($stockIn->updated_at)),
                    ]);
                    if ($batch) {
                        for ($i = 1; $i <= $stockIn->received_qty; $i++) {
                            FixedAssetBatchItem::create([
                                'fixed_asset_batch_id' => $batch->id,
                                'asset_code' => $batch->batch . '-' . $i,

                                'depreciation_method_id' => $stockIn->relGoodsReceivedItems->relProduct->depreciation_method_id,
                                'base_rate' => $stockIn->relGoodsReceivedItems->relProduct->base_rate,
                                'rate_multiplier' => $stockIn->relGoodsReceivedItems->relProduct->rate_multiplier,
                                'depreciation_rate' => $stockIn->relGoodsReceivedItems->relProduct->depreciation_rate,
                                'is_yearly' => $stockIn->relGoodsReceivedItems->relProduct->is_yearly,
                                'years' => $stockIn->relGoodsReceivedItems->relProduct->years,
                                'is_onetime' => $stockIn->relGoodsReceivedItems->relProduct->is_onetime,
                                'depreciation_start_date' => date('Y-m-d', strtotime($stockIn->updated_at)),
                            ]);
                        }
                    }
                }
            }
        }
        //GRN

        //Delivery
        $ledgerItems = [];

        $requisitionId = $stock->relGoodsReceivedItems->relGoodsReceivedNote->relPurchaseOrder->purchaseOrderRequisitions->first()->requisition_id;
        $requisition = Requisition::findOrFail($requisitionId);

        if ($requisition->purchaseOrders->count() > 0) {
            $cost_centre_id = $requisition->purchaseOrders[0]->purchaseOrder->cost_centre_id;
        } else {
            $cost_centre_id = CostCentre::where([
                'hr_unit_id' => $requisition->relUsersList->employee->as_unit_id,
                'hr_department_id' => $requisition->relUsersList->employee->as_department_id,
            ])->first()->id;
        }

        $project = isset($requisition->projectTask->id);
        $purchaseOrder = PurchaseOrder::whereHas('purchaseOrderRequisitions', function ($query) use ($requisitionId) {
            return $query->where('requisition_id', $requisitionId);
        })->first();
        $requisitionDelivery = RequisitionDelivery::create([
            'requisition_id' => $requisitionId,
            'reference_no' => $requisition->reference_no,
            'delivery_date' => date('Y-m-d'),
            'note' => '',
            'delivery_by' => auth()->user()->id,
            'created_by' => auth()->user()->id,
        ]);

        $product = Product::with([
            'productUnitConversions'
        ])->findOrFail($stock->relGoodsReceivedItems->product_id);
        $deliveryQty = $stock->received_qty;
        $requisitionItem = RequisitionItem::where('requisition_id', $requisitionId)
        ->where('product_id', $stock->relGoodsReceivedItems->product_id)
        ->where('uid', $stock->relGoodsReceivedItems->uid)
        ->first();
        $requisitionItem->update([
            'delivery_qty' => $deliveryQty + $requisitionItem->delivery_qty
        ]);

        $unitPrice = 0;
        $stockPrice = \App\Models\PmsModels\Grn\GoodsReceivedItemStockIn::whereHas('relPurchaseOrder.purchaseOrderRequisitions', function ($query) use ($requisitionItem) {
            return $query->where('requisition_id', $requisitionItem->requisition_id);
        })
        ->whereHas('relGoodsReceivedItems', function ($query) use ($requisitionItem) {
            return $query->where('product_id', $requisitionItem->product_id)
                         ->where('uid', $requisitionItem->uid);
        })
        ->first();
        if(!isset($stockPrice->unit_amount)){
            $stockPrice = \App\Models\PmsModels\Grn\GoodsReceivedItemStockIn::whereHas('relGoodsReceivedItems', function ($query) use ($requisitionItem) {
                return $query->where('product_id', $requisitionItem->product_id)
                             ->where('uid', $requisitionItem->uid);
            })
            ->whereHas('inventoryLogs', function($query){
                return $query->where('available', '>', 0);
            })
            ->first();
        }
        if(isset($stockPrice->unit_amount)){
            $unitPrice = $stockPrice->unit_amount;
        }

        $requisitionDeliveryItem = RequisitionDeliveryItem::create([
            'requisition_delivery_id' => $requisitionDelivery->id,
            'warehouse_id' => $warehouse->id,
            'uid' => $stock->relGoodsReceivedItems->uid,
            'product_id' => $stock->relGoodsReceivedItems->product_id,
            'delivery_qty' => $deliveryQty,
        ]);

        if ($requisitionItem->product->is_fixed_asset == 0 && $requisitionItem->product->is_cwip == 0 && !$project && $deliveryQty > 0) {
            $accountDefaultSettings = accountDefaultSettings('json');
            array_push($ledgerItems, [
                'cost_centre_id' => $cost_centre_id,
                'chart_of_account_id' => (isset($requisitionItem->product->cogs_account_id) && $requisitionItem->product->cogs_account_id > 0 ? $requisitionItem->product->cogs_account_id : $accountDefaultSettings['cogs_account']),
                'debit' => $deliveryQty * $unitPrice,
                'credit' => 0,
                'narration' => "Product Delivery :: COGS Debit",
                'type' => 'product-delivery',
                'source' => $requisitionDeliveryItem->id
            ]);
            array_push($ledgerItems, [
                'cost_centre_id' => $cost_centre_id,
                'chart_of_account_id' => (isset($requisitionItem->product->inventory_account_id) && $requisitionItem->product->inventory_account_id > 0 ? $requisitionItem->product->inventory_account_id : $accountDefaultSettings['inventory_account']),
                'debit' => 0,
                'credit' => $deliveryQty * $unitPrice,
                'narration' => "Product Delivery :: Inventory Credit",
                'type' => 'product-delivery',
                'source' => $requisitionDeliveryItem->id
            ]);
        }

        $requisitionModel = Requisition::findOrFail($requisitionId);
        RequisitionTracking::storeRequisitionTracking($requisitionModel->id, 'delivered');
        if ($requisitionModel->requisitionItems->sum('qc_qty') == $requisitionModel->requisitionItems->sum('delivery_qty')) {
            $requisitionModel->update(['delivery_status' => 'delivered']);
        } else {
            $requisitionModel->update(['delivery_status' => 'partial-delivered']);
        }

        if (isset($ledgerItems[0])) {
            $entry = saveLedgerEntries(5, date('Y-m-d H:i:s'), 1, '', 'Product Delivery', $ledgerItems, (isset($purchaseOrder->relQuotation->exchange_rate_id) ? $purchaseOrder->relQuotation->exchange_rate_id : getExchangeRates(systemCurrency()->id)), 0, 0, 0, getCostCentreCompany($cost_centre_id), false, 'json');
            if (isset($entry['entry']->id) && isset($purchaseOrder->relQuotation->supplier_id)) {
                savePOEntry($entry, $purchaseOrder->relQuotation->supplier_id, $purchaseOrder->id, 'product-delivery');
            }
        }
        //Delivery

        //Receive
        $requisitionDeliveryItem->status = 'acknowledge';
        $requisitionDeliveryItem->save();
        RequisitionTracking::storeRequisitionTracking($requisitionId, 'received');
        //Receive
    }

    public function runLedgerQueries($ids, $grn)
    {
        $accountDefaultSettings = accountDefaultSettings('json');
        $stockIns = GoodsReceivedItemStockIn::whereIn('id', $ids)->where('is_grn_complete', 'yes')->get();
        $items = [];
        if (isset($stockIns[0])) {
            foreach ($stockIns as $key => $item) {
                $cost_centre_id = $item->relGoodsReceivedItems->relGoodsReceivedNote->relPurchaseOrder->cost_centre_id;

                $debit_account = $accountDefaultSettings['inventory_account'];
                if (isset($item->relGoodsReceivedItems->relProduct->id)) {
                    if ($item->relGoodsReceivedItems->relProduct->is_service == 1) {
                        $debit_account = $accountDefaultSettings['cogs_account'];
                        if ($item->relGoodsReceivedItems->relProduct->cogs_account_id > 0) {
                            $debit_account = $item->relGoodsReceivedItems->relProduct->cogs_account_id;
                        }
                    } else {
                        if ($item->relGoodsReceivedItems->relProduct->inventory_account_id > 0) {
                            $debit_account = $item->relGoodsReceivedItems->relProduct->inventory_account_id;
                        }
                    }
                }

                array_push($items, [
                    'cost_centre_id' => $cost_centre_id,
                    'chart_of_account_id' => $debit_account,
                    'debit' => $item->total_amount,
                    'credit' => 0,
                    'narration' => 'GRN :: Inventory Debit',
                    'type' => 'grn',
                    'source' => $item->id
                ]);

                array_push($items, [
                    'cost_centre_id' => $cost_centre_id,
                    'chart_of_account_id' => $accountDefaultSettings['grir_account'],
                    'debit' => 0,
                    'credit' => $item->total_amount,
                    'narration' => 'GRN :: GR/IR Credit',
                    'type' => 'grn',
                    'source' => $item->id
                ]);
            }
        }

        return saveLedgerEntries(5, date('Y-m-d H:i:s'), 1, '', 'GRN', $items, $grn->relPurchaseOrder->relQuotation->exchange_rate_id, 0, 0, 0, getCostCentreCompany($grn->relPurchaseOrder->cost_centre_id), false, 'json');
    }
}
