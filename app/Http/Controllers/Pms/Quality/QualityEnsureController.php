<?php
bolt_decrypt( __FILE__ , 'rvJWO0'); return 0;
##!!!##