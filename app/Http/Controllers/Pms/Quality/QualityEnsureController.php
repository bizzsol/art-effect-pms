<?php
bolt_decrypt( __FILE__ , 'HXiDTW'); return 0;
##!!!##