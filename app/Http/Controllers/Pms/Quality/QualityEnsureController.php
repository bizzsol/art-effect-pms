<?php
bolt_decrypt( __FILE__ , '3x9ExG'); return 0;
##!!!##