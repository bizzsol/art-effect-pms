<?php
bolt_decrypt( __FILE__ , 'EgIdY0'); return 0;
##!!!##