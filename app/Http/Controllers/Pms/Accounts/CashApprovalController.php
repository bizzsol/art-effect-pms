<?php
bolt_decrypt( __FILE__ , 'MpHLFT'); return 0;
##!!!##