<?php
bolt_decrypt( __FILE__ , 'xQD1de'); return 0;
##!!!##