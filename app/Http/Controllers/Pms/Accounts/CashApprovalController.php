<?php
bolt_decrypt( __FILE__ , '4yGz6D'); return 0;
##!!!##