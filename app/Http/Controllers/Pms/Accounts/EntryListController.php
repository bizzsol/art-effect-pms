<?php
bolt_decrypt( __FILE__ , '7sr3QW'); return 0;
##!!!##