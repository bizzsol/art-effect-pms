<?php
bolt_decrypt( __FILE__ , 'MS7TwI'); return 0;
##!!!##