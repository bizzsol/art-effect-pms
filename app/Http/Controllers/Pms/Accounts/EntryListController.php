<?php
bolt_decrypt( __FILE__ , 'j9SOj9'); return 0;
##!!!##