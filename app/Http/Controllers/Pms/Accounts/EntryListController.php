<?php
bolt_decrypt( __FILE__ , 'jkf78V'); return 0;
##!!!##

namespace App\Http\Controllers\Pms\Accounts;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\PmsModels\SupplierPayment;
use App\Models\PmsModels\SupplierLedgers;
use App\Models\PmsModels\Suppliers;
use App\Models\PmsModels\Purchase\PurchaseOrder;
use App\Models\PmsModels\Purchase\PurchaseOrderEntry;
use DB;
use Auth;
use App;
use DataTables;

class EntryListController extends Controller
{   
    /**
     * Set global data table headers.
     *
     * @return headerColumns
     */

    public function headerColumns($value='')
    {
        $rows =  array(
            ['SL', 'SL'],
            ['po_date', 'po_date'],
            ['reference_no', 'reference_no'],
            ['suppliers', 'suppliers', 'text-left'],
            ['quotation_ref_no', 'quotation_ref_no', 'text-left'], 
            ['currency', 'currency', 'text-right'],
            ['total_price', 'total_price', 'text-right'], 
            ['vat', 'vat', 'text-right'],
            ['gross_price', 'gross_price', 'text-right'],
            ['actions', 'actions', 'text-center'],
        );
        return $rows;
    }
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        try {

            $purchaseOrder= PurchaseOrder::with(['relQuotation','relQuotation.relSuppliers','relQuotation.exchangeRate.currency'])
            ->whereHas('purchaseOrderEntries', function($query){
                $query->whereRaw('purchase_orders.id=purchase_order_entries.purchase_order_id');
            })
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('id', 'desc');
            });

            if (request()->ajax()) {
                return Datatables::of($purchaseOrder)
                ->addIndexColumn()
                ->editColumn('po_date', function($values){
                    return date('d-M-Y', strtotime($values->po_date));
                })
                ->addColumn('reference_no', function($values){
                    return '<a href="javascript:void(0)" onclick="purchaseOrderDetails($(this))" class="btn btn-link showPODetails" data-src="'.route('pms.purchase.order-list.show',$values->id).'">'.$values->reference_no.'</a>';
                })
                ->filterColumn('reference_no', function ($query, $keyword) {
                    return $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                })
                ->addColumn('suppliers', function($values){
                    return isset($values->relQuotation) ? (isset($values->relQuotation->relSuppliers->name) ? $values->relQuotation->relSuppliers->name.' ('.$values->relQuotation->relSuppliers->code.')' : '') : '';
                })
                ->filterColumn('suppliers', function ($query, $key) {
                    return $query->whereHas('relQuotation.relSuppliers', function ($query) use($key) {
                        $query->where('name', 'LIKE', '%'.$key.'%');
                    });
                })

                ->addColumn('quotation_ref_no', function($values){
                    return isset($values->relQuotation->reference_no)?$values->relQuotation->reference_no:'';
                })
                ->filterColumn('quotation_ref_no', function ($query, $key) {
                    return $query->whereHas('relQuotation', function ($query) use($key) {
                        $query->where('reference_no', 'LIKE', '%'.$key.'%');
                    });
                })
                ->addColumn('currency', function($values){
                    return isset($values->relQuotation->exchangeRate->currency->code)?$values->relQuotation->exchangeRate->currency->code:'';
                })
                ->filterColumn('currency', function ($query, $key) {
                    return $query->whereHas('relQuotation.exchangeRate.currency', function ($query) use($key) {
                        $query->where('code', 'LIKE', '%'.$key.'%');
                    });
                })

                ->editColumn('total_price', function($values){
                    return systemDoubleValue($values->total_price);
                })
                ->editColumn('vat', function($values){
                    return systemDoubleValue($values->vat, 2);
                })
                ->editColumn('gross_price', function($values){
                    return systemDoubleValue($values->gross_price, 2);
                })
                ->addColumn('actions', function($values){
                    return '<a target="_blank" href="'.route('pms.accounts.po.wise.entry.show',$values->id).'/print"  title="Print All Transactions" class="btn mb-1 btn-xs btn-success"><i class="las la-print"></i>Print</a>
                            <a target="__blank" href="'.route('pms.accounts.po.wise.entry.show',$values->id).'"  title="Entry List" class="btn mb-1 btn-xs btn-info"><i class="lar la-plus-square"></i>Entries</a>';
                })
                ->rawColumns(['date', 'reference_no', 'total_price', 'vat', 'gross_price', 'actions'])
                ->make(true);
            }

            $data = [
                'title' => 'Purchase Order Wise Entry List',
                'headerColumns' => $this->headerColumns(),
            ];

            return view('pms.backend.pages.accounts.po-wise-entry-list', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

     /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
     public function poWiseEntryList($id)
     {
        try {
            $entryList = PurchaseOrderEntry::with([
                'entry.items.chartOfAccount',
                'entry.entryType',
                'entry.exchangeRate.currency',
            ])
            ->where('purchase_order_id',$id)
            ->orderBy('id', 'desc')
            ->paginate(100);

            $data = [
                'title' => 'Entry List',
                'entryList' => $entryList,
            ];

            return view('pms.backend.pages.accounts.entry-list', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function poWiseEntryListPrint($id)
     {
        try {
            $purchaseOrder = PurchaseOrder::with([
                'purchaseOrderEntries.entry.items.chartOfAccount',
                'purchaseOrderEntries.entry.items.costCentre.company',
                'purchaseOrderEntries.entry.entryType',
                'purchaseOrderEntries.entry.exchangeRate.currency',
            ])->findOrFail($id);
            $title = 'Purchase Order Transactions #'.$purchaseOrder->reference_no;
            return viewMPDF('pms.backend.pages.accounts.entry-list-print', [
                'title' => $title,
                'systemCurrency' => systemCurrency(),
                'purchaseOrder' => $purchaseOrder,
            ], $title, $title);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Show the form for supplierWiseEntryList a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function supplierWiseEntryList()
    {
        try {

            $from_date = request()->has('from_date') && !empty(request()->get('from_date')) ? date("Y-m-d", strtotime(request()->get('from_date'))) : date("Y-m-d", strtotime(date('Y-m-01')));
            $to_date = request()->has('to_date') && !empty(request()->get('to_date')) ? date("Y-m-d", strtotime(request()->get('to_date'))) : date("Y-m-d", strtotime(date('Y-m-t')));
            $supplier_id = request()->has('supplier_id') ? request()->get('supplier_id') : null;
            $selected_supplier = Suppliers::find($supplier_id);

            $suppliers = Suppliers::where('status', 'Active')
            ->has('relQuotations.relPurchaseOrder.purchaseOrderEntries')
            ->get(['id', 'name']);

            
            $purchaseOrder= PurchaseOrder::with(['relQuotation','relQuotation.relSuppliers','relQuotation.exchangeRate.currency'])
            ->whereHas('purchaseOrderEntries', function($query){
                $query->whereRaw('purchase_orders.id=purchase_order_entries.purchase_order_id');
            })
            ->when(isset($supplier_id), function($query) use($supplier_id){
                return $query->whereHas('relQuotation.relSuppliers', function($query) use($supplier_id){
                    return $query->where('supplier_id', $supplier_id);
                });
            })
            ->whereBetween('po_date', [$from_date, $to_date])
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('id', 'desc');
            });

            if (request()->ajax()) {
                return Datatables::of($purchaseOrder)
                ->addIndexColumn()
                ->editColumn('po_date', function($values){
                    return date('d-M-Y', strtotime($values->po_date));
                })
                ->addColumn('reference_no', function($values){
                    return '<a href="javascript:void(0)" onclick="purchaseOrderDetails($(this))" class="btn btn-link showPODetails" data-src="'.route('pms.purchase.order-list.show',$values->id).'">'.$values->reference_no.'</a>';
                })
                ->filterColumn('reference_no', function ($query, $keyword) {
                    return $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                })
                ->addColumn('suppliers', function($values){
                    return isset($values->relQuotation) ? (isset($values->relQuotation->relSuppliers->name) ? $values->relQuotation->relSuppliers->name.' ('.$values->relQuotation->relSuppliers->code.')' : '') : '';
                })
                ->filterColumn('suppliers', function ($query, $key) {
                    return $query->whereHas('relQuotation.relSuppliers', function ($query) use($key) {
                        $query->where('name', 'LIKE', '%'.$key.'%');
                    });
                })

                ->addColumn('quotation_ref_no', function($values){
                    return isset($values->relQuotation->reference_no)?$values->relQuotation->reference_no:'';
                })
                ->filterColumn('quotation_ref_no', function ($query, $key) {
                    return $query->whereHas('relQuotation', function ($query) use($key) {
                        $query->where('reference_no', 'LIKE', '%'.$key.'%');
                    });
                })
                ->addColumn('currency', function($values){
                    return isset($values->relQuotation->exchangeRate->currency->code)?$values->relQuotation->exchangeRate->currency->code:'';
                })
                ->filterColumn('currency', function ($query, $key) {
                    return $query->whereHas('relQuotation.exchangeRate.currency', function ($query) use($key) {
                        $query->where('code', 'LIKE', '%'.$key.'%');
                    });
                })

                ->editColumn('total_price', function($values){
                    return systemDoubleValue($values->total_price);
                })
                ->editColumn('vat', function($values){
                    return systemDoubleValue($values->vat, 2);
                })
                ->editColumn('gross_price', function($values){
                    return systemDoubleValue($values->gross_price, 2);
                })
                ->addColumn('actions', function($values){
                    return '<a target="_blank" href="'.route('pms.accounts.po.wise.entry.show',$values->id).'/print"  title="Print All Transactions" class="btn mb-1 btn-xs btn-success"><i class="las la-print"></i>Print</a>
                            <a target="__blank" href="'.route('pms.accounts.po.wise.entry.show',$values->id).'"  title="Entry List" class="btn mb-1 btn-xs btn-info"><i class="lar la-plus-square"></i>Entries</a>';
                })
                ->rawColumns(['date', 'reference_no', 'total_price', 'vat', 'gross_price', 'actions'])
                ->make(true);
            }

            $data = [
                'title' => 'Supplier Wise Entry List',
                'from_date' => $from_date,
                'to_date' => $to_date,
                'supplier_id' => $supplier_id,
                'chooseSuppliers' => $suppliers,
                'selected_supplier' => $selected_supplier,
                'headerColumns' => $this->headerColumns(),
            ];

            return view('pms.backend.pages.accounts.supplier-wise-entry-list', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }
}
