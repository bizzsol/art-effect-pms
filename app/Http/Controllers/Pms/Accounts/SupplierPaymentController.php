<?php
bolt_decrypt( __FILE__ , 'a6icMP'); return 0;
##!!!##

namespace App\Http\Controllers\Pms\Accounts;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\PmsModels\SupplierPayment;
use App\Models\PmsModels\SupplierLedgers;
use App\Models\PmsModels\Suppliers;
use App\Models\PmsModels\Accounts\BankAccount;
use App\Models\PmsModels\Purchase\PurchaseOrder;
use App\Models\PmsModels\Purchase\PurchaseOrderAttachment;
use App\Models\PmsModels\Grn\GoodsReceivedNote;
use App\Models\PmsModels\Grn\GoodsReceivedItem;
use App\Models\PmsModels\Accounts\Entry;
use App\Models\PmsModels\Accounts\CurrencyType;
use App\Models\PmsModels\Accounts\Currency;
use DB;
use Auth;
use App;
use DataTables;

class SupplierPaymentController extends Controller
{
    public function headerColumns($value='')
    {
        return array(
            ['SL', 'SL', 'text-center'],
            ['purchase_order', 'purchase_order'],
            ['bill', 'bill', 'text-left'],
            ['amounts', 'amounts'],
            ['payments', 'payments'],
            ['check_all', 'check_all', 'text-center'],
        );
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        try {
            $systemCurrency = systemCurrency();
            $supplier_id = request()->has('supplier_id') ? request()->get('supplier_id') : null;
            $bill_type = request()->has('bill_type') ? request()->get('bill_type') : null;
            $currency_id = request()->has('currency_id') ? request()->get('currency_id') : null;

            $suppliers = Suppliers::where('status', 'Active')->has('relPayments')->get(['id', 'name', 'code']);
            $currencyTypes = CurrencyType::with(['currencies'])->get();

            if (request()->ajax()) {
                $exchangeRate = 1;
                $systemExchangeRate = false;
                if(request()->get('currency_id') != request()->get('payment_currency_id')){
                    $rate = getExchangeRates(request()->get('currency_id'), date('Y-m-d', strtotime(request()->get('datetime'))), date('H:i:s', strtotime(request()->get('datetime'))));
                    $exchangeRate = isset($rate['rates'][request()->get('payment_currency_id')]['rate']) ? $rate['rates'][request()->get('payment_currency_id')]['rate'] : 1;
                }

                if($systemCurrency->id != request()->get('currency_id') && $systemCurrency->id != request()->get('payment_currency_id') && request()->get('currency_id') == request()->get('payment_currency_id')){
                    $rate = getExchangeRates(request()->get('currency_id'), date('Y-m-d', strtotime(request()->get('datetime'))), date('H:i:s', strtotime(request()->get('datetime'))));
                    $systemExchangeRate = isset($rate['rates'][$systemCurrency->id]['rate']) ? $rate['rates'][$systemCurrency->id]['rate'] : 1;
                }

                $payments = SupplierPayment::with([
                    'relSupplierLedgers',
                    'relPurchaseOrder'
                ])
                ->where('status', 'audited')
                ->whereHas('relPurchaseOrder', function($query){
                    return $query->where('is_send', 'yes');
                })
                ->whereHas('relPurchaseOrder.relQuotation.exchangeRate',function ($query) use($currency_id){
                    $query->where('currency_id', $currency_id);
                })

                ->where(function($query) use($supplier_id){
                    return $query->where(function($query) use($supplier_id){
                        return $query->where('supplier_id', $supplier_id);
                    })
                    ->orWhere(function($query) use($supplier_id){
                        return $query->whereHas('relPurchaseOrder.relQuotation', function($query) use($supplier_id){
                            return $query->where('supplier_id', $supplier_id);
                        });
                    });
                })
                
                /*
                ->when(!empty($supplier_id) && $bill_type != 'asset-costing-entries', function($query) use($supplier_id){
                    return $query->whereHas('relPurchaseOrder.relQuotation', function($query) use($supplier_id){
                        return $query->where('supplier_id', $supplier_id)
                        ->where('bill_type', '!=', 'asset-costing-entries');
                    });
                })

                ->when(!empty($supplier_id) && $bill_type == 'asset-costing-entries', function($query) use($supplier_id){
                    return $query->where('supplier_id', $supplier_id)->where('bill_type', 'asset-costing-entries');
                })
                */

                ->when(!empty($bill_type), function($query) use($bill_type){
                    return $query->where('bill_type', $bill_type);
                })

                ->get();

                $available = [];
                if(isset($payments[0])){
                    foreach($payments as $key => $payment){
                        $paidAmount = $payment->relSupplierLedgers->sum('debit');
                        $billAmount = ($payment->bill_type == "po-advance" ? $payment->pay_amount : $payment->bill_amount);

                        if($billAmount-$paidAmount > 0){
                            array_push($available, $payment->id);
                        }
                    }
                }

                $payments = SupplierPayment::with([
                    'relSupplierLedgers.exchangeRate',
                    'relPurchaseOrder.Unit',
                    'relPurchaseOrder.relPoAttachment',
                    'relPurchaseOrder.relSupplierPayments.relSupplierLedgers.exchangeRate',
                    'relPurchaseOrder.relQuotation.relSuppliers',
                    'relPurchaseOrder.relQuotation.exchangeRate.currency',
                    'relPurchaseOrder.purchaseOrderEntries.entry',
                    'relPurchaseOrder.relGoodReceiveNote.billingChallan.relPurchaseOrderAttachment'
                ])
                ->where('status', 'audited')
                ->whereHas('relPurchaseOrder', function($query){
                    return $query->where('is_send', 'yes');
                })
                ->whereHas('relPurchaseOrder.relQuotation.exchangeRate',function ($query) use($currency_id){
                    $query->where('currency_id', $currency_id);
                })

                ->when(!empty($supplier_id), function($query) use($supplier_id){
                    return $query->where(function($query) use($supplier_id){
                        return $query->where(function($query) use($supplier_id){
                            return $query->where('supplier_id', $supplier_id);
                        })
                        ->orWhere(function($query) use($supplier_id){
                            return $query->whereHas('relPurchaseOrder.relQuotation', function($query) use($supplier_id){
                                return $query->where('supplier_id', $supplier_id);
                            });
                        });
                    });
                })
                
                /*
                ->when(!empty($supplier_id) && $bill_type != 'asset-costing-entries', function($query) use($supplier_id){
                    return $query->whereHas('relPurchaseOrder.relQuotation', function($query) use($supplier_id){
                        return $query->where('supplier_id', $supplier_id);
                    })->where('supplier_id', $supplier_id);
                })
                ->when(!empty($supplier_id) && $bill_type == 'asset-costing-entries', function($query) use($supplier_id){
                    return $query->where('supplier_id', $supplier_id);
                })
                */

                ->when(!empty($bill_type), function($query) use($bill_type){
                    return $query->where('bill_type', $bill_type);
                })
                ->whereIn('id', $available);

                return DataTables::of($payments)
                    ->addIndexColumn()
                    ->addColumn('purchase_order', function ($payment) {
                        $totalPaid = 0;
                        if($payment->relPurchaseOrder->relSupplierPayments->count() > 0){
                            foreach($payment->relPurchaseOrder->relSupplierPayments as $pay){
                                if($pay->bill_type != 'asset-costing-entries'){
                                    $totalPaid += $pay->relSupplierLedgers->sum('debit');
                                }
                            }
                        }

                        return view('pms.backend.pages.accounts.tools.purchaseOrder', [
                            'payment' => $payment,
                            'totalPaid' => $totalPaid,
                        ]);
                    })
                    ->filterColumn('purchase_order', function ($query, $keyword) {
                        return $query->where(function($query) use($keyword){
                            return $query->whereHas('relPurchaseOrder', function ($query) use ($keyword) {
                                $query->where('reference_no', 'LIKE', '%' . $keyword . '%');
                            })
                            ->orWhereHas('relPurchaseOrder.Unit', function ($query) use ($keyword) {
                                $query->where('hr_unit_short_name', 'LIKE', '%' . $keyword . '%');
                            })
                            ->orWhereHas('relPurchaseOrder.relQuotation.relSuppliers', function ($query) use ($keyword) {
                                $query->where(function($query) use($keyword){
                                    $query->where('name', 'LIKE', '%' . $keyword . '%')
                                          ->orWhere('code', 'LIKE', '%' . $keyword . '%');
                                });
                            })
                            ->orWhereHas('relPurchaseOrder.relQuotation.exchangeRate.currency', function ($query) use ($keyword) {
                                $query->where('name', 'LIKE', '%' . $keyword . '%');
                            });
                        });
                    })
                    ->orderColumn('purchase_order', function ($query, $order) {
                        return pleaseSortMe($query, $order, PurchaseOrder::select('purchase_orders.reference_no')
                            ->whereColumn('purchase_orders.id', 'supplier_payments.purchase_order_id')
                            ->take(1)
                        );
                    })

                    ->addColumn('bill', function ($payment) {
                        return view('pms.backend.pages.accounts.tools.bill', [
                            'payment' => $payment,
                        ]);
                    })
                    ->filterColumn('bill', function ($query, $keyword) {
                        return $query->where(function($query) use($keyword){
                            return $query->where('bill_type', 'LIKE', '%' . $keyword . '%')
                                         ->orWhere('bill_number', 'LIKE', '%' . $keyword . '%')
                                         ->orWhere('transection_date', 'LIKE', '%' . $keyword . '%');
                        });
                    })
                    ->orderColumn('bill', function ($query, $order) {
                        return $query->orderby('transection_date', $order);
                    })

                    ->addColumn('amounts', function ($payment) {
                        $totalPaid = 0;
                        $advancePaid = 0;
                        if($payment->relPurchaseOrder->relSupplierPayments->count() > 0){
                            foreach($payment->relPurchaseOrder->relSupplierPayments as $pay){
                                $paidAmount = 0;
                                if($payment->bill_type == 'asset-costing-entries'){
                                    if($pay->bill_type == 'asset-costing-entries'){
                                        $paidAmount = $pay->relSupplierLedgers->sum('debit');
                                    }
                                }else{
                                    if($pay->bill_type != 'asset-costing-entries'){
                                        $paidAmount = $pay->relSupplierLedgers->sum('debit');
                                    }
                                }
                                
                                $totalPaid += $paidAmount;

                                if($pay->bill_type == "po-advance" && $pay->bill_type != 'asset-costing-entries'){
                                    $advancePaid += $paidAmount;
                                }
                            }
                        }
                        return view('pms.backend.pages.accounts.tools.amounts', [
                            'payment' => $payment,
                            'totalPaid'=> $totalPaid,
                            'advancePaid'=> $advancePaid,
                            'paymentDetails' => [
                                'grn-amount' => $this->getGRNAmount($payment),
                                'paid-amount' => $payment->relSupplierLedgers->sum('debit'),
                                'bill-amount' => ($payment->bill_type == "po-advance" ? $payment->pay_amount : $payment->bill_amount),
                                'readonly' => ($payment->bill_type == "po-advance" ? true : false),
                            ]
                        ]);
                    })
                    ->addColumn('payments', function ($payment) use($bill_type, $exchangeRate, $systemCurrency, $systemExchangeRate) {
                        $po_rate = (isset(json_decode($payment->relPurchaseOrder->relQuotation->exchangeRate->rates, true)[request()->get('payment_currency_id')]['rate']) ? json_decode($payment->relPurchaseOrder->relQuotation->exchangeRate->rates, true)[request()->get('payment_currency_id')]['rate'] : 1);

                        $system_po_rate = (isset(json_decode($payment->relPurchaseOrder->relQuotation->exchangeRate->rates, true)[$systemCurrency->id]['rate']) ? json_decode($payment->relPurchaseOrder->relQuotation->exchangeRate->rates, true)[$systemCurrency->id]['rate'] : 1);

                        $pay_rate = (isset(json_decode($payment->exchangeRate->rates, true)[request()->get('payment_currency_id')]['rate']) ? json_decode($payment->exchangeRate->rates, true)[request()->get('payment_currency_id')]['rate'] : 1);

                        $system_pay_rate = (isset(json_decode($payment->exchangeRate->rates, true)[$systemCurrency->id]['rate']) ? json_decode($payment->exchangeRate->rates, true)[$systemCurrency->id]['rate'] : 1);

                        $paymentPaid = 0;
                        $paymentPaidForPayment = 0;
                        $paymentPaidForSystem = 0;

                        $totalPaid = 0;
                        $totalPaidForPayment = 0;
                        $totalPaidForSystem = 0;

                        $advancePaid = 0;
                        $advancePaidForPayment = 0;
                        $advancePaidForSystem = 0;

                        if($payment->relPurchaseOrder->relSupplierPayments->count() > 0){
                            foreach($payment->relPurchaseOrder->relSupplierPayments as $pay){
                                
                                $proceed = false;
                                if($payment->bill_type == 'asset-costing-entries'){
                                    if($pay->bill_type == 'asset-costing-entries'){
                                        $proceed = true;
                                    }
                                }else{
                                    if($pay->bill_type != 'asset-costing-entries'){
                                        $proceed = true;
                                    }
                                }

                                if($payment->bill_type == 'grn' && $pay->bill_type == 'po-advance'){
                                    $proceed = false;
                                }

                                $paidAmount = 0;
                                $systemPaidAmount = 0;
                                if($proceed){
                                    if($pay->relSupplierLedgers->count() > 0){
                                        foreach($pay->relSupplierLedgers as $key => $sl){
                                            $rate = (isset(json_decode($sl->exchangeRate->rates, true)[request()->get('payment_currency_id')]['rate']) ? json_decode($sl->exchangeRate->rates, true)[request()->get('payment_currency_id')]['rate'] : 1);
                                            $paidAmount += ($sl->debit*$rate);

                                            $systemRate = (isset(json_decode($sl->exchangeRate->rates, true)[$systemCurrency->id]['rate']) ? json_decode($sl->exchangeRate->rates, true)[$systemCurrency->id]['rate'] : 1);
                                            $systemPaidAmount += ($sl->debit*$systemRate);
                                            
                                            if($pay->id == $payment->id){
                                                $paymentPaid += ($sl->debit*$rate);
                                                $paymentPaidForSystem += ($sl->debit*$systemRate);
                                            }
                                        }
                                    }
                                }

                                $paymentPaidForPayment += $paymentPaid*$exchangeRate;
                                $paymentPaidForSystem += $paymentPaidForSystem;
                                
                                $totalPaid += $paidAmount;
                                $totalPaidForPayment += $paidAmount*$exchangeRate;
                                $totalPaidForSystem += $systemPaidAmount;

                                if($pay->bill_type == "po-advance" && $pay->bill_type != 'asset-costing-entries'){
                                    $advancePaid += $paidAmount;
                                    $advancePaidForPayment += $paidAmount*$exchangeRate;
                                    $advancePaidForSystem += $systemPaidAmount*($systemExchangeRate ? $systemExchangeRate : 0);
                                }
                            }
                        }

                        $advanceCleared = 0;
                        $paymentAdvanceCleared = 0;
                        $systemPaymentAdvanceCleared = 0;
                        if($payment->relPurchaseOrder->purchaseOrderEntries->where('type', 'advance-clearing')->count() > 0){
                            foreach($payment->relPurchaseOrder->purchaseOrderEntries->where('type', 'advance-clearing') as $key => $ent){
                                $rate = (isset(json_decode($ent->entry->exchangeRate->rates, true)[request()->get('payment_currency_id')]['rate']) ? json_decode($ent->entry->exchangeRate->rates, true)[request()->get('payment_currency_id')]['rate'] : 1);
                                $debit = $ent->entry->debit*$rate;
                                
                                $advanceCleared += $debit;
                                $paymentAdvanceCleared += $debit*$exchangeRate;

                                $systemRate = (isset(json_decode($ent->entry->exchangeRate->rates, true)[$systemCurrency->id]['rate']) ? json_decode($ent->entry->exchangeRate->rates, true)[$systemCurrency->id]['rate'] : 1);
                                $debit = $ent->entry->debit*$systemRate;
                                $systemPaymentAdvanceCleared += $debit*($systemExchangeRate ? $systemExchangeRate : 0);
                            }
                        }

                        $pay_amount = ($payment->bill_type == 'po-advance' ? $payment->pay_amount : $payment->bill_amount);
                        $poDue = ($pay_amount*$po_rate)-$totalPaid;
                        $paymentPoDue = (($pay_amount*$exchangeRate)-$totalPaidForPayment);
                        $systemOldPoDue = (($pay_amount*$system_pay_rate)-$totalPaidForSystem);
                        $systemPoDue = (($pay_amount*($systemExchangeRate ? $systemExchangeRate : 0))-$totalPaidForSystem);

                        $grnAmount = $this->getGRNAmount($payment);

                        return view('pms.backend.pages.accounts.tools.payments', [
                            'payment' => $payment,
                            'exchangeRate' => $exchangeRate,
                            'systemCurrency' => $systemCurrency,
                            'systemExchangeRate' => $systemExchangeRate,
                            'poDetails' => [
                                'total-paid' => $totalPaid,
                                'payment-total-paid' => $totalPaidForPayment,
                                'system-total-paid' => $totalPaidForSystem,
                                'advance-paid' => $advancePaid,
                                'payment-advance-paid' => $advancePaidForPayment,
                                'system-advance-paid' => $advancePaidForSystem,
                                'po-due' => $poDue,
                                'payment-po-due' => $paymentPoDue,
                                'system-old-po-due' => $systemOldPoDue,
                                'system-po-due' => $systemPoDue,
                                'advance-cleared' => $advanceCleared,
                                'payment-advance-cleared' => $paymentAdvanceCleared,
                                'system-advance-cleared' => $systemPaymentAdvanceCleared,
                            ],
                            'paymentDetails' => [
                                'grn-amount' => $grnAmount,
                                'payment-grn-amount' => $grnAmount*$exchangeRate,
                                'system-grn-amount' => $grnAmount*($systemExchangeRate ? $systemExchangeRate : 0),
                                
                                'payment-paid' => $paymentPaid,
                                'payment-payment-paid' => $paymentPaidForPayment,
                                'system-old-payment-paid' => $paymentPaidForSystem,
                                'system-payment-paid' => $paymentPaidForSystem*($systemExchangeRate ? $systemExchangeRate : 0),
                                
                                'bill-amount' => ($payment->bill_type == "po-advance" ? $payment->pay_amount*$pay_rate : $payment->bill_amount*$pay_rate),
                                'payment-bill-amount' => ($payment->bill_type == "po-advance" ? $payment->pay_amount*$exchangeRate : $payment->bill_amount*$exchangeRate),
                                'system-old-bill-amount' => ($payment->bill_type == "po-advance" ? $payment->pay_amount*$system_pay_rate : $payment->bill_amount*$system_pay_rate),
                                'system-bill-amount' => ($payment->bill_type == "po-advance" ? $payment->pay_amount*($systemExchangeRate ? $systemExchangeRate : 0) : $payment->bill_amount*($systemExchangeRate ? $systemExchangeRate : 0)),
                                'readonly' => ($payment->bill_type == "po-advance" ? true : false),
                            ],
                        ]);
                    })
                    ->addColumn('check_all', function ($payment) use($bill_type, $exchangeRate) {
                        $paymentPaid = 0;
                        $paymentPaidForPayment = 0;

                        $totalPaid = 0;
                        $totalPaidForPayment = 0;

                        $advancePaid = 0;
                        $advancePaidForPayment = 0;

                        if($payment->relPurchaseOrder->relSupplierPayments->count() > 0){
                            foreach($payment->relPurchaseOrder->relSupplierPayments as $pay){
                                
                                $proceed = false;
                                if($payment->bill_type == 'asset-costing-entries'){
                                    if($pay->bill_type == 'asset-costing-entries'){
                                        $proceed = true;
                                    }
                                }else{
                                    if($pay->bill_type != 'asset-costing-entries'){
                                        $proceed = true;
                                    }
                                }

                                $paidAmount = 0;
                                if($proceed){
                                    if($pay->relSupplierLedgers->count() > 0){
                                        foreach($pay->relSupplierLedgers as $key => $sl){
                                            $rate = (isset(json_decode($sl->exchangeRate->rates, true)[request()->get('payment_currency_id')]['rate']) ? json_decode($sl->exchangeRate->rates, true)[request()->get('payment_currency_id')]['rate'] : 1);
                                            $paidAmount += ($sl->debit*$rate);
                                            
                                            if($pay->id == $payment->id){
                                                $paymentPaid += ($sl->debit*$rate);
                                            }
                                        }
                                    }
                                }
                                
                                $totalPaid += $paidAmount;
                                $totalPaidForPayment += $paidAmount*$exchangeRate;

                                $paymentPaidForPayment += $paymentPaid*$exchangeRate;

                                if($pay->bill_type == "po-advance" && $pay->bill_type != 'asset-costing-entries'){
                                    $advancePaid += $paidAmount;
                                    $advancePaidForPayment += $paidAmount*$exchangeRate;
                                }
                            }
                        }

                        $pay_rate = (isset(json_decode($payment->exchangeRate->rates, true)[request()->get('currency_id')]['rate']) ? json_decode($payment->exchangeRate->rates, true)[request()->get('currency_id')]['rate'] : 1);
                        
                        return view('pms.backend.pages.accounts.tools.check', [
                            'payment' => $payment,
                            'advance-paid' => $advancePaid,
                            'payment-advance-paid' => $advancePaidForPayment,
                            'paymentDetails' => [
                                'payment-paid' => $paymentPaid,
                                'payment-payment-paid' => $paymentPaidForPayment,
                                'bill-amount' => ($payment->bill_type == "po-advance" ? $payment->pay_amount*$pay_rate : $payment->bill_amount*$pay_rate),
                                'payment-bill-amount' => ($payment->bill_type == "po-advance" ? $payment->pay_amount*$pay_rate*$exchangeRate : $payment->bill_amount*$pay_rate*$exchangeRate),
                            ]
                        ]);
                    })
                    ->rawColumns(['purchase_order', 'bill', 'amounts', 'payments', 'check_all'])
                    ->toJson();
            }

            return view('pms.backend.pages.accounts.supplier-payment-list', [
                'title' => 'Supplier Payments',
                'supplier_id' => $supplier_id,
                'bill_type' => $bill_type,
                'suppliers' => $suppliers,
                'currencyTypes' => $currencyTypes,
                'currency' => Currency::find($currency_id),
                'headerColumns' => $this->headerColumns(),
                'checkAll' => 6
            ]);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function getGRNAmount($payment)
    {
        $grnAmount = 0;
        if($payment->relPurchaseOrder->relGoodReceiveNote->count() > 0){
            foreach($payment->relPurchaseOrder->relGoodReceiveNote as $key => $grn){
                if(isset($grn->billingChallan->relPurchaseOrderAttachment->purchase_order_id) && $grn->billingChallan->relPurchaseOrderAttachment->purchase_order_id == $payment->relPurchaseOrder->id && $grn->billingChallan->relPurchaseOrderAttachment->goods_received_note_id == $payment->goods_received_note_id && $grn->billingChallan->relPurchaseOrderAttachment->bill_type == $payment->bill_type){
                    $grnAmount += $grn->gross_price;
                }
            }
        }

        return $grnAmount;
    }

    /*
    public function index____index()
    {
        try {
            $supplier_id = request()->has('supplier_id') ? request()->get('supplier_id') : null;
            $bill_type = request()->has('bill_type') ? request()->get('bill_type') : null;
            $currency_id = request()->has('currency_id') ? request()->get('currency_id') : null;

            $suppliers = Suppliers::where('status', 'Active')->has('relPayments')->get(['id', 'name']);
            $currencyTypes = CurrencyType::with(['currencies'])->get();

            $purchaseOrder = PurchaseOrder::with([
                'Unit',
                'relQuotation',
                'relQuotation.relSuppliers',
                'relQuotation.exchangeRate.currency',
                'relSupplierPayments.relSupplierLedgers',
                'purchaseOrderEntries.entry',
                'relGoodReceiveNote.billingChallan.relPurchaseOrderAttachment'
            ])
            ->where('is_send','yes')
            ->whereHas('relQuotation.exchangeRate',function ($query) use($currency_id){
                $query->where('currency_id', $currency_id);
            })
            ->whereHas('relSupplierPayments',function ($query){
                $query->whereRaw('purchase_orders.id=supplier_payments.purchase_order_id');
            })
            ->when(!empty($supplier_id), function($query) use($supplier_id){
                return $query->whereHas('relQuotation', function($query) use($supplier_id){
                    return $query->where('supplier_id', $supplier_id);
                });
            })
            ->when(!empty($bill_type), function($query) use($bill_type){
                return $query->whereHas('relSupplierPayments', function($query) use($bill_type){
                    return $query->where('bill_type', $bill_type);
                });
            })
            ->paginate(100);

            $poPaymentDetails = [];
            $paymentDetails = [];
            if($purchaseOrder->count() > 0){
                foreach($purchaseOrder as $key => $po){
                    $payments = $po->relSupplierPayments->where('status', 'audited')
                    ->when(!empty($bill_type), function($query) use($bill_type) {
                        return $query->where('bill_type', $bill_type);
                    });
                    $count = 0;
                    $totalPaid = 0;
                    $advancePaid = 0;
                    if($payments->count() > 0){
                        foreach($payments as $key => $payment){
                            $paidAmount = $payment->relSupplierLedgers->sum('debit');
                            $totalPaid += $paidAmount;

                            $billAmount = ($payment->bill_type == "po-advance" ? $payment->pay_amount : $payment->bill_amount);

                            if($billAmount-$paidAmount > 0){
                                $count++;
                            }

                            if($payment->bill_type == "po-advance" && $payment->status == "audited"){
                                $advancePaid += $paidAmount;
                            }

                            $grnAmount = 0;
                            if($po->relGoodReceiveNote->count() > 0){
                                foreach($po->relGoodReceiveNote as $key => $grn){
                                    if(isset($grn->billingChallan->relPurchaseOrderAttachment->purchase_order_id) && $grn->billingChallan->relPurchaseOrderAttachment->purchase_order_id == $po->id && $grn->billingChallan->relPurchaseOrderAttachment->goods_received_note_id == $payment->goods_received_note_id && $grn->billingChallan->relPurchaseOrderAttachment->bill_type == $payment->bill_type){
                                        $grnAmount += $grn->gross_price;
                                    }
                                }
                            }

                            $paymentDetails[$payment->id] = [
                                'grn-amount' => $grnAmount,
                                'paid-amount' => $paidAmount,
                                'bill-amount' => ($payment->bill_type == "po-advance" ? $payment->pay_amount : $payment->bill_amount),
                                'readonly' => ($payment->bill_type == "po-advance" ? true : false),
                            ];
                        }
                    }

                    if($count > 0 && $payments->count() > 0 && ($po->gross_price-$totalPaid) > 0){
                        array_push($poPaymentDetails, [
                            'purchase_order' => $po,
                            'payments' => $payments,
                            'count' => $count,
                            'total-paid' => $totalPaid,
                            'advance-paid' => $advancePaid,
                            'po-due' => $po->gross_price-$totalPaid,
                            'advance-cleared' => $po->purchaseOrderEntries->where('type', 'advance-clearing')->sum('debit'),
                        ]);
                    }
                }
            }

            return view('pms.backend.pages.accounts.supplier-payment-list', [
                'title' => 'Supplier Payments',
                'supplier_id' => $supplier_id,
                'bill_type' => $bill_type,
                'suppliers' => $suppliers,
                'currencyTypes' => $currencyTypes,
                'currency' => Currency::find($currency_id),
                'purchaseOrder' => $purchaseOrder,
                'poPaymentDetails' => $poPaymentDetails,
                'paymentDetails' => $paymentDetails,
                'headerColumns' => $this->headerColumns()
            ]);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }
    */

    public function billingListHeaderColumns($value='')
    {
        return array(
            ['SL', 'SL', 'text-center'],
            ['PO_date', 'PO_date', 'text-center'],
            ['supplier', 'supplier', 'text-center'],
            ['reference', 'reference', 'text-center'],
            ['PO_qty', 'PO_qty', 'text-right'],
            ['currency', 'currency', 'text-center'],
            ['PO_amount', 'PO_amount', 'text-right'],
            ['GRN_qty', 'GRN_qty', 'text-right'],
            ['GRN_amount', 'GRN_amount', 'text-right'],
            ['bill_amount', 'bill_amount', 'text-right'],
            ['paid_amount', 'paid_amount', 'text-right'],
            ['receive_status', 'receive_status', 'text-center'],
            ['options', 'options', 'text-center'],
        );
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function billingList()
    {
        try{
            $purchaseOrders = PurchaseOrder::with([
                'relPurchaseOrderItems',
                'relGoodReceiveNote.relGoodsReceivedItems',
                'relPoAttachment',
                'relQuotation.relSuppliers',
                'relQuotation.exchangeRate.currency',
                'relGoodsReceivedItemStockIn',
                'relSupplierPayments'
            ])
            ->where('is_send','yes')
            ->whereHas('relGoodReceiveNote',function ($query){
                $query->whereRaw('purchase_orders.id=goods_received_notes.purchase_order_id');
            })
            ->has('relPoAttachment');
            // ->whereHas('relPoAttachment',function ($query){
            //     $query->where('status','approved');
            // });

            if (request()->ajax()) {
                return DataTables::of($purchaseOrders)
                    ->addIndexColumn()
                    ->addColumn('PO_date', function($po){
                        return isset($po->po_date) ? date('Y-m-d', strtotime($po->po_date)) : '';
                    })
                    ->filterColumn('PO_date', function ($query, $keyword) {
                        return $query->where('po_date', 'LIKE', '%'.$keyword.'%');
                    })
                    ->addColumn('supplier', function($po){
                        return isset($po->relQuotation->relSuppliers->name)?$po->relQuotation->relSuppliers->name.' ('.$po->relQuotation->relSuppliers->code.')':'';
                    })
                    ->filterColumn('supplier', function ($query, $keyword) {
                        return $query->whereHas('relQuotation.relSuppliers', function($query) use($keyword){
                            return $query->where(function($query) use($keyword){
                                return $query->where('name', 'LIKE', '%'.$keyword.'%')
                                             ->orWhere('code', 'LIKE', '%'.$keyword.'%');
                            });
                        });
                    })
                    ->addColumn('reference', function($po){
                        return '<a href="javascript:void(0)" class="btn btn-link" onclick="purchaseOrderDetails($(this))" data-src="'.route('pms.purchase.order-list.show',$po->id).'">'.$po->reference_no.'</a>';
                    })
                    ->filterColumn('reference', function ($query, $keyword) {
                        return $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                    })
                    ->addColumn('PO_qty', function($po){
                        return $po->relPurchaseOrderItems->sum('qty');
                    })
                    ->addColumn('currency', function($po){
                        return $po->relQuotation->exchangeRate->currency->name;
                    })
                    ->filterColumn('currency', function ($query, $keyword) {
                        return $query->whereHas('relQuotation.exchangeRate.currency', function($query) use($keyword){
                            return $query->where(function($query) use($keyword){
                                return $query->where('name', 'LIKE', '%'.$keyword.'%');
                            });
                        });
                    })
                    ->addColumn('PO_amount', function($po){
                        return systemMoneyFormat($po->gross_price);
                    })
                    ->filterColumn('PO_amount', function ($query, $keyword) {
                        return $query->where('gross_price', 'LIKE', '%'.$keyword.'%');
                    })
                    ->addColumn('GRN_qty', function($po){
                        if (isset($po->relGoodReceiveNote[0])){
                            $po->relGoodReceiveNote->each(function ($item,$i){
                                $item['grn_qty'] = $item->relGoodsReceivedItems->sum('qty');
                            });
                            return $po->relGoodReceiveNote->sum('grn_qty');
                        }
                    })
                    ->addColumn('GRN_amount', function($po){
                        if(isset($po->relGoodsReceivedItemStockIn[0])){
                            return systemMoneyFormat($po->relGoodsReceivedItemStockIn->where('is_grn_complete', 'yes')->sum('total_amount'));
                        }
                    })
                    ->addColumn('bill_amount', function($po){
                        $bill_amount = $po->relPoAttachment->sum('bill_amount');
                        if($bill_amount > 0){
                            return systemMoneyFormat($bill_amount);
                        }else{
                            return 'Not Updated Yet';
                        }
                    })
                    ->addColumn('paid_amount', function($po){
                        return systemMoneyFormat($po->relSupplierPayments->sum('pay_amount'));
                    })
                    ->addColumn('receive_status', function($po){
                        $total_grn_qty = 0;
                        if (isset($po->relGoodReceiveNote[0])){
                            $po->relGoodReceiveNote->each(function ($item,$i){
                                $item['grn_qty']= $item->relGoodsReceivedItems->sum('qty');
                            });
                            $total_grn_qty = $po->relGoodReceiveNote->sum('grn_qty');
                        }
                        if($po->relPurchaseOrderItems->sum('qty') == $total_grn_qty){
                            return '<button class="btn btn-success btn-xs">Full Received</button>';
                        }else{
                            return '<button class="btn btn-warning btn-xs">Partial Received</button>';
                        }
                    })
                    ->addColumn('options', function($po){
                        return view('pms.backend.pages.accounts.billing-list-options', [
                            'po' => $po
                        ])->render();
                    })
                    ->rawColumns(['reference', 'receive_status', 'invoice', 'vat', 'status', 'options'])
                    ->toJson();
            }

            return view('pms.backend.pages.accounts.billing-list', [
                'title' => "Billing List",
                'headerColumns' => $this->billingListHeaderColumns()
            ]);
        }catch(\Throwable $th){
            return $this->backWithWarning($th->getMessage());
        }
    }

    public function poInvoiceList($id)
    {
        try{

            $title="Purchase Order Wise Challan List";

            $purchaseOrder = PurchaseOrder::findOrFail($id);
            $currency = $purchaseOrder->relQuotation->exchangeRate->currency->code;

            return view('pms.backend.pages.accounts.po-invoice-list',compact('title','purchaseOrder', 'currency'));
        }catch(\Throwable $th){
            return $this->backWithWarning($th->getMessage());
        }
    }

    public function store(Request $request)
    {
        $request->validate([
            'datetime' => 'required',
            'payment_id' => 'required',
            'payment_id.*' => 'required',
            'vat_amount' => 'required',
            'vat_amount.*' => 'required',
            'tax_amount' => 'required',
            'tax_amount.*' => 'required',
            'pay_amount' => 'required',
            'pay_amount.*' => 'required',
        ]);

        if(in_array($request->payment_type, ['cheque', 'fund-transfer'])){
            $request->validate([
                'payment_details' => 'required'
            ]);
        }

        DB::beginTransaction();
        try{

            $systemCurrency = systemCurrency();
            $systemExchangeRates = getExchangeRates($systemCurrency->id, date('Y-m-d', strtotime($request->datetime)), date('H:i:s', strtotime($request->datetime)));
            $systemExchangeRate = isset($systemExchangeRates['rate']->id) ? $systemExchangeRates['rate']->id : false;

            $rate = getExchangeRates($request->payment_currency_id, date('Y-m-d', strtotime($request->hidden_datetime)), date('H:i:s', strtotime($request->hidden_datetime)));
            $exchangeRateId = isset($rate['rate']->id) ? $rate['rate']->id : false;

            $purchase_order_id = [];
            $amounts = [];
            $payments = SupplierPayment::whereIn('id', $request->payment_id)->get();
            if(isset($payments[0])){
                foreach($payments as $key => $payment){
                    if(isset($request->pay_amount[$payment->id])){
                        
                        $paid_amount = DB::table('supplier_ledgers')->where('supplier_payment_id', $payment->id)->sum('debit');
                        $bill_amount = ($payment->bill_type == "po-advance" ? $payment->pay_amount : $payment->bill_amount);
                        $due_amount = $bill_amount-$paid_amount;
                        $pay_amount = $request->pay_amount[$payment->id];
                        $vat_amount = $request->vat_amount[$payment->id];
                        $tax_amount = $request->tax_amount[$payment->id];
                        $gain = isset($request->currency_gain[$payment->id]) ? $request->currency_gain[$payment->id] : 0;
                        $loss = isset($request->currency_loss[$payment->id]) ? $request->currency_loss[$payment->id] : 0;
                        $system_gain = isset($request->system_gain[$payment->id]) ? $request->system_gain[$payment->id] : 0;
                        $system_loss = isset($request->system_loss[$payment->id]) ? $request->system_loss[$payment->id] : 0;

                        // return [
                        //     'paid_amount' => $paid_amount,
                        //     'bill_amount' => $bill_amount,
                        //     'due_amount' => $due_amount,
                        //     'pay_amount' => $pay_amount,
                        //     'vat_amount' => $vat_amount,
                        //     'tax_amount' => $tax_amount,
                        //     'gain' => $gain,
                        //     'loss' => $loss,
                        //     'system_gain' => $system_gain,
                        //     'system_loss' => $system_loss,
                        // ];

                        if($due_amount > 0){
                            $payment->pay_amount = ($payment->bill_type == "po-advance" ? $payment->pay_amount : $payment->bill_amount);
                            $payment->save();

                            $supplierLedger = saveSupplierLedger($payment->supplier_id, date('Y-m-d', strtotime($payment->transection_date)), ($payment->bill_type == "po-advance" ? $payment->pay_amount : $payment->bill_amount), 0, $request->payment_type, $request->payment_details, 'Supplier Payment :: '.ucwords($payment->bill_type), ($request->payment_type == 'cash' ? 0 : $request->bank_account_id), $payment->id, $exchangeRateId);

                            if($payment->bill_type == "po-advance"){
                                $this->processAdvancePayment($payment, $pay_amount, $request->payment_type, $request->bank_account_id, $request->chart_of_account_id, $request->payment_details, $vat_amount, $tax_amount, $gain, $loss, $exchangeRateId, $request->hidden_datetime, $supplierLedger->id, $systemExchangeRate, $system_gain, $system_loss, $request->narration);
                            }else{
                                $this->processPOPayment($payment, $pay_amount, $request->payment_type, $request->bank_account_id, $request->chart_of_account_id, isset($request->advance_clearings[$payment->id]) ? $request->advance_clearings[$payment->id] : 0, isset($request->clearing_amounts[$payment->id]) ? $request->clearing_amounts[$payment->id] : 0, $request->payment_details, $vat_amount, $tax_amount, $gain, $loss, $exchangeRateId, $request->hidden_datetime, $supplierLedger->id, $systemExchangeRate, $system_gain, $system_loss, $request->narration);
                            }
                        }
                    }
                }
            }

            DB::commit();
            session()->flash('message', 'Payment has been proessed Successfully.');
            session()->flash('alert-type', 'success');
            return response()->json([
                'success' => true,
            ]);
        }catch(\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    public function processAdvancePayment($payment, $pay_amount, $payment_type, $bank_account_id, $chart_of_account_id, $payment_details = '', $vat_amount = 0, $tax_amount = 0, $gain = 0, $loss = 0, $exchange_rate_id = false, $datetime = false, $supplier_ledger_id = 0, $systemExchangeRate = false, $system_gain = 0, $system_loss = 0, $narration = '')
    {
        $accountDefaultSettings = accountDefaultSettings('json');
        $debit_account = (isset($payment->relSupplier->advance_account_id) && $payment->relSupplier->advance_account_id > 0 ? $payment->relSupplier->advance_account_id : $accountDefaultSettings['supplier_advance_account']);
        $credit_account = $chart_of_account_id;
        if($payment_type == 'cash'){
            $credit_account = $accountDefaultSettings['cash_in_hand_account'];
        }elseif($payment_type == 'cheque' || $payment_type == 'fund-transfer'){
            $bankAccount = BankAccount::find($bank_account_id);
            if(isset($bankAccount->chart_of_account_id) && $bankAccount->chart_of_account_id > 0){
                $credit_account = $bankAccount->chart_of_account_id;
            }else{
                $credit_account = $accountDefaultSettings['bank_account'];
            }
        }

        $items = array([
            'cost_centre_id' => $payment->relPurchaseOrder->cost_centre_id,
            'chart_of_account_id' => $debit_account,
            'debit' => $pay_amount+$vat_amount+$tax_amount+($gain > 0 ? $gain : 0)-($loss > 0 ? $loss : 0),
            'credit' => 0,
            'narration' => 'Supplier Advance Payment :: Advance Debit',
            'type' => 'advance-payment',
            'source' => $payment->id
        ],[
            'cost_centre_id' => $payment->relPurchaseOrder->cost_centre_id,
            'chart_of_account_id' => $credit_account,
            'debit' => 0,
            'credit' => $pay_amount,
            'narration' => 'Supplier Advance Payment :: '.ucwords(str_replace('-', ' ', $payment_type)).' Credit',
            'type' => 'advance-payment',
            'source' => $payment->id
        ]);

        if($vat_amount > 0){
            array_push($items, [
                'cost_centre_id' => $payment->relPurchaseOrder->cost_centre_id,
                'chart_of_account_id' => $accountDefaultSettings['vat_payable'],
                'debit' => 0,
                'credit' => $vat_amount,
                'narration' => 'Supplier Advance Payment :: '.ucwords(str_replace('-', ' ', $payment_type)).' Vat Credit',
                'type' => 'advance-payment',
                'source' => $payment->id
            ]);
        }

        if($tax_amount > 0){
            array_push($items,[
                'cost_centre_id' => $payment->relPurchaseOrder->cost_centre_id,
                'chart_of_account_id' => $accountDefaultSettings['tax_payable'],
                'debit' => 0,
                'credit' => $tax_amount,
                'narration' => 'Supplier Advance Payment :: '.ucwords(str_replace('-', ' ', $payment_type)).' Tax Credit',
                'type' => 'advance-payment',
                'source' => $payment->id
            ]);
        }


        if($gain > 0){
            array_push($items, [
                'cost_centre_id' => $payment->relPurchaseOrder->cost_centre_id,
                'chart_of_account_id' => $accountDefaultSettings['currency_gain_loss_account'],
                'debit' => 0,
                'credit' => $gain,
                'narration' => 'Currency Gain Credit',
                'type' => 'advance-payment',
                'source' => $payment->id
            ]);
        }

        if($loss > 0){
            array_push($items, [
                'cost_centre_id' => $payment->relPurchaseOrder->cost_centre_id,
                'chart_of_account_id' => $accountDefaultSettings['currency_gain_loss_account'],
                'debit' => $loss,
                'credit' => 0,
                'narration' => 'Currency Loss Debit',
                'type' => 'advance-payment',
                'source' => $payment->id
            ]);
        }

        $entry = saveLedgerEntries(4, $datetime, 1, '', $narration, $items, $exchange_rate_id, 0, 0, 0, getCostCentreCompany($payment->relPurchaseOrder->cost_centre_id), false, 'json');
        savePOEntry($entry, $payment->supplier_id, $payment->purchase_order_id, 'advance');

        if($payment_type == 'cheque'){
            saveCheque($bankAccount->id, $entry['entry']['id'], $supplier_ledger_id, date('Y-m-d H:i:s'), 'advance-payment', $payment_type, $payment_details, 'C', $pay_amount, $narration);
        }

        $this->saveSystemGainLoss($payment, $debit_account, $accountDefaultSettings, $datetime, $entry['entry']->number, $narration, $systemExchangeRate, $system_gain, $system_loss, 'advance');
    }

    public function processPOPayment($payment, $pay_amount, $payment_type, $bank_account_id, $chart_of_account_id, $advance_clearings = 0, $clearing_amounts = 0, $payment_details = '', $vat_amount = 0, $tax_amount = 0, $gain = 0, $loss = 0, $exchange_rate_id = false, $datetime = false, $supplier_ledger_id = 0, $systemExchangeRate = false, $system_gain = 0, $system_loss = 0, $narration = '')
    {
        $accountDefaultSettings = accountDefaultSettings('json');

        if($advance_clearings == 1 && $clearing_amounts > 0){
            $advancePaid = Entry::whereHas('purchaseOrder', function($query) use($payment){
                return $query->where([
                    'purchase_order_id' => $payment->purchase_order_id,
                    'type' => 'advance',
                ]);
            })->sum('debit');
            if($advancePaid > 0){
                $debit_account = (isset($payment->relSupplier->payable_account_id) && $payment->relSupplier->payable_account_id > 0 ? $payment->relSupplier->payable_account_id : $accountDefaultSettings['supplier_payable_account']);
                $credit_account = (isset($payment->relSupplier->advance_account_id) && $payment->relSupplier->advance_account_id > 0 ? $payment->relSupplier->advance_account_id : $accountDefaultSettings['supplier_advance_account']);

                $items = array([
                    'cost_centre_id' => $payment->relPurchaseOrder->cost_centre_id,
                    'chart_of_account_id' => $debit_account,
                    'debit' => $clearing_amounts,
                    'credit' => 0,
                    'narration' => 'Advance Clearing :: Payable Debit',
                    'type' => 'advance-clearing',
                    'source' => $payment->id
                ],[
                    'cost_centre_id' => $payment->relPurchaseOrder->cost_centre_id,
                    'chart_of_account_id' => $credit_account,
                    'debit' => 0,
                    'credit' => $clearing_amounts,
                    'narration' => 'Advance Clearing :: Advance Credit',
                    'type' => 'advance-clearing',
                    'source' => $payment->id
                ]);
                $entry = saveLedgerEntries(5, $datetime, 1, '', $narration, $items, $payment->exchange_rate_id, 0, 0, 0, getCostCentreCompany($payment->relPurchaseOrder->cost_centre_id), false, 'json');
                savePOEntry($entry, $payment->supplier_id, $payment->purchase_order_id, 'advance-clearing');

                SupplierPayment::where([
                    'purchase_order_id' => $payment->purchase_order_id,
                    'bill_type' => 'po-advance',
                    'is_cleared' => 0
                ])
                ->update([
                    'is_cleared' => 1
                ]);
            }
        }

        $debit_account = (isset($payment->relSupplier->payable_account_id) && $payment->relSupplier->payable_account_id > 0 ? $payment->relSupplier->payable_account_id : $accountDefaultSettings['supplier_payable_account']);
        $credit_account = $chart_of_account_id;
        if($payment_type == 'cash'){
            $credit_account = $accountDefaultSettings['cash_in_hand_account'];
        }elseif($payment_type == 'cheque' || $payment_type == 'fund-transfer'){
            $bankAccount = BankAccount::find($bank_account_id);
            if(isset($bankAccount->chart_of_account_id) && $bankAccount->chart_of_account_id > 0){
                $credit_account = $bankAccount->chart_of_account_id;
            }else{
                $credit_account = $accountDefaultSettings['bank_account'];
            }
        }

        $items = array([
            'cost_centre_id' => $payment->relPurchaseOrder->cost_centre_id,
            'chart_of_account_id' => $debit_account,
            'debit' => $pay_amount+$vat_amount+$tax_amount+($gain > 0 ? $gain : 0)-($loss > 0 ? $loss : 0),
            'credit' => 0,
            'narration' => 'Supplier Payment :: Payable Debit',
            'type' => 'supplier-payment',
            'source' => $payment->id
        ],[
            'cost_centre_id' => $payment->relPurchaseOrder->cost_centre_id,
            'chart_of_account_id' => $credit_account,
            'debit' => 0,
            'credit' => $pay_amount,
            'narration' => 'Supplier Payment :: '.ucwords(str_replace('-', ' ', $payment_type)).' Credit',
            'type' => 'supplier-payment',
            'source' => $payment->id
        ]);

        if($vat_amount > 0){
            array_push($items, [
                'cost_centre_id' => $payment->relPurchaseOrder->cost_centre_id,
                'chart_of_account_id' => $accountDefaultSettings['vat_payable'],
                'debit' => 0,
                'credit' => $vat_amount,
                'narration' => 'Supplier Payment :: '.ucwords(str_replace('-', ' ', $payment_type)).' Vat Credit',
                'type' => 'supplier-payment',
                'source' => $payment->id
            ]);
        }

        if($tax_amount > 0){
            array_push($items, [
                'cost_centre_id' => $payment->relPurchaseOrder->cost_centre_id,
                'chart_of_account_id' => $accountDefaultSettings['tax_payable'],
                'debit' => 0,
                'credit' => $tax_amount,
                'narration' => 'Supplier Payment :: '.ucwords(str_replace('-', ' ', $payment_type)).' Tax Credit',
                'type' => 'supplier-payment',
                'source' => $payment->id
            ]);
        }

        if($gain > 0){
            array_push($items, [
                'cost_centre_id' => $payment->relPurchaseOrder->cost_centre_id,
                'chart_of_account_id' => $accountDefaultSettings['currency_gain_loss_account'],
                'debit' => 0,
                'credit' => $gain,
                'narration' => 'Currency Gain Credit',
                'type' => 'supplier-payment',
                'source' => $payment->id
            ]);
        }

        if($loss > 0){
            array_push($items, [
                'cost_centre_id' => $payment->relPurchaseOrder->cost_centre_id,
                'chart_of_account_id' => $accountDefaultSettings['currency_gain_loss_account'],
                'debit' => $loss,
                'credit' => 0,
                'narration' => 'Currency Loss Debit',
                'type' => 'supplier-payment',
                'source' => $payment->id
            ]);
        }

        $entry = saveLedgerEntries(4, $datetime, 1, '', $narration, $items,  $exchange_rate_id, 0, 0, 0, getCostCentreCompany($payment->relPurchaseOrder->cost_centre_id), false, 'json');
        savePOEntry($entry, $payment->supplier_id, $payment->purchase_order_id, 'supplier-payment');

        if($payment_type == 'cheque'){
            saveCheque($bankAccount->id, $entry['entry']['id'], $supplier_ledger_id, date('Y-m-d H:i:s'), 'payment', $payment_type, $payment_details, 'C', ($pay_amount+$vat_amount+$tax_amount), $narration);
        }

        $this->saveSystemGainLoss($payment, $debit_account, $accountDefaultSettings, $datetime, $entry['entry']->number, $narration, $systemExchangeRate, $system_gain, $system_loss, 'supplier-payment');
    }

    public function saveSystemGainLoss($payment, $debit_account, $accountDefaultSettings, $datetime, $number, $narration, $systemExchangeRate, $system_gain, $system_loss, $type)
    {
        if($systemExchangeRate && ($system_gain > 0 || $system_loss > 0)){
            $items = [];
            if($system_gain > 0){
                $items = array([
                    'cost_centre_id' => $payment->relPurchaseOrder->cost_centre_id,
                    'chart_of_account_id' => $debit_account,
                    'debit' => $system_gain,
                    'credit' => 0,
                    'narration' => 'Currency Gain Debit',
                    'type' => 'supplier-payment',
                    'source' => $payment->id
                ],[
                    'cost_centre_id' => $payment->relPurchaseOrder->cost_centre_id,
                    'chart_of_account_id' => $accountDefaultSettings['currency_gain_loss_account'],
                    'debit' => 0,
                    'credit' => $system_gain,
                    'narration' => 'Currency Gain Credit',
                    'type' => 'supplier-payment',
                    'source' => $payment->id
                ]);
            }

            if($system_loss > 0){
                $items = array([
                    'cost_centre_id' => $payment->relPurchaseOrder->cost_centre_id,
                    'chart_of_account_id' => $accountDefaultSettings['currency_gain_loss_account'],
                    'debit' => $system_loss,
                    'credit' => 0,
                    'narration' => 'Currency Loss Debit',
                    'type' => 'supplier-payment',
                    'source' => $payment->id
                ], [
                    'cost_centre_id' => $payment->relPurchaseOrder->cost_centre_id,
                    'chart_of_account_id' => $debit_account,
                    'debit' => 0,
                    'credit' => $system_loss,
                    'narration' => 'Currency Loss Credit',
                    'type' => 'supplier-payment',
                    'source' => $payment->id
                ]);
            }

            $entry = saveLedgerEntries(4, $datetime, 1, $number, $narration, $items, $systemExchangeRate, 0, 0, 0, getCostCentreCompany($payment->relPurchaseOrder->cost_centre_id), false, 'json');
            savePOEntry($entry, $payment->supplier_id, $payment->purchase_order_id, $type);
        }
    }
}
