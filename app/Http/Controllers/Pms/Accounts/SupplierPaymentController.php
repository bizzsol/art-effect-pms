<?php
bolt_decrypt( __FILE__ , '5An2Vv'); return 0;
##!!!##