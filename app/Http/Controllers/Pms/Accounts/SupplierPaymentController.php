<?php
bolt_decrypt( __FILE__ , 'TAkkX5'); return 0;
##!!!##