<?php
bolt_decrypt( __FILE__ , '0Tp4Nr'); return 0;
##!!!##