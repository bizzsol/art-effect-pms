<?php
bolt_decrypt( __FILE__ , 'uJ2Gcm'); return 0;
##!!!##