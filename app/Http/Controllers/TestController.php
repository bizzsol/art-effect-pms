<?php
bolt_decrypt( __FILE__ , '79dxGd'); return 0;
##!!!##