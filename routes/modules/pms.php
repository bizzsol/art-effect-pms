<?php
bolt_decrypt( __FILE__ , 'CX1Tfe'); return 0;
##!!!##